syntax = "proto3";

package mempoolpb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/mempoolpb";

import "contextstorepb/contextstorepb.proto";
import "dslpb/dslpb.proto";
import "mir/plugin.proto";
import "requestpb/requestpb.proto";

// ============================================================
// Events
// ============================================================

message Event {
  oneof Type {
    option (mir.event_type) = true;
    RequestBatch           request_batch            = 1;
    NewBatch               new_batch                = 2;
    RequestTransactions    request_transactions     = 3;
    TransactionsResponse   transactions_response    = 4;
    RequestTransactionIDs  request_transaction_ids  = 5;
    TransactionIDsResponse transaction_ids_response = 6;
    RequestBatchID         request_batch_id         = 7;
    BatchIDResponse        batch_id_response        = 8;
  }
}

// RequestBatch is used by the availability layer to request a new batch of transactions from the mempool.
message RequestBatch {
  RequestBatchOrigin origin = 1;
}

// NewBatch is a response to a RequestBatch event.
message NewBatch {
  repeated bytes             tx_ids = 1;
  repeated requestpb.Request txs    = 2;
  RequestBatchOrigin         origin = 3;
}

// RequestTransactions allows the availability layer to request transactions from the mempool by their IDs.
// It is possible that some of these transactions are not present in the mempool.
message RequestTransactions {
  repeated bytes            tx_ids = 1;
  RequestTransactionsOrigin origin = 2;
}

// TransactionsResponse is a response to a RequestTransactions event.
message TransactionsResponse {
  repeated bool              present = 1;
  repeated requestpb.Request txs     = 2;
  RequestTransactionsOrigin  origin  = 3;
}

// RequestTransactionIDs allows other modules to request the mempool module to compute IDs for the given transactions.
// It is possible that some of these transactions are not present in the mempool.
message RequestTransactionIDs {
  repeated requestpb.Request  txs    = 1;
  RequestTransactionIDsOrigin origin = 2;
}

// TransactionIDsResponse is a response to a RequestTransactionIDs event.
message TransactionIDsResponse {
  repeated bytes              tx_ids = 1;
  RequestTransactionIDsOrigin origin = 2;
}

// RequestBatchID allows other modules to request the mempool module to compute the ID of a batch.
// It is possible that some transactions in the batch are not present in the mempool.
message RequestBatchID {
  repeated bytes        tx_ids = 1;
  RequestBatchIDOrigin origin = 2;
}

// BatchIDResponse is a response to a RequestBatchID event.
message BatchIDResponse {
  bytes                batch_id = 1;
  RequestBatchIDOrigin origin   = 2;
}

// TODO: add events related to garbage collection.

// ============================================================
// Data structures
// ============================================================

message RequestBatchOrigin {
  string module = 1;
  oneof Type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}

message RequestTransactionsOrigin {
  string module = 1;
  oneof Type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}

message RequestTransactionIDsOrigin {
  string module = 1;
  oneof Type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}

message RequestBatchIDOrigin {
  string module = 1;
  oneof Type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}
