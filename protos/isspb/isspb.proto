/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package isspb;

import "commonpb/commonpb.proto";
import "requestpb/requestpb.proto";
import "checkpointpb/checkpointpb.proto";

option go_package = "github.com/filecoin-project/mir/pkg/pb/isspb";

// ============================================================
// Messages
// ============================================================

message ISSMessage {
  oneof type {
    // SBMessage                       sb                  = 1;
    checkpointpb.StableCheckpoint   stable_checkpoint   = 3;
    RetransmitRequests              retransmit_requests = 4;
  }
}

message RetransmitRequests {
  repeated requestpb.Request requests = 1;
}

// ============================================================
// Events
// ============================================================

message ISSEvent {
  oneof type {
    PersistCheckpoint       persist_checkpoint        = 1;
    PersistStableCheckpoint persist_stable_checkpoint = 3;
    PushCheckpoint          push_checkpoint           = 5;
    SBDeliver sb_deliver = 6;
  }
}

message ISSHashOrigin {
  oneof type {
    uint64            log_entry_sn         = 2;
    uint64            state_snapshot_epoch = 3;
    RequestHashOrigin requests             = 4;
  }
}

message RequestHashOrigin {
  repeated requestpb.Request requests = 1;
}

message ISSSigVerOrigin {
  oneof type {
    uint64                        checkpoint_epoch  = 2;
    checkpointpb.StableCheckpoint stable_checkpoint = 3;
  }
}

message PersistCheckpoint {
  uint64                 sn                  = 1;
  commonpb.StateSnapshot state_snapshot      = 2;
  bytes                  state_snapshot_hash = 3;
  bytes                  signature           = 4;
}

// PersistStableCheckpoint needs to be a separate Event from StableCheckpoint, since both are ISSEvents,
// but, the protocol must differentiate between them. While the former will be applied on recovery from the WAL,
// the latter serves as a notification to the ISS protocol when a stable checkpoint has been persisted.
message PersistStableCheckpoint {
  checkpointpb.StableCheckpoint stable_checkpoint = 1;
}

message PushCheckpoint {
}

message SBDeliver {
  uint64 sn          = 1;
  bytes  data        = 2;
  bool   aborted     = 3;
  string leader      = 4;
  string instance_id = 5;
}
