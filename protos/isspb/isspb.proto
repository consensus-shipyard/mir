/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package isspb;

import "isspbftpb/isspbftpb.proto";
import "requestpb/requestpb.proto";

option go_package = "github.com/filecoin-project/mir/pkg/pb/isspb";

// ============================================================
// Messages
// ============================================================

message ISSMessage {
  oneof type {
    SBMessage          sb                  = 1;
    Checkpoint         checkpoint          = 2;
    RetransmitRequests retransmit_requests = 3;
  }
}

message RetransmitRequests {
  repeated requestpb.RequestRef requests = 1;
}

message SBMessage {
  uint64 epoch = 1;
  uint64 instance = 2;
  SBInstanceMessage msg = 3;
}

message Checkpoint {
  uint64 epoch =           1;
  uint64 sn    =           2;
  bytes  appSnapshotHash = 3;
  bytes  signature       = 4;
}

message SBInstanceMessage {
  oneof type {
    isspbftpb.Preprepare        pbft_preprepare         = 1;
    isspbftpb.Prepare           pbft_prepare            = 2;
    isspbftpb.Commit            pbft_commit             = 3;
    isspbftpb.SignedViewChange  pbft_signed_view_change = 4;
  }
}

// ============================================================
// Events
// ============================================================

message ISSEvent {
  oneof type {
    PersistCheckpoint       persist_checkpoint        = 1;
    StableCheckpoint        stable_checkpoint         = 2;
    PersistStableCheckpoint persist_stable_checkpoint = 3;
    SBEvent                 sb                        = 4;
  }
}

message ISSHashOrigin {
  oneof type {
    SBHashOrigin   sb              = 1;
    uint64         log_entry_sn    = 2;
    uint64         app_snapshot_sn = 3;
  }
}

message ISSSignOrigin {
  oneof type {
    SBSignOrigin sb            = 1;
    uint64       checkpoint_sn = 2;
  }
}

message ISSSigVerOrigin {
  oneof type {
    SBSigVerOrigin sb = 1;
  }
}

message PersistCheckpoint {
  uint64 sn                = 1;
  bytes  app_snapshot      = 2;
  bytes  app_snapshot_hash = 3;
  bytes  signature         = 4;
}

message StableCheckpoint {
  uint64 epoch =             1;
  uint64 sn    =             2;
  bytes  app_snapshot_hash = 3;
  // TODO: Some form of checkpoint certificate will need to go here.
}

// PersistStableCheckpoint needs to be a separate Event from StableCheckpoint, since both are ISSEvents,
// but, the protocol must differentiate between them. While the former will be applied on recovery from the WAL,
// the latter serves as a notification to the ISS protocol when a stable checkpoint has been persisted.
message PersistStableCheckpoint {
  StableCheckpoint stable_checkpoint = 1;
}

message SBEvent {
  uint64 epoch = 1;
  uint64 instance = 2;
  SBInstanceEvent event = 3;
}

message SBInstanceEvent {
  oneof type {
    SBInit            init              = 1;
    SBDeliver         deliver           = 2;
    SBMessageReceived message_received  = 3;
    SBPendingRequests pending_requests  = 4;
    SBTick            tick              = 5;
    SBCutBatch        cut_batch         = 6;
    SBBatchReady      batch_ready       = 7;
    SBWaitForRequests wait_for_requests = 8;
    SBRequestsReady   requests_ready    = 9;
    SBHashRequest     hash_request      = 10;
    SBHashResult      hash_result       = 11;
    SBSignResult      sign_result       = 12;
    SBNodeSigVerified node_sig_verified = 13;

    isspbftpb.Preprepare       pbft_persist_preprepare         = 100;
    isspbftpb.Prepare          pbft_persist_prepare            = 101;
    isspbftpb.Commit           pbft_persist_commit             = 102;
    isspbftpb.SignedViewChange pbft_persist_signed_view_change = 103;
  }
}

message SBInit {}

message SBCutBatch {
  uint64 max_size = 1;
}

message SBBatchReady {
  requestpb.Batch batch = 1;
  uint64 pending_requests_left = 2;
}

message SBWaitForRequests {
  SBReqWaitReference reference = 1;
  repeated requestpb.RequestRef requests = 2;
}

message SBReqWaitReference {
  oneof type {
    isspbftpb.ReqWaitReference pbft = 1;
  }
}

message SBRequestsReady {
  SBReqWaitReference ref = 1;
}

message SBDeliver {
  uint64          sn      = 1;
  requestpb.Batch batch   = 2;
  bool            aborted = 3;
}

message SBMessageReceived {
  string from = 1;
  SBInstanceMessage msg = 2;
}

message SBPendingRequests {
  uint64 numRequests = 1;
}

message SBTick {
}

message SBHashResult {
  bytes                digest = 1;
  SBInstanceHashOrigin origin = 2;
}

message SBHashRequest {
  repeated bytes data   = 1;
  SBHashOrigin   origin = 2;
}

message SBHashOrigin {
  uint64 epoch = 1;
  uint64 instance = 2;
  SBInstanceHashOrigin origin = 3;
}

message SBInstanceHashOrigin {
  oneof type {
    isspbftpb.Preprepare pbft_preprepare = 1;
  }
}

message SBSignResult {
  bytes                signature = 1;
  SBInstanceSignOrigin origin    = 2;
}

message SBSignOrigin {
  uint64               epoch    = 1;
  uint64               instance = 2;
  SBInstanceSignOrigin origin   = 3;
}

message SBInstanceSignOrigin {
  oneof type {
    isspbftpb.ViewChange pbft_view_change = 1;
  }
}

message SBNodeSigVerified {
  string                 node_id = 1;
  bool                   valid   = 2;
  string                 error   = 3;
  SBInstanceSigVerOrigin origin  = 4;
}

message SBSigVerOrigin {
  uint64                 epoch    = 1;
  uint64                 instance = 2;
  SBInstanceSigVerOrigin origin   = 3;
}

message SBInstanceSigVerOrigin {
  oneof type {
    isspbftpb.SignedViewChange pbft_signed_view_change = 1;
  }
}

// ============================================================
// Status
// ============================================================

message Status {
  uint64 epoch = 1;
  repeated SBStatus orderers = 2;
  // TODO: Represent whole status here.
}

message SBStatus {
  string leader = 1;
  // TODO: Represent whole status here, e.g., the segment etc.
  //       Put common SB-related fields here and add a field for subprotocol-specific status.
}
