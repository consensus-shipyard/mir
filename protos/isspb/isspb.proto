/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package isspb;

import "commonpb/commonpb.proto";
import "isspbftpb/isspbftpb.proto";
import "requestpb/requestpb.proto";
import "availabilitypb/availabilitypb.proto";

option go_package = "github.com/filecoin-project/mir/pkg/pb/isspb";

// ============================================================
// Messages
// ============================================================

message ISSMessage {
  oneof type {
    SBMessage          sb                  = 1;
    Checkpoint         checkpoint          = 2;
    StableCheckpoint   stable_checkpoint   = 3;
    RetransmitRequests retransmit_requests = 4;
  }
}

message RetransmitRequests {
  repeated requestpb.Request requests = 1;
}

message SBMessage {
  uint64 epoch = 1;
  uint64 instance = 2;
  SBInstanceMessage msg = 3;
}

message Checkpoint {
  uint64 epoch        = 1;
  uint64 sn           = 2;
  bytes  snapshotHash = 3;
  bytes  signature    = 4;
}

message SBInstanceMessage {
  oneof type {
    isspbftpb.Preprepare        pbft_preprepare         = 1;
    isspbftpb.Prepare           pbft_prepare            = 2;
    isspbftpb.Commit            pbft_commit             = 3;
    isspbftpb.SignedViewChange  pbft_signed_view_change = 4;
    isspbftpb.PreprepareRequest pbft_preprepare_request = 5;
    isspbftpb.Preprepare        pbft_missing_preprepare = 6;
    isspbftpb.NewView           pbft_new_view           = 7;
    isspbftpb.Done              pbft_done               = 8;
    isspbftpb.CatchUpRequest    pbft_catch_up_request   = 9;
    isspbftpb.Preprepare        pbft_catch_up_response  = 10;
  }
}

// ============================================================
// Events
// ============================================================

message ISSEvent {
  oneof type {
    PersistCheckpoint       persist_checkpoint        = 1;
    StableCheckpoint        stable_checkpoint         = 2;
    PersistStableCheckpoint persist_stable_checkpoint = 3;
    SBEvent                 sb                        = 4;
    PushCheckpoint          push_checkpoint           = 5;
  }
}

message ISSHashOrigin {
  oneof type {
    SBHashOrigin      sb                   = 1;
    uint64            log_entry_sn         = 2;
    uint64            state_snapshot_epoch = 3;
    RequestHashOrigin requests             = 4;
  }
}

message RequestHashOrigin {
  repeated requestpb.Request requests = 1;
}

message ISSSignOrigin {
  oneof type {
    SBSignOrigin sb               = 1;
    uint64       checkpoint_epoch = 2;
  }
}

message ISSSigVerOrigin {
  oneof type {
    SBSigVerOrigin   sb                = 1;
    uint64           checkpoint_epoch  = 2;
    StableCheckpoint stable_checkpoint = 3;
  }
}

message PersistCheckpoint {
  uint64                 sn                  = 1;
  commonpb.StateSnapshot state_snapshot      = 2;
  bytes                  state_snapshot_hash = 3;
  bytes                  signature           = 4;
}

message StableCheckpoint {
  uint64                 sn       = 2;
  commonpb.StateSnapshot snapshot = 3;
  map<string, bytes>     cert     = 4;
}

// PersistStableCheckpoint needs to be a separate Event from StableCheckpoint, since both are ISSEvents,
// but, the protocol must differentiate between them. While the former will be applied on recovery from the WAL,
// the latter serves as a notification to the ISS protocol when a stable checkpoint has been persisted.
message PersistStableCheckpoint {
  StableCheckpoint stable_checkpoint = 1;
}

message PushCheckpoint {
}

message SBEvent {
  uint64 epoch = 1;
  uint64 instance = 2;
  SBInstanceEvent event = 3;
}

message SBInstanceEvent {
  oneof type {
    SBInit             init               = 1;
    SBDeliver          deliver            = 2;
    SBMessageReceived  message_received   = 3;
    SBPendingRequests  pending_requests   = 4;
    SBTick             tick               = 5;
    SBCertRequest      cert_request       = 6;
    SBBatchReady       batch_ready        = 7;
    SBCertReady        cert_ready         = 8;
    SBHashRequest      hash_request       = 10;
    SBHashResult       hash_result        = 11;
    SBSignResult       sign_result        = 12;
    SBNodeSigsVerified node_sigs_verified = 13;

    isspbftpb.Preprepare       pbft_persist_preprepare         = 100;
    isspbftpb.Prepare          pbft_persist_prepare            = 101;
    isspbftpb.Commit           pbft_persist_commit             = 102;
    isspbftpb.SignedViewChange pbft_persist_signed_view_change = 103;
    isspbftpb.NewView          pbft_persist_new_view           = 104;
    uint64                     pbft_propose_timeout            = 105;
    isspbftpb.VCSNTimeout      pbft_view_change_sn_timeout     = 106;
    uint64                     pbft_view_change_seg_timeout    = 107;
  }
}

message SBInit {}

message SBCertRequest {
}

message SBBatchReady {
  requestpb.Batch batch = 1;
  uint64 pending_requests_left = 2;
}

message SBCertReady {
  availabilitypb.Cert cert = 1;
}

message SBDeliver {
  uint64          sn      = 1;
  bytes           cert_data = 2;
  bool            aborted = 3;
}

message SBMessageReceived {
  string from = 1;
  SBInstanceMessage msg = 2;
}

message SBPendingRequests {
  uint64 numRequests = 1;
}

message SBTick {
}

message SBHashRequest {
  repeated commonpb.HashData data   = 1;
  SBHashOrigin               origin = 2;
}

message SBHashResult {
  repeated bytes       digests = 1;
  SBInstanceHashOrigin origin  = 2;
}

message SBHashOrigin {
  uint64               epoch    = 1;
  uint64               instance = 2;
  SBInstanceHashOrigin origin   = 3;
}

message SBInstanceHashOrigin {
  oneof type {
    isspbftpb.Preprepare pbft_preprepare         = 1;
    isspbftpb.Preprepare pbft_missing_preprepare = 2;
    isspbftpb.NewView    pbft_new_view           = 3;
    uint64               pbft_empty_preprepares  = 4;
    isspbftpb.Preprepare pbft_catch_up_response  = 5;
  }
}

message SBSignResult {
  bytes                signature = 1;
  SBInstanceSignOrigin origin    = 2;
}

message SBSignOrigin {
  uint64               epoch    = 1;
  uint64               instance = 2;
  SBInstanceSignOrigin origin   = 3;
}

message SBInstanceSignOrigin {
  oneof type {
    isspbftpb.ViewChange pbft_view_change = 1;
  }
}

message SBNodeSigsVerified {
  repeated string        node_ids = 1;
  repeated bool          valid    = 2;
  repeated string        errors   = 3;
  SBInstanceSigVerOrigin origin   = 4;
  bool                   all_ok   = 5;
}

message SBSigVerOrigin {
  uint64                 epoch    = 1;
  uint64                 instance = 2;
  SBInstanceSigVerOrigin origin   = 3;
}

message SBInstanceSigVerOrigin {
  oneof type {
    isspbftpb.SignedViewChange pbft_signed_view_change = 1;
    isspbftpb.NewView          pbft_new_view           = 2;
  }
}
