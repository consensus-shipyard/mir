syntax = "proto3";

package bcmpb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/blockchainpb/bcmpb";

import "blockchainpb/blockchainpb.proto";
import "blockchainpb/statepb/statepb.proto";

import "mir/codegen_extensions.proto";

message Event {
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    NewBlock                          new_block                             = 1;
    NewChain                          new_chain                             = 2;

    GetBlockRequest                   get_block_request                     = 3;
    GetBlockResponse                  get_block_response                    = 4;
    GetChainRequest                   get_chain_request                     = 5;
    GetChainResponse                  get_chain_response                    = 6;
    GetHeadToCheckpointChainRequest   get_head_to_checkpoint_chain_request  = 7;
    GetHeadToCheckpointChainResponse  get_head_to_checkpoint_chain_response = 8;
    RegisterCheckpoint                register_checkpoint                   = 9;

    InitBlockchain                    init_blockchain                       = 100;
  }
}

message NewBlock {
  option (mir.event) = true;
  
  blockchainpb.Block block = 1;
}

message NewChain {
  option (mir.event) = true;
  
  // chain segment ordered blocks[0]<-blocks[1]<-blocks[2]...
  repeated blockchainpb.Block blocks = 1;
}

message GetBlockRequest {
  option (mir.event) = true;

  string  request_id    = 1;
  string  source_module = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  
  uint64  block_id      = 3;
}

message GetBlockResponse {
  option (mir.event) = true;

  string              request_id  = 1;
  bool                found       = 2;
  blockchainpb.Block  block       = 3;
}

message GetChainRequest {
  option (mir.event) = true;

  string          request_id        = 1;
  string          source_module     = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  
  uint64          end_block_id      = 3;
  repeated uint64 source_block_ids  = 4;
}

message GetChainResponse {
  option (mir.event) = true;

  string                        request_id  = 1;
  bool                          success     = 2;
  repeated blockchainpb.Block   chain       = 3; // sorted from oldest to youngest
}

message GetHeadToCheckpointChainRequest {
  option (mir.event) = true;

  string                        request_id    = 1;
  string                        source_module = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
}

message GetHeadToCheckpointChainResponse {
  option (mir.event) = true;

  string                        request_id        = 1;
  repeated blockchainpb.Block   chain             = 2; // from checkpoint to head
  statepb.State                 checkpoint_state  = 3;
}

message RegisterCheckpoint {
  option (mir.event) = true;

  uint64        block_id  = 1;
  statepb.State state     = 2;
}

message InitBlockchain {
  option (mir.event) = true;

  statepb.State initial_state = 1;
}
