syntax = "proto3";

package factorypb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/factorypb";

import "availabilitypb/mscpb/mscpb.proto";
import "checkpointpb/checkpointpb.proto";
import "ordererpb/ordererpb.proto";
import "ordererpb/pprepvalidatorpb/pprepvalidatorpb.proto";


import "mir/codegen_extensions.proto";

message Event {
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    NewModule      new_module      = 1;
    GarbageCollect garbage_collect = 2;
  }
}

// NewModule is a request to create a new module.
// module_id must be prefixed with the factory module's ID followed by "/".
// retention_index is used for garbage collection (see: GarbageCollect).
message NewModule {
  option (mir.event) = true;

  string          module_id       = 1 [(mir.type) = "github.com/filecoin-project/mir/stdtypes.ModuleID"];
  uint64          retention_index = 2 [(mir.type) = "github.com/filecoin-project/mir/stdtypes.RetentionIndex"];
  GeneratorParams params          = 3;
}

// GarbageCollect is a request to destroy all modules that have retention index smaller than the given index.
message GarbageCollect {
  option (mir.event) = true;

  uint64 retention_index = 1 [(mir.type) = "github.com/filecoin-project/mir/stdtypes.RetentionIndex"];
}

// GeneratorParams is a union of all possible types of module parameters
// for modules that can be created by the factory module.
message GeneratorParams {
  option (mir.struct) = true;

  oneof type {
    availabilitypb.mscpb.InstanceParams        multisig_collector = 1;
    checkpointpb.InstanceParams                checkpoint         = 2;
    EchoModuleParams                           echo_test_module   = 3;
    ordererpb.PBFTModule                       pbft_module        = 4;
    pprepvalidatorpb.PPrepValidatorChkp        ppv_module         = 5;
  }
}

// Used only for unit tests.
message EchoModuleParams {
  option (mir.struct) = true;

  string prefix = 1; // This prefix is prepended to all strings the module echoes.
}
