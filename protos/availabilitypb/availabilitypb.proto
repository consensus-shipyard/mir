syntax = "proto3";

package availabilitypb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/availabilitypb";

import "contextstorepb/contextstorepb.proto";
import "dslpb/dslpb.proto";
import "availabilitypb/mscpb/mscpb.proto";
import "requestpb/requestpb.proto";

import "mir/codegen_extensions.proto";

// ============================================================
// Events
// ============================================================

message Event {
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    RequestCert request_cert = 1;
    NewCert     new_cert     = 2;

    VerifyCert   verify_cert   = 3;
    CertVerified cert_verified = 4;

    RequestTransactions request_transactions = 5;
    ProvideTransactions provide_transactions = 6;

    ComputeCert compute_cert = 7;

  }
}

// RequestCert is used by the consensus layer to request an availability certificate for a batch of transactions
// from the availability layer.
message RequestCert {
  option (mir.event) = true;
  RequestCertOrigin origin = 1 [(mir.origin_request) = true];
}

// NewCert is a response to a RequestCert event.
message NewCert {
  option (mir.event) = true;
  Cert              cert   = 1;
  RequestCertOrigin origin = 2 [(mir.origin_response) = true];
}

// VerifyCert can be used to verify validity of an availability certificate.
message VerifyCert {
  option (mir.event) = true;
  Cert cert               = 1;
  VerifyCertOrigin origin = 2 [(mir.origin_request) = true];
}

// CertVerified is a response to a VerifyCert event.
message CertVerified {
  option (mir.event) = true;

  bool             valid  = 1;
  string           err    = 2;
  VerifyCertOrigin origin = 3 [(mir.origin_response) = true];
}

// RequestTransactions allows reconstructing a batch of transactions by a corresponding availability certificate.
// It is possible that some of the transactions are not stored locally on the node. In this case, the availability
// layer will pull these transactions from other nodes.
message RequestTransactions {
  option (mir.event) = true;

  Cert                      cert   = 1;
  RequestTransactionsOrigin origin = 2 [(mir.origin_request) = true];
}

// ProvideTransactions is a response to a RequestTransactions event.
message ProvideTransactions {
  option (mir.event) = true;

  repeated requestpb.Request txs    = 1;
  RequestTransactionsOrigin  origin = 2 [(mir.origin_response) = true];
}

// TODO: add events related to garbage collection.

// ============================================================
// Data structures
// ============================================================

message RequestCertOrigin {
  option (mir.struct) = true;

  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  oneof type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}

message RequestTransactionsOrigin {
  option (mir.struct) = true;
  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  oneof type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}

message VerifyCertOrigin {
  option (mir.struct) = true;

  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  oneof type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}

message Cert {
  option (mir.struct) = true;

  oneof type {
    mscpb.Certs mscs = 1;
  }
}

message ComputeCert {
  option (mir.event) = true;

}
