syntax = "proto3";

package ordererspb;

import "commonpb/commonpb.proto";
import "ordererspbftpb/ordererspbftpb.proto";
import "requestpb/requestpb.proto";
import "availabilitypb/availabilitypb.proto";

option go_package = "github.com/filecoin-project/mir/pkg/pb/ordererspb";

message SBInstanceMessage {
  oneof type {
    ordererspbftpb.Preprepare        pbft_preprepare         = 1;
    ordererspbftpb.Prepare           pbft_prepare            = 2;
    ordererspbftpb.Commit            pbft_commit             = 3;
    ordererspbftpb.SignedViewChange  pbft_signed_view_change = 4;
    ordererspbftpb.PreprepareRequest pbft_preprepare_request = 5;
    ordererspbftpb.Preprepare        pbft_missing_preprepare = 6;
    ordererspbftpb.NewView           pbft_new_view           = 7;
    ordererspbftpb.Done              pbft_done               = 8;
    ordererspbftpb.CatchUpRequest    pbft_catch_up_request   = 9;
    ordererspbftpb.Preprepare        pbft_catch_up_response  = 10;
  }
}

message SBInstanceEvent {
  oneof type {
    SBInit             init               = 1;
    SBDeliver          deliver            = 2;
    SBMessageReceived  message_received   = 3;
    SBPendingRequests  pending_requests   = 4;
    SBTick             tick               = 5;
    SBCertRequest      cert_request       = 6;
    SBBatchReady       batch_ready        = 7;
    SBCertReady        cert_ready         = 8;
    SBHashRequest      hash_request       = 10;
    SBHashResult       hash_result        = 11;
    SBSignResult       sign_result        = 12;
    SBNodeSigsVerified node_sigs_verified = 13;

    ordererspbftpb.Preprepare       pbft_persist_preprepare         = 100;
    ordererspbftpb.Prepare          pbft_persist_prepare            = 101;
    ordererspbftpb.Commit           pbft_persist_commit             = 102;
    ordererspbftpb.SignedViewChange pbft_persist_signed_view_change = 103;
    ordererspbftpb.NewView          pbft_persist_new_view           = 104;
    uint64                          pbft_propose_timeout            = 105;
    ordererspbftpb.VCSNTimeout      pbft_view_change_sn_timeout     = 106;
    uint64                          pbft_view_change_seg_timeout    = 107;
  }
}

message SBInit {}

message SBCertRequest {
}

message SBBatchReady {
  requestpb.Batch batch = 1;
  uint64 pending_requests_left = 2;
}

message SBCertReady {
  availabilitypb.Cert cert = 1;
}

message SBDeliver {
  uint64          sn      = 1;
  bytes           cert_data = 2;
  bool            aborted = 3;
}

message SBMessageReceived {
  string from = 1;
  SBInstanceMessage msg = 2;
}

message SBPendingRequests {
  uint64 numRequests = 1;
}

message SBTick {
}

message SBHashRequest {
  repeated commonpb.HashData data   = 1;
  SBHashOrigin               origin = 2;
}

message SBHashResult {
  repeated bytes       digests = 1;
  SBInstanceHashOrigin origin  = 2;
}

message SBHashOrigin {
  uint64               epoch    = 1;
  uint64               instance = 2;
  SBInstanceHashOrigin origin   = 3;
}

message SBInstanceHashOrigin {
  oneof type {
    ordererspbftpb.Preprepare pbft_preprepare         = 1;
    ordererspbftpb.Preprepare pbft_missing_preprepare = 2;
    ordererspbftpb.NewView    pbft_new_view           = 3;
    uint64               pbft_empty_preprepares  = 4;
    ordererspbftpb.Preprepare pbft_catch_up_response  = 5;
  }
}

message SBSignResult {
  bytes                signature = 1;
  SBInstanceSignOrigin origin    = 2;
}

message SBSignOrigin {
  uint64               epoch    = 1;
  uint64               instance = 2;
  SBInstanceSignOrigin origin   = 3;
}

message SBInstanceSignOrigin {
  oneof type {
    ordererspbftpb.ViewChange pbft_view_change = 1;
  }
}

message SBNodeSigsVerified {
  repeated string        node_ids = 1;
  repeated bool          valid    = 2;
  repeated string        errors   = 3;
  SBInstanceSigVerOrigin origin   = 4;
  bool                   all_ok   = 5;
}

message SBSigVerOrigin {
  uint64                 epoch    = 1;
  uint64                 instance = 2;
  SBInstanceSigVerOrigin origin   = 3;
}

message SBInstanceSigVerOrigin {
  oneof type {
    ordererspbftpb.SignedViewChange pbft_signed_view_change = 1;
    ordererspbftpb.NewView          pbft_new_view           = 2;
  }
}

message PBFTSegment {
  string leader = 1;
  repeated string membership = 2;
  repeated uint64 seq_nrs = 3;
}

message PBFTModule{
  PBFTSegment segment = 1;
  string availability_id = 2;
  uint64 epoch = 3;
}