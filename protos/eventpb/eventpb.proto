/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package eventpb;

import "commonpb/commonpb.proto";
import "requestpb/requestpb.proto";
import "messagepb/messagepb.proto";
import "isspb/isspb.proto";
import "google/protobuf/wrappers.proto";
import "bcbpb/bcbpb.proto";
import "contextstorepb/contextstorepb.proto";
import "dslpb/dslpb.proto";
import "mempoolpb/mempoolpb.proto";
import "availabilitypb/availabilitypb.proto";
import "factorymodulepb/factorymodulepb.proto";
import "availabilitypb/batchdbpb/batchdbpb.proto";
import "batchfetcherpb/batchfetcherpb.proto";
import "threshcryptopb/threshcryptopb.proto";
import "pingpongpb/pingpongpb.proto";
import "checkpointpb/checkpointpb.proto";
import "ordererspb/ordererspb.proto";

import "mir/codegen_extensions.proto";

option go_package = "github.com/filecoin-project/mir/pkg/pb/eventpb";

// Event represents a state event to be injected into the state machine
message Event {
  option (mir.event_root) = true;

  // TODO, normalize naming, for instance Complete/Completed
  oneof type {
    option (mir.event_type) = true;

    Init                    init                    = 1;
    NewRequests             new_requests            = 7;
    HashRequest             hash_request            = 8;
    HashResult              hash_result             = 9;
    SignRequest             sign_request            = 10;
    SignResult              sign_result             = 11;
    VerifyNodeSigs          verify_node_sigs        = 12;
    NodeSigsVerified        node_sigs_verified      = 13;
    RequestReady            request_ready           = 14;
    SendMessage             send_message            = 15;
    MessageReceived         message_received        = 16;
    DeliverCert             deliver_cert            = 17;
    isspb.ISSEvent          iss                     = 18;
    VerifyRequestSig        verify_request_sig      = 19;
    RequestSigVerified      request_sig_verified    = 20;
    StoreVerifiedRequest    store_verified_request  = 21;
    AppSnapshotRequest      app_snapshot_request    = 22;
    AppSnapshot             app_snapshot            = 23;
    AppRestoreState         app_restore_state       = 24;
    TimerDelay              timer_delay             = 25;
    TimerRepeat             timer_repeat            = 26;
    TimerGarbageCollect     timer_garbage_collect   = 27;
    bcbpb.Event             bcb                     = 28;
    mempoolpb.Event         mempool                 = 29;
    availabilitypb.Event    availability            = 30;
    NewEpoch                new_epoch               = 31;
    NewConfig               new_config              = 32;
    factorymodulepb.Factory factory                 = 33;
    batchdbpb.Event         batch_db                = 34;
    batchfetcherpb.Event    batch_fetcher           = 35;
    threshcryptopb.Event    thresh_crypto           = 36;
    pingpongpb.Event        ping_pong               = 37;
    checkpointpb.Event      checkpoint              = 38;
    ordererspb.SBInstanceEvent sb_event             = 39;

    // for unit-tests
    google.protobuf.StringValue testingString = 301;
    google.protobuf.UInt64Value testingUint   = 302;
  }

  // A list of follow-up events to process after this event has been processed.
  // This field is used if events need to be processed in a particular order.
  // For example, a message sending event must only be processed
  // after the corresponding entry has been persisted in the write-ahead log (WAL).
  // In this case, the WAL append event would be this event
  // and the next field would contain the message sending event.
  // (This is a hypothetical example, the WAL functionality is not implemented at a moment.)
  repeated Event next = 100 [(mir.omit_in_event_constructors) = true];

  string dest_module = 200 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
}

message Init {
  option (mir.event) = true;
}

message NewRequests {
  option (mir.event) = true;
  repeated requestpb.Request requests = 1;
}

message HashRequest {
  option (mir.event) = true;
  repeated commonpb.HashData data   = 1;
  HashOrigin                 origin = 2 [(mir.origin_request) = true];
}

message HashResult {
  option (mir.event) = true;
  repeated bytes digests = 1;
  HashOrigin     origin  = 2 [(mir.origin_response) = true];
}

message HashOrigin {
  option (mir.struct) = true;
  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  oneof type {
    contextstorepb.Origin   context_store = 2;
    requestpb.Request       request       = 3;
    dslpb.Origin            dsl           = 5;
    checkpointpb.HashOrigin checkpoint    = 6;
    ordererspb.SBInstanceHashOrigin sb    = 7;
  }
}

message SignRequest {
  option (mir.event) = true;

  repeated bytes data = 1;
  SignOrigin origin = 2 [(mir.origin_request) = true];
}

message SignResult {
  option (mir.event) = true;

  bytes signature = 1;
  SignOrigin origin = 2 [(mir.origin_response) = true];
}

message SignOrigin {
  option (mir.struct) = true;

  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  oneof type {
    contextstorepb.Origin   context_store = 2;
    dslpb.Origin            dsl           = 4;
    checkpointpb.SignOrigin checkpoint    = 5;
    ordererspb.SBInstanceSignOrigin sb    = 6;
  }
}

message SigVerData {
  option (mir.struct) = true;

  repeated bytes data = 1;
}

message VerifyNodeSigs {
  option (mir.event) = true;

  repeated SigVerData data       = 1;
  repeated bytes      signatures = 2;
  SigVerOrigin        origin     = 3 [(mir.origin_request) = true];
  repeated string     node_ids   = 4 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.NodeID"];
}

message NodeSigsVerified {
  option (mir.event) = true;

  SigVerOrigin    origin   = 1 [(mir.origin_response) = true];
  repeated string node_ids = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.NodeID"];
  repeated bool   valid    = 3;
  repeated string errors   = 4 [(mir.type) = "error"];
  bool            all_ok   = 5;
}

message SigVerOrigin {
  option (mir.struct) = true;

  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];

  oneof type {
    contextstorepb.Origin     context_store = 2;
    dslpb.Origin              dsl           = 4;
    checkpointpb.SigVerOrigin checkpoint    = 5;
    ordererspb.SBInstanceSigVerOrigin sb    = 6;
  }
}

message RequestReady {
  requestpb.Request request = 1;
}

message SendMessage {
  option (mir.event) = true;

  messagepb.Message msg = 1;
  repeated string destinations = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.NodeID"];
}

message MessageReceived {
  option (mir.event) = true;

  string from = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.NodeID"];
  messagepb.Message msg = 2;
}

message DeliverCert {
  option (mir.event) = true;
  uint64 sn = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.SeqNr"];
  availabilitypb.Cert cert = 2;
}

message VerifyRequestSig {
  requestpb.Request request   = 1;
  bytes             signature = 2;
}

message RequestSigVerified {
  requestpb.Request request = 1;
  bool              valid   = 2;
  string            error   = 3;
}

message StoreVerifiedRequest {
  requestpb.Request request       = 1;
  bytes             data          = 2;
  bytes             authenticator = 3;
}

message AppSnapshotRequest {
  option (mir.event) = true;
  string reply_to = 1  [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];;
}

message AppSnapshot {
  bytes                 app_data = 1;
}

message AppRestoreState {
  option (mir.event) = true;
  checkpointpb.StableCheckpoint checkpoint = 1;
}

message TimerDelay {
  repeated Event  events = 1;
  uint64          delay  = 2;
}

message TimerRepeat {
  option (mir.event) = true;
  repeated Event  events_to_repeat          = 1;
  uint64          delay           = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.TimeDuration"];
  uint64          retention_index = 3 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.RetentionIndex"];
}

message TimerGarbageCollect {
  option (mir.event) = true;
  uint64 retention_index = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.RetentionIndex"];
}

message NewEpoch {
  option (mir.event) = true;
  uint64 epoch_nr = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.EpochNr"];
}

message NewConfig {
  option (mir.event) = true;
  uint64              epoch_nr   = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.EpochNr"];
  commonpb.Membership membership = 2;
}
