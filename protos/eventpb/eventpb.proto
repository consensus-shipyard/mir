syntax = "proto3";

package eventpb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/eventpb";

import "apppb/apppb.proto";
import "isspb/isspb.proto";
import "google/protobuf/wrappers.proto";
import "bcbpb/bcbpb.proto";
import "mempoolpb/mempoolpb.proto";
import "availabilitypb/availabilitypb.proto";
import "factorypb/factorypb.proto";
import "availabilitypb/batchdbpb/batchdbpb.proto";
import "batchfetcherpb/batchfetcherpb.proto";
import "threshcryptopb/threshcryptopb.proto";
import "pingpongpb/pingpongpb.proto";
import "checkpointpb/checkpointpb.proto";
import "checkpointpb/chkpvalidatorpb/chkpvalidatorpb.proto";
import "ordererpb/ordererpb.proto";
import "ordererpb/pprepvalidatorpb/pprepvalidatorpb.proto";
import "hasherpb/hasherpb.proto";
import "cryptopb/cryptopb.proto";
import "transportpb/transportpb.proto";
import "testerpb/testerpb.proto";
import "blockchainpb/bcmpb/bcmpb.proto";
import "blockchainpb/minerpb/minerpb.proto";
import "blockchainpb/tpmpb/tpmpb.proto";
import "blockchainpb/communicationpb/communicationpb.proto";
import "blockchainpb/synchronizerpb/synchronizerpb.proto";
import "blockchainpb/interceptorpb/interceptorpb.proto";

import "mir/codegen_extensions.proto";

// Event represents a state event to be injected into the state machine
message Event {
  option (mir.event_root) = true;

  string dest_module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];

  oneof type {
    option (mir.event_type) = true;

    // Special global event produced by the runtime itself and sent to each module on initialization.
    Init init = 2;

    // Timer events are recursive and must be defined in this file for protobuf-specific reasons, see below.
    TimerEvent timer = 3;

    // Module-specific events
            hasherpb.Event hasher          = 10;
               bcbpb.Event bcb             = 11;
           mempoolpb.Event mempool         = 12;
      availabilitypb.Event availability    = 13;
           batchdbpb.Event batch_db        = 14;
      batchfetcherpb.Event batch_fetcher   = 15;
      threshcryptopb.Event thresh_crypto   = 16;
        checkpointpb.Event checkpoint      = 17;
           factorypb.Event factory         = 18;
               isspb.Event iss             = 19;
           ordererpb.Event orderer         = 20;
            cryptopb.Event crypto          = 21;
               apppb.Event app             = 22;
         transportpb.Event transport       = 23;
     chkpvalidatorpb.Event chkp_validator  = 24;
    pprepvalidatorpb.Event pprep_valiadtor = 25;


    // Events for code samples
    pingpongpb.Event ping_pong = 200;

    // Events for blockchain 
    bcmpb.Event           bcm           = 201;
    minerpb.Event         miner         = 202;
    tpmpb.Event           tpm           = 203;
    communicationpb.Event communication = 204;
    synchronizerpb.Event  synchronizer  = 205;

    // Events for blockchain interceptor
    interceptorpb.Event   bcinterceptor = 210;

    // for unit-tests
    google.protobuf.StringValue testingString = 301;
    google.protobuf.UInt64Value testingUint   = 302;
    testerpb.Tester tester = 303;
  }

  // A list of follow-up events to process after this event has been processed.
  // This field is used if events need to be processed in a particular order.
  // For example, a message sending event must only be processed
  // after the corresponding entry has been persisted in the write-ahead log (WAL).
  // In this case, the WAL append event would be this event
  // and the next field would contain the message sending event.
  // (This is a hypothetical example, the WAL functionality is not implemented at a moment.)
  repeated Event next = 400 [(mir.omit_in_event_constructors) = true];
}

message Init {
  option (mir.event) = true;
}

// ======================================================================
// Timer events.
// ======================================================================
//
// Those events, unfortunately, need to be defined in this very file, because they recursively contain top-level Events.
// Protocol Buffers do not allow recursion across files, complaining about cyclic imports.
// If timer events were defined separately, a cyclic import would be inevitable.
// The main eventpb.proto file (this file) would need to include the timer event file,
// since the timer event is an option of the Event's oneof type field.
// But the timer event file also needs to import the main Event file, since timer events contain general Events.
// The only way to express this mutual dependency is having all dependent events defined in a single file.

message TimerEvent {
  option (mir.event_class) = true;

  oneof Type {
    option (mir.event_type) = true;

    TimerDelay  delay                   = 1;
    TimerRepeat repeat                  = 2;
    TimerGarbageCollect garbage_collect = 3;
  }
}

message TimerDelay {
  option (mir.event) = true;

  // TODO: The field name must not be `events`, since it conflicts with a package name in the generated code.
  //       This is a bug in the Mir code generator that should be fixed.
  repeated Event events_to_delay  = 1;
  uint64         delay            = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/timer/types.Duration"];
}

message TimerRepeat {
  option (mir.event) = true;

  repeated Event events_to_repeat = 1;
  uint64         delay            = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/timer/types.Duration"];
  uint64         retention_index  = 3 [(mir.type) = "github.com/filecoin-project/mir/pkg/trantor/types.RetentionIndex"];
}

message TimerGarbageCollect {
  option (mir.event) = true;

  uint64 retention_index = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/trantor/types.RetentionIndex"];
}
