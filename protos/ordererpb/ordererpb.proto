syntax = "proto3";

package ordererpb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/ordererpb";

import "trantorpb/trantorpb.proto";
import "pbftpb/pbftpb.proto";

import "mir/codegen_extensions.proto";
import "net/codegen_extensions.proto";

message Event {
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    pbftpb.Event pbft = 1;
  }
}

message Message {
  option (net.message_class) = true;

  oneof type {
    option (net.message_type) = true;

    pbftpb.Message pbft = 1;
  }
}

message PBFTSegment {
  option (mir.struct) = true;

  // The leader node of the orderer.
  string leader = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.NodeID"];

  // All nodes executing the orderer implementation.
  trantorpb.Membership membership = 2;

  // Sequence numbers for which the orderer is responsible, along with corresponding (optional) pre-defined proposals.
  // The keys of this map are the actual "segment" of the commit log.
  // A nil value means that no proposal is specified (and the protocol implementation will decide what to propose).
  // A non-nil value will be proposed (by this node) for that sequence number whenever possible.
  // Currently, such a "free" proposal is a new availability certificate in view 0,
  // and a special empty one in other views.
  map<uint64, bytes> proposals = 3 [(mir.key_type) = "github.com/filecoin-project/mir/pkg/trantor/types.SeqNr"];
}

message PBFTModule{
  option (mir.struct) = true;

  PBFTSegment segment          = 1;
  string      availability_id  = 2;
  uint64      epoch            = 3;
  uint64      validity_checker = 4;
}