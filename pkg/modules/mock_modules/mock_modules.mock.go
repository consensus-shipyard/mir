// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/mir/pkg/modules (interfaces: Module,PassiveModule)

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	events "github.com/filecoin-project/mir/pkg/events"
	gomock "github.com/golang/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// ImplementsModule mocks base method.
func (m *MockModule) ImplementsModule() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ImplementsModule")
}

// ImplementsModule indicates an expected call of ImplementsModule.
func (mr *MockModuleMockRecorder) ImplementsModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImplementsModule", reflect.TypeOf((*MockModule)(nil).ImplementsModule))
}

// MockPassiveModule is a mock of PassiveModule interface.
type MockPassiveModule struct {
	ctrl     *gomock.Controller
	recorder *MockPassiveModuleMockRecorder
}

// MockPassiveModuleMockRecorder is the mock recorder for MockPassiveModule.
type MockPassiveModuleMockRecorder struct {
	mock *MockPassiveModule
}

// NewMockPassiveModule creates a new mock instance.
func NewMockPassiveModule(ctrl *gomock.Controller) *MockPassiveModule {
	mock := &MockPassiveModule{ctrl: ctrl}
	mock.recorder = &MockPassiveModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassiveModule) EXPECT() *MockPassiveModuleMockRecorder {
	return m.recorder
}

// ApplyEvents mocks base method.
func (m *MockPassiveModule) ApplyEvents(arg0 *events.EventList) (*events.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyEvents", arg0)
	ret0, _ := ret[0].(*events.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyEvents indicates an expected call of ApplyEvents.
func (mr *MockPassiveModuleMockRecorder) ApplyEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyEvents", reflect.TypeOf((*MockPassiveModule)(nil).ApplyEvents), arg0)
}

// ImplementsModule mocks base method.
func (m *MockPassiveModule) ImplementsModule() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ImplementsModule")
}

// ImplementsModule indicates an expected call of ImplementsModule.
func (mr *MockPassiveModuleMockRecorder) ImplementsModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImplementsModule", reflect.TypeOf((*MockPassiveModule)(nil).ImplementsModule))
}
