// Code generated by Mir codegen. DO NOT EDIT.

package blockchainpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	blockchainpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	types1 "github.com/filecoin-project/mir/pkg/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type Block struct {
	BlockId         uint64
	PreviousBlockId uint64
	Payload         *types.Payload
	Timestamp       *timestamppb.Timestamp
	MinerId         types1.NodeID
}

func BlockFromPb(pb *blockchainpb.Block) *Block {
	if pb == nil {
		return nil
	}
	return &Block{
		BlockId:         pb.BlockId,
		PreviousBlockId: pb.PreviousBlockId,
		Payload:         types.PayloadFromPb(pb.Payload),
		Timestamp:       pb.Timestamp,
		MinerId:         (types1.NodeID)(pb.MinerId),
	}
}

func (m *Block) Pb() *blockchainpb.Block {
	if m == nil {
		return nil
	}
	pbMessage := &blockchainpb.Block{}
	{
		pbMessage.BlockId = m.BlockId
		pbMessage.PreviousBlockId = m.PreviousBlockId
		if m.Payload != nil {
			pbMessage.Payload = (m.Payload).Pb()
		}
		if m.Timestamp != nil {
			pbMessage.Timestamp = m.Timestamp
		}
		pbMessage.MinerId = (string)(m.MinerId)
	}

	return pbMessage
}

func (*Block) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*blockchainpb.Block]()}
}
