// Code generated by Mir codegen. DO NOT EDIT.

package bcmpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	blockchainpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb"
	bcmpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/bcmpb"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() bcmpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb bcmpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *bcmpb.Event_NewBlock:
		return &Event_NewBlock{NewBlock: NewBlockFromPb(pb.NewBlock)}
	}
	return nil
}

type Event_NewBlock struct {
	NewBlock *NewBlock
}

func (*Event_NewBlock) isEvent_Type() {}

func (w *Event_NewBlock) Unwrap() *NewBlock {
	return w.NewBlock
}

func (w *Event_NewBlock) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.NewBlock == nil {
		return &bcmpb.Event_NewBlock{}
	}
	return &bcmpb.Event_NewBlock{NewBlock: (w.NewBlock).Pb()}
}

func (*Event_NewBlock) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_NewBlock]()}
}

func EventFromPb(pb *bcmpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *bcmpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event]()}
}

type NewBlock struct {
	Block *blockchainpb.Block
}

func NewBlockFromPb(pb *bcmpb.NewBlock) *NewBlock {
	if pb == nil {
		return nil
	}
	return &NewBlock{
		Block: pb.Block,
	}
}

func (m *NewBlock) Pb() *bcmpb.NewBlock {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.NewBlock{}
	{
		if m.Block != nil {
			pbMessage.Block = m.Block
		}
	}

	return pbMessage
}

func (*NewBlock) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.NewBlock]()}
}
