// Code generated by Mir codegen. DO NOT EDIT.

package bcmpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	types1 "github.com/filecoin-project/mir/codegen/model/types"
	blockchainpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb"
	bcmpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/bcmpb"
	types3 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	types2 "github.com/filecoin-project/mir/pkg/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() bcmpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb bcmpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *bcmpb.Event_NewBlock:
		return &Event_NewBlock{NewBlock: NewBlockFromPb(pb.NewBlock)}
	case *bcmpb.Event_NewChain:
		return &Event_NewChain{NewChain: NewChainFromPb(pb.NewChain)}
	case *bcmpb.Event_GetChainRequest:
		return &Event_GetChainRequest{GetChainRequest: GetChainRequestFromPb(pb.GetChainRequest)}
	case *bcmpb.Event_GetChainResponse:
		return &Event_GetChainResponse{GetChainResponse: GetChainResponseFromPb(pb.GetChainResponse)}
	case *bcmpb.Event_RegisterCheckpoint:
		return &Event_RegisterCheckpoint{RegisterCheckpoint: RegisterCheckpointFromPb(pb.RegisterCheckpoint)}
	case *bcmpb.Event_GetChainToHeadRequest:
		return &Event_GetChainToHeadRequest{GetChainToHeadRequest: GetChainToHeadRequestFromPb(pb.GetChainToHeadRequest)}
	case *bcmpb.Event_GetChainToHeadResponse:
		return &Event_GetChainToHeadResponse{GetChainToHeadResponse: GetChainToHeadResponseFromPb(pb.GetChainToHeadResponse)}
	case *bcmpb.Event_InitBlockchain:
		return &Event_InitBlockchain{InitBlockchain: InitBlockchainFromPb(pb.InitBlockchain)}
	}
	return nil
}

type Event_NewBlock struct {
	NewBlock *NewBlock
}

func (*Event_NewBlock) isEvent_Type() {}

func (w *Event_NewBlock) Unwrap() *NewBlock {
	return w.NewBlock
}

func (w *Event_NewBlock) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.NewBlock == nil {
		return &bcmpb.Event_NewBlock{}
	}
	return &bcmpb.Event_NewBlock{NewBlock: (w.NewBlock).Pb()}
}

func (*Event_NewBlock) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_NewBlock]()}
}

type Event_NewChain struct {
	NewChain *NewChain
}

func (*Event_NewChain) isEvent_Type() {}

func (w *Event_NewChain) Unwrap() *NewChain {
	return w.NewChain
}

func (w *Event_NewChain) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.NewChain == nil {
		return &bcmpb.Event_NewChain{}
	}
	return &bcmpb.Event_NewChain{NewChain: (w.NewChain).Pb()}
}

func (*Event_NewChain) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_NewChain]()}
}

type Event_GetChainRequest struct {
	GetChainRequest *GetChainRequest
}

func (*Event_GetChainRequest) isEvent_Type() {}

func (w *Event_GetChainRequest) Unwrap() *GetChainRequest {
	return w.GetChainRequest
}

func (w *Event_GetChainRequest) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.GetChainRequest == nil {
		return &bcmpb.Event_GetChainRequest{}
	}
	return &bcmpb.Event_GetChainRequest{GetChainRequest: (w.GetChainRequest).Pb()}
}

func (*Event_GetChainRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_GetChainRequest]()}
}

type Event_GetChainResponse struct {
	GetChainResponse *GetChainResponse
}

func (*Event_GetChainResponse) isEvent_Type() {}

func (w *Event_GetChainResponse) Unwrap() *GetChainResponse {
	return w.GetChainResponse
}

func (w *Event_GetChainResponse) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.GetChainResponse == nil {
		return &bcmpb.Event_GetChainResponse{}
	}
	return &bcmpb.Event_GetChainResponse{GetChainResponse: (w.GetChainResponse).Pb()}
}

func (*Event_GetChainResponse) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_GetChainResponse]()}
}

type Event_RegisterCheckpoint struct {
	RegisterCheckpoint *RegisterCheckpoint
}

func (*Event_RegisterCheckpoint) isEvent_Type() {}

func (w *Event_RegisterCheckpoint) Unwrap() *RegisterCheckpoint {
	return w.RegisterCheckpoint
}

func (w *Event_RegisterCheckpoint) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.RegisterCheckpoint == nil {
		return &bcmpb.Event_RegisterCheckpoint{}
	}
	return &bcmpb.Event_RegisterCheckpoint{RegisterCheckpoint: (w.RegisterCheckpoint).Pb()}
}

func (*Event_RegisterCheckpoint) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_RegisterCheckpoint]()}
}

type Event_GetChainToHeadRequest struct {
	GetChainToHeadRequest *GetChainToHeadRequest
}

func (*Event_GetChainToHeadRequest) isEvent_Type() {}

func (w *Event_GetChainToHeadRequest) Unwrap() *GetChainToHeadRequest {
	return w.GetChainToHeadRequest
}

func (w *Event_GetChainToHeadRequest) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.GetChainToHeadRequest == nil {
		return &bcmpb.Event_GetChainToHeadRequest{}
	}
	return &bcmpb.Event_GetChainToHeadRequest{GetChainToHeadRequest: (w.GetChainToHeadRequest).Pb()}
}

func (*Event_GetChainToHeadRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_GetChainToHeadRequest]()}
}

type Event_GetChainToHeadResponse struct {
	GetChainToHeadResponse *GetChainToHeadResponse
}

func (*Event_GetChainToHeadResponse) isEvent_Type() {}

func (w *Event_GetChainToHeadResponse) Unwrap() *GetChainToHeadResponse {
	return w.GetChainToHeadResponse
}

func (w *Event_GetChainToHeadResponse) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.GetChainToHeadResponse == nil {
		return &bcmpb.Event_GetChainToHeadResponse{}
	}
	return &bcmpb.Event_GetChainToHeadResponse{GetChainToHeadResponse: (w.GetChainToHeadResponse).Pb()}
}

func (*Event_GetChainToHeadResponse) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_GetChainToHeadResponse]()}
}

type Event_InitBlockchain struct {
	InitBlockchain *InitBlockchain
}

func (*Event_InitBlockchain) isEvent_Type() {}

func (w *Event_InitBlockchain) Unwrap() *InitBlockchain {
	return w.InitBlockchain
}

func (w *Event_InitBlockchain) Pb() bcmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.InitBlockchain == nil {
		return &bcmpb.Event_InitBlockchain{}
	}
	return &bcmpb.Event_InitBlockchain{InitBlockchain: (w.InitBlockchain).Pb()}
}

func (*Event_InitBlockchain) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event_InitBlockchain]()}
}

func EventFromPb(pb *bcmpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *bcmpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.Event]()}
}

type NewBlock struct {
	Block *types.Block
}

func NewBlockFromPb(pb *bcmpb.NewBlock) *NewBlock {
	if pb == nil {
		return nil
	}
	return &NewBlock{
		Block: types.BlockFromPb(pb.Block),
	}
}

func (m *NewBlock) Pb() *bcmpb.NewBlock {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.NewBlock{}
	{
		if m.Block != nil {
			pbMessage.Block = (m.Block).Pb()
		}
	}

	return pbMessage
}

func (*NewBlock) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.NewBlock]()}
}

type NewChain struct {
	Blocks []*types.Block
}

func NewChainFromPb(pb *bcmpb.NewChain) *NewChain {
	if pb == nil {
		return nil
	}
	return &NewChain{
		Blocks: types1.ConvertSlice(pb.Blocks, func(t *blockchainpb.Block) *types.Block {
			return types.BlockFromPb(t)
		}),
	}
}

func (m *NewChain) Pb() *bcmpb.NewChain {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.NewChain{}
	{
		pbMessage.Blocks = types1.ConvertSlice(m.Blocks, func(t *types.Block) *blockchainpb.Block {
			return (t).Pb()
		})
	}

	return pbMessage
}

func (*NewChain) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.NewChain]()}
}

type GetChainRequest struct {
	RequestId      string
	SourceModule   types2.ModuleID
	EndBlockId     uint64
	SourceBlockIds []uint64
}

func GetChainRequestFromPb(pb *bcmpb.GetChainRequest) *GetChainRequest {
	if pb == nil {
		return nil
	}
	return &GetChainRequest{
		RequestId:      pb.RequestId,
		SourceModule:   (types2.ModuleID)(pb.SourceModule),
		EndBlockId:     pb.EndBlockId,
		SourceBlockIds: pb.SourceBlockIds,
	}
}

func (m *GetChainRequest) Pb() *bcmpb.GetChainRequest {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.GetChainRequest{}
	{
		pbMessage.RequestId = m.RequestId
		pbMessage.SourceModule = (string)(m.SourceModule)
		pbMessage.EndBlockId = m.EndBlockId
		pbMessage.SourceBlockIds = m.SourceBlockIds
	}

	return pbMessage
}

func (*GetChainRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.GetChainRequest]()}
}

type GetChainResponse struct {
	RequestId string
	Success   bool
	Chain     []*types.Block
}

func GetChainResponseFromPb(pb *bcmpb.GetChainResponse) *GetChainResponse {
	if pb == nil {
		return nil
	}
	return &GetChainResponse{
		RequestId: pb.RequestId,
		Success:   pb.Success,
		Chain: types1.ConvertSlice(pb.Chain, func(t *blockchainpb.Block) *types.Block {
			return types.BlockFromPb(t)
		}),
	}
}

func (m *GetChainResponse) Pb() *bcmpb.GetChainResponse {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.GetChainResponse{}
	{
		pbMessage.RequestId = m.RequestId
		pbMessage.Success = m.Success
		pbMessage.Chain = types1.ConvertSlice(m.Chain, func(t *types.Block) *blockchainpb.Block {
			return (t).Pb()
		})
	}

	return pbMessage
}

func (*GetChainResponse) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.GetChainResponse]()}
}

type GetChainToHeadRequest struct {
	SourceModule types2.ModuleID
}

func GetChainToHeadRequestFromPb(pb *bcmpb.GetChainToHeadRequest) *GetChainToHeadRequest {
	if pb == nil {
		return nil
	}
	return &GetChainToHeadRequest{
		SourceModule: (types2.ModuleID)(pb.SourceModule),
	}
}

func (m *GetChainToHeadRequest) Pb() *bcmpb.GetChainToHeadRequest {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.GetChainToHeadRequest{}
	{
		pbMessage.SourceModule = (string)(m.SourceModule)
	}

	return pbMessage
}

func (*GetChainToHeadRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.GetChainToHeadRequest]()}
}

type GetChainToHeadResponse struct {
	Chain           []*types.Block
	CheckpointState *types3.State
}

func GetChainToHeadResponseFromPb(pb *bcmpb.GetChainToHeadResponse) *GetChainToHeadResponse {
	if pb == nil {
		return nil
	}
	return &GetChainToHeadResponse{
		Chain: types1.ConvertSlice(pb.Chain, func(t *blockchainpb.Block) *types.Block {
			return types.BlockFromPb(t)
		}),
		CheckpointState: types3.StateFromPb(pb.CheckpointState),
	}
}

func (m *GetChainToHeadResponse) Pb() *bcmpb.GetChainToHeadResponse {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.GetChainToHeadResponse{}
	{
		pbMessage.Chain = types1.ConvertSlice(m.Chain, func(t *types.Block) *blockchainpb.Block {
			return (t).Pb()
		})
		if m.CheckpointState != nil {
			pbMessage.CheckpointState = (m.CheckpointState).Pb()
		}
	}

	return pbMessage
}

func (*GetChainToHeadResponse) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.GetChainToHeadResponse]()}
}

type RegisterCheckpoint struct {
	BlockId uint64
	State   *types3.State
}

func RegisterCheckpointFromPb(pb *bcmpb.RegisterCheckpoint) *RegisterCheckpoint {
	if pb == nil {
		return nil
	}
	return &RegisterCheckpoint{
		BlockId: pb.BlockId,
		State:   types3.StateFromPb(pb.State),
	}
}

func (m *RegisterCheckpoint) Pb() *bcmpb.RegisterCheckpoint {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.RegisterCheckpoint{}
	{
		pbMessage.BlockId = m.BlockId
		if m.State != nil {
			pbMessage.State = (m.State).Pb()
		}
	}

	return pbMessage
}

func (*RegisterCheckpoint) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.RegisterCheckpoint]()}
}

type InitBlockchain struct {
	InitialState *types3.State
}

func InitBlockchainFromPb(pb *bcmpb.InitBlockchain) *InitBlockchain {
	if pb == nil {
		return nil
	}
	return &InitBlockchain{
		InitialState: types3.StateFromPb(pb.InitialState),
	}
}

func (m *InitBlockchain) Pb() *bcmpb.InitBlockchain {
	if m == nil {
		return nil
	}
	pbMessage := &bcmpb.InitBlockchain{}
	{
		if m.InitialState != nil {
			pbMessage.InitialState = (m.InitialState).Pb()
		}
	}

	return pbMessage
}

func (*InitBlockchain) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*bcmpb.InitBlockchain]()}
}
