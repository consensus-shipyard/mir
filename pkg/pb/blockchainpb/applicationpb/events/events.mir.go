// Code generated by Mir codegen. DO NOT EDIT.

package applicationpbevents

import (
	types2 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/applicationpb/types"
	types5 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	types3 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types4 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/eventpb/types"
	types "github.com/filecoin-project/mir/pkg/types"
)

func NewHead(destModule types.ModuleID, headId uint64) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_NewHead{
					NewHead: &types2.NewHead{
						HeadId: headId,
					},
				},
			},
		},
	}
}

func VerifyBlocksRequest(destModule types.ModuleID, checkpointState *types3.State, chainCheckpointToStart []*types4.Block, chainToVerify []*types4.Block) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_VerifyBlockRequest{
					VerifyBlockRequest: &types2.VerifyBlocksRequest{
						CheckpointState:        checkpointState,
						ChainCheckpointToStart: chainCheckpointToStart,
						ChainToVerify:          chainToVerify,
					},
				},
			},
		},
	}
}

func VerifyBlocksResponse(destModule types.ModuleID, verifiedBlocks []*types4.Block) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_VerifyBlockResponse{
					VerifyBlockResponse: &types2.VerifyBlocksResponse{
						VerifiedBlocks: verifiedBlocks,
					},
				},
			},
		},
	}
}

func PayloadRequest(destModule types.ModuleID, headId uint64) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_PayloadRequest{
					PayloadRequest: &types2.PayloadRequest{
						HeadId: headId,
					},
				},
			},
		},
	}
}

func PayloadResponse(destModule types.ModuleID, headId uint64, payload *types5.Payload) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_PayloadResponse{
					PayloadResponse: &types2.PayloadResponse{
						HeadId:  headId,
						Payload: payload,
					},
				},
			},
		},
	}
}

func ForkUpdate(destModule types.ModuleID, removedChain []*types4.Block, addedChain []*types4.Block, checkpointToForkRoot []*types4.Block, checkpointState *types3.State) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_ForkUpdate{
					ForkUpdate: &types2.ForkUpdate{
						RemovedChain:         removedChain,
						AddedChain:           addedChain,
						CheckpointToForkRoot: checkpointToForkRoot,
						CheckpointState:      checkpointState,
					},
				},
			},
		},
	}
}

func MessageInput(destModule types.ModuleID, text string) *types1.Event {
	return &types1.Event{
		DestModule: destModule,
		Type: &types1.Event_Application{
			Application: &types2.Event{
				Type: &types2.Event_MessageInput{
					MessageInput: &types2.MessageInput{
						Text: text,
					},
				},
			},
		},
	}
}
