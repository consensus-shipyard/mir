// Code generated by Mir codegen. DO NOT EDIT.

package applicationpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	events "github.com/filecoin-project/mir/pkg/pb/blockchainpb/applicationpb/events"
	types3 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types2 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	types "github.com/filecoin-project/mir/pkg/types"
)

// Module-specific dsl functions for emitting events.

func NewHead(m dsl.Module, destModule types.ModuleID, headId uint64) {
	dsl.EmitMirEvent(m, events.NewHead(destModule, headId))
}

func VerifyBlocksRequest(m dsl.Module, destModule types.ModuleID, checkpointState *types1.State, chainCheckpointToStart []*types2.Block, chainToVerify []*types2.Block) {
	dsl.EmitMirEvent(m, events.VerifyBlocksRequest(destModule, checkpointState, chainCheckpointToStart, chainToVerify))
}

func VerifyBlocksResponse(m dsl.Module, destModule types.ModuleID, verifiedBlocks []*types2.Block) {
	dsl.EmitMirEvent(m, events.VerifyBlocksResponse(destModule, verifiedBlocks))
}

func PayloadRequest(m dsl.Module, destModule types.ModuleID, headId uint64) {
	dsl.EmitMirEvent(m, events.PayloadRequest(destModule, headId))
}

func PayloadResponse(m dsl.Module, destModule types.ModuleID, headId uint64, payload *types3.Payload) {
	dsl.EmitMirEvent(m, events.PayloadResponse(destModule, headId, payload))
}

func ForkUpdate(m dsl.Module, destModule types.ModuleID, removedChain *types2.Blockchain, addedChain *types2.Blockchain, checkpointToForkRoot *types2.Blockchain, checkpointState *types1.State) {
	dsl.EmitMirEvent(m, events.ForkUpdate(destModule, removedChain, addedChain, checkpointToForkRoot, checkpointState))
}

func MessageInput(m dsl.Module, destModule types.ModuleID, text string) {
	dsl.EmitMirEvent(m, events.MessageInput(destModule, text))
}
