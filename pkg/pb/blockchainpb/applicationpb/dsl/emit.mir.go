// Code generated by Mir codegen. DO NOT EDIT.

package applicationpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	events "github.com/filecoin-project/mir/pkg/pb/blockchainpb/applicationpb/events"
	types2 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	types3 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	types "github.com/filecoin-project/mir/pkg/types"
)

// Module-specific dsl functions for emitting events.

func NewHead(m dsl.Module, destModule types.ModuleID, headId uint64) {
	dsl.EmitMirEvent(m, events.NewHead(destModule, headId))
}

func VerifyBlockRequest(m dsl.Module, destModule types.ModuleID, requestId uint64, block *types1.Block) {
	dsl.EmitMirEvent(m, events.VerifyBlockRequest(destModule, requestId, block))
}

func VerifyBlockResponse(m dsl.Module, destModule types.ModuleID, requestId uint64, ok bool) {
	dsl.EmitMirEvent(m, events.VerifyBlockResponse(destModule, requestId, ok))
}

func PayloadRequest(m dsl.Module, destModule types.ModuleID, headId uint64) {
	dsl.EmitMirEvent(m, events.PayloadRequest(destModule, headId))
}

func PayloadResponse(m dsl.Module, destModule types.ModuleID, headId uint64, payload *types2.Payload) {
	dsl.EmitMirEvent(m, events.PayloadResponse(destModule, headId, payload))
}

func ForkUpdate(m dsl.Module, destModule types.ModuleID, removedChain *types1.Blockchain, addedChain *types1.Blockchain, forkState *types3.State) {
	dsl.EmitMirEvent(m, events.ForkUpdate(destModule, removedChain, addedChain, forkState))
}

func MessageInput(m dsl.Module, destModule types.ModuleID, text string) {
	dsl.EmitMirEvent(m, events.MessageInput(destModule, text))
}
