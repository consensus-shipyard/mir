// Code generated by Mir codegen. DO NOT EDIT.

package statepbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	types1 "github.com/filecoin-project/mir/codegen/model/types"
	payloadpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	statepb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb"
	types2 "github.com/filecoin-project/mir/pkg/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type State struct {
	History            []*types.Payload
	LastSentTimestamps []*LastSentTimestamp
}

func StateFromPb(pb *statepb.State) *State {
	if pb == nil {
		return nil
	}
	return &State{
		History: types1.ConvertSlice(pb.History, func(t *payloadpb.Payload) *types.Payload {
			return types.PayloadFromPb(t)
		}),
		LastSentTimestamps: types1.ConvertSlice(pb.LastSentTimestamps, func(t *statepb.LastSentTimestamp) *LastSentTimestamp {
			return LastSentTimestampFromPb(t)
		}),
	}
}

func (m *State) Pb() *statepb.State {
	if m == nil {
		return nil
	}
	pbMessage := &statepb.State{}
	{
		pbMessage.History = types1.ConvertSlice(m.History, func(t *types.Payload) *payloadpb.Payload {
			return (t).Pb()
		})
		pbMessage.LastSentTimestamps = types1.ConvertSlice(m.LastSentTimestamps, func(t *LastSentTimestamp) *statepb.LastSentTimestamp {
			return (t).Pb()
		})
	}

	return pbMessage
}

func (*State) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*statepb.State]()}
}

type LastSentTimestamp struct {
	NodeId    types2.NodeID
	Timestamp *timestamppb.Timestamp
}

func LastSentTimestampFromPb(pb *statepb.LastSentTimestamp) *LastSentTimestamp {
	if pb == nil {
		return nil
	}
	return &LastSentTimestamp{
		NodeId:    (types2.NodeID)(pb.NodeId),
		Timestamp: pb.Timestamp,
	}
}

func (m *LastSentTimestamp) Pb() *statepb.LastSentTimestamp {
	if m == nil {
		return nil
	}
	pbMessage := &statepb.LastSentTimestamp{}
	{
		pbMessage.NodeId = (string)(m.NodeId)
		if m.Timestamp != nil {
			pbMessage.Timestamp = m.Timestamp
		}
	}

	return pbMessage
}

func (*LastSentTimestamp) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*statepb.LastSentTimestamp]()}
}
