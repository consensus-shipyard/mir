// Code generated by Mir codegen. DO NOT EDIT.

package minerpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	minerpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/minerpb"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() minerpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb minerpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *minerpb.Event_BlockRequest:
		return &Event_BlockRequest{BlockRequest: BlockRequestFromPb(pb.BlockRequest)}
	case *minerpb.Event_NewHead:
		return &Event_NewHead{NewHead: NewHeadFromPb(pb.NewHead)}
	}
	return nil
}

type Event_BlockRequest struct {
	BlockRequest *BlockRequest
}

func (*Event_BlockRequest) isEvent_Type() {}

func (w *Event_BlockRequest) Unwrap() *BlockRequest {
	return w.BlockRequest
}

func (w *Event_BlockRequest) Pb() minerpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.BlockRequest == nil {
		return &minerpb.Event_BlockRequest{}
	}
	return &minerpb.Event_BlockRequest{BlockRequest: (w.BlockRequest).Pb()}
}

func (*Event_BlockRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*minerpb.Event_BlockRequest]()}
}

type Event_NewHead struct {
	NewHead *NewHead
}

func (*Event_NewHead) isEvent_Type() {}

func (w *Event_NewHead) Unwrap() *NewHead {
	return w.NewHead
}

func (w *Event_NewHead) Pb() minerpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.NewHead == nil {
		return &minerpb.Event_NewHead{}
	}
	return &minerpb.Event_NewHead{NewHead: (w.NewHead).Pb()}
}

func (*Event_NewHead) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*minerpb.Event_NewHead]()}
}

func EventFromPb(pb *minerpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *minerpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &minerpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*minerpb.Event]()}
}

type BlockRequest struct {
	HeadId  uint64
	Payload *types.Payload
}

func BlockRequestFromPb(pb *minerpb.BlockRequest) *BlockRequest {
	if pb == nil {
		return nil
	}
	return &BlockRequest{
		HeadId:  pb.HeadId,
		Payload: types.PayloadFromPb(pb.Payload),
	}
}

func (m *BlockRequest) Pb() *minerpb.BlockRequest {
	if m == nil {
		return nil
	}
	pbMessage := &minerpb.BlockRequest{}
	{
		pbMessage.HeadId = m.HeadId
		if m.Payload != nil {
			pbMessage.Payload = (m.Payload).Pb()
		}
	}

	return pbMessage
}

func (*BlockRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*minerpb.BlockRequest]()}
}

type NewHead struct {
	HeadId uint64
}

func NewHeadFromPb(pb *minerpb.NewHead) *NewHead {
	if pb == nil {
		return nil
	}
	return &NewHead{
		HeadId: pb.HeadId,
	}
}

func (m *NewHead) Pb() *minerpb.NewHead {
	if m == nil {
		return nil
	}
	pbMessage := &minerpb.NewHead{}
	{
		pbMessage.HeadId = m.HeadId
	}

	return pbMessage
}

func (*NewHead) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*minerpb.NewHead]()}
}
