// Code generated by Mir codegen. DO NOT EDIT.

package synchronizerpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	blockchainpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb"
	synchronizerpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/synchronizerpb"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() synchronizerpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb synchronizerpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *synchronizerpb.Event_SyncRequest:
		return &Event_SyncRequest{SyncRequest: SyncRequestFromPb(pb.SyncRequest)}
	}
	return nil
}

type Event_SyncRequest struct {
	SyncRequest *SyncRequest
}

func (*Event_SyncRequest) isEvent_Type() {}

func (w *Event_SyncRequest) Unwrap() *SyncRequest {
	return w.SyncRequest
}

func (w *Event_SyncRequest) Pb() synchronizerpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.SyncRequest == nil {
		return &synchronizerpb.Event_SyncRequest{}
	}
	return &synchronizerpb.Event_SyncRequest{SyncRequest: (w.SyncRequest).Pb()}
}

func (*Event_SyncRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.Event_SyncRequest]()}
}

func EventFromPb(pb *synchronizerpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *synchronizerpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &synchronizerpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.Event]()}
}

type SyncRequest struct {
	OrphanBlockId uint64
	LeaveIds      uint64
}

func SyncRequestFromPb(pb *synchronizerpb.SyncRequest) *SyncRequest {
	if pb == nil {
		return nil
	}
	return &SyncRequest{
		OrphanBlockId: pb.OrphanBlockId,
		LeaveIds:      pb.LeaveIds,
	}
}

func (m *SyncRequest) Pb() *synchronizerpb.SyncRequest {
	if m == nil {
		return nil
	}
	pbMessage := &synchronizerpb.SyncRequest{}
	{
		pbMessage.OrphanBlockId = m.OrphanBlockId
		pbMessage.LeaveIds = m.LeaveIds
	}

	return pbMessage
}

func (*SyncRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.SyncRequest]()}
}

type Message struct {
	Type Message_Type
}

type Message_Type interface {
	mirreflect.GeneratedType
	isMessage_Type()
	Pb() synchronizerpb.Message_Type
}

type Message_TypeWrapper[T any] interface {
	Message_Type
	Unwrap() *T
}

func Message_TypeFromPb(pb synchronizerpb.Message_Type) Message_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *synchronizerpb.Message_BlockRequest:
		return &Message_BlockRequest{BlockRequest: BlockRequestFromPb(pb.BlockRequest)}
	case *synchronizerpb.Message_BlockResponse:
		return &Message_BlockResponse{BlockResponse: BlockResponseFromPb(pb.BlockResponse)}
	}
	return nil
}

type Message_BlockRequest struct {
	BlockRequest *BlockRequest
}

func (*Message_BlockRequest) isMessage_Type() {}

func (w *Message_BlockRequest) Unwrap() *BlockRequest {
	return w.BlockRequest
}

func (w *Message_BlockRequest) Pb() synchronizerpb.Message_Type {
	if w == nil {
		return nil
	}
	if w.BlockRequest == nil {
		return &synchronizerpb.Message_BlockRequest{}
	}
	return &synchronizerpb.Message_BlockRequest{BlockRequest: (w.BlockRequest).Pb()}
}

func (*Message_BlockRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.Message_BlockRequest]()}
}

type Message_BlockResponse struct {
	BlockResponse *BlockResponse
}

func (*Message_BlockResponse) isMessage_Type() {}

func (w *Message_BlockResponse) Unwrap() *BlockResponse {
	return w.BlockResponse
}

func (w *Message_BlockResponse) Pb() synchronizerpb.Message_Type {
	if w == nil {
		return nil
	}
	if w.BlockResponse == nil {
		return &synchronizerpb.Message_BlockResponse{}
	}
	return &synchronizerpb.Message_BlockResponse{BlockResponse: (w.BlockResponse).Pb()}
}

func (*Message_BlockResponse) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.Message_BlockResponse]()}
}

func MessageFromPb(pb *synchronizerpb.Message) *Message {
	if pb == nil {
		return nil
	}
	return &Message{
		Type: Message_TypeFromPb(pb.Type),
	}
}

func (m *Message) Pb() *synchronizerpb.Message {
	if m == nil {
		return nil
	}
	pbMessage := &synchronizerpb.Message{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Message) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.Message]()}
}

type BlockRequest struct {
	RequestId uint64
	BlockId   uint64
}

func BlockRequestFromPb(pb *synchronizerpb.BlockRequest) *BlockRequest {
	if pb == nil {
		return nil
	}
	return &BlockRequest{
		RequestId: pb.RequestId,
		BlockId:   pb.BlockId,
	}
}

func (m *BlockRequest) Pb() *synchronizerpb.BlockRequest {
	if m == nil {
		return nil
	}
	pbMessage := &synchronizerpb.BlockRequest{}
	{
		pbMessage.RequestId = m.RequestId
		pbMessage.BlockId = m.BlockId
	}

	return pbMessage
}

func (*BlockRequest) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.BlockRequest]()}
}

type BlockResponse struct {
	RequestId uint64
	Found     bool
	Block     *blockchainpb.Block
}

func BlockResponseFromPb(pb *synchronizerpb.BlockResponse) *BlockResponse {
	if pb == nil {
		return nil
	}
	return &BlockResponse{
		RequestId: pb.RequestId,
		Found:     pb.Found,
		Block:     pb.Block,
	}
}

func (m *BlockResponse) Pb() *synchronizerpb.BlockResponse {
	if m == nil {
		return nil
	}
	pbMessage := &synchronizerpb.BlockResponse{}
	{
		pbMessage.RequestId = m.RequestId
		pbMessage.Found = m.Found
		if m.Block != nil {
			pbMessage.Block = m.Block
		}
	}

	return pbMessage
}

func (*BlockResponse) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*synchronizerpb.BlockResponse]()}
}
