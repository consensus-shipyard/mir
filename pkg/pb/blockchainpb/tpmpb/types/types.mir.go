// Code generated by Mir codegen. DO NOT EDIT.

package tpmpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	tpmpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/tpmpb"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() tpmpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb tpmpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *tpmpb.Event_NewHead:
		return &Event_NewHead{NewHead: NewHeadFromPb(pb.NewHead)}
	}
	return nil
}

type Event_NewHead struct {
	NewHead *NewHead
}

func (*Event_NewHead) isEvent_Type() {}

func (w *Event_NewHead) Unwrap() *NewHead {
	return w.NewHead
}

func (w *Event_NewHead) Pb() tpmpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.NewHead == nil {
		return &tpmpb.Event_NewHead{}
	}
	return &tpmpb.Event_NewHead{NewHead: (w.NewHead).Pb()}
}

func (*Event_NewHead) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*tpmpb.Event_NewHead]()}
}

func EventFromPb(pb *tpmpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *tpmpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &tpmpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*tpmpb.Event]()}
}

type NewHead struct {
	HeadId uint64
}

func NewHeadFromPb(pb *tpmpb.NewHead) *NewHead {
	if pb == nil {
		return nil
	}
	return &NewHead{
		HeadId: pb.HeadId,
	}
}

func (m *NewHead) Pb() *tpmpb.NewHead {
	if m == nil {
		return nil
	}
	pbMessage := &tpmpb.NewHead{}
	{
		pbMessage.HeadId = m.HeadId
	}

	return pbMessage
}

func (*NewHead) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*tpmpb.NewHead]()}
}
