// Code generated by Mir codegen. DO NOT EDIT.

package interceptorpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	blockchainpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb"
	interceptorpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/interceptorpb"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() interceptorpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb interceptorpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *interceptorpb.Event_TreeUpdate:
		return &Event_TreeUpdate{TreeUpdate: TreeUpdateFromPb(pb.TreeUpdate)}
	case *interceptorpb.Event_NewOrphan:
		return &Event_NewOrphan{NewOrphan: NewOrphanFromPb(pb.NewOrphan)}
	case *interceptorpb.Event_AppUpdate:
		return &Event_AppUpdate{AppUpdate: AppUpdateFromPb(pb.AppUpdate)}
	}
	return nil
}

type Event_TreeUpdate struct {
	TreeUpdate *TreeUpdate
}

func (*Event_TreeUpdate) isEvent_Type() {}

func (w *Event_TreeUpdate) Unwrap() *TreeUpdate {
	return w.TreeUpdate
}

func (w *Event_TreeUpdate) Pb() interceptorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.TreeUpdate == nil {
		return &interceptorpb.Event_TreeUpdate{}
	}
	return &interceptorpb.Event_TreeUpdate{TreeUpdate: (w.TreeUpdate).Pb()}
}

func (*Event_TreeUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event_TreeUpdate]()}
}

type Event_NewOrphan struct {
	NewOrphan *NewOrphan
}

func (*Event_NewOrphan) isEvent_Type() {}

func (w *Event_NewOrphan) Unwrap() *NewOrphan {
	return w.NewOrphan
}

func (w *Event_NewOrphan) Pb() interceptorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.NewOrphan == nil {
		return &interceptorpb.Event_NewOrphan{}
	}
	return &interceptorpb.Event_NewOrphan{NewOrphan: (w.NewOrphan).Pb()}
}

func (*Event_NewOrphan) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event_NewOrphan]()}
}

type Event_AppUpdate struct {
	AppUpdate *AppUpdate
}

func (*Event_AppUpdate) isEvent_Type() {}

func (w *Event_AppUpdate) Unwrap() *AppUpdate {
	return w.AppUpdate
}

func (w *Event_AppUpdate) Pb() interceptorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.AppUpdate == nil {
		return &interceptorpb.Event_AppUpdate{}
	}
	return &interceptorpb.Event_AppUpdate{AppUpdate: (w.AppUpdate).Pb()}
}

func (*Event_AppUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event_AppUpdate]()}
}

func EventFromPb(pb *interceptorpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *interceptorpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event]()}
}

type TreeUpdate struct {
	Tree   *blockchainpb.Blocktree
	HeadId uint64
}

func TreeUpdateFromPb(pb *interceptorpb.TreeUpdate) *TreeUpdate {
	if pb == nil {
		return nil
	}
	return &TreeUpdate{
		Tree:   pb.Tree,
		HeadId: pb.HeadId,
	}
}

func (m *TreeUpdate) Pb() *interceptorpb.TreeUpdate {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.TreeUpdate{}
	{
		if m.Tree != nil {
			pbMessage.Tree = m.Tree
		}
		pbMessage.HeadId = m.HeadId
	}

	return pbMessage
}

func (*TreeUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.TreeUpdate]()}
}

type NewOrphan struct {
	Orphan *blockchainpb.Block
}

func NewOrphanFromPb(pb *interceptorpb.NewOrphan) *NewOrphan {
	if pb == nil {
		return nil
	}
	return &NewOrphan{
		Orphan: pb.Orphan,
	}
}

func (m *NewOrphan) Pb() *interceptorpb.NewOrphan {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.NewOrphan{}
	{
		if m.Orphan != nil {
			pbMessage.Orphan = m.Orphan
		}
	}

	return pbMessage
}

func (*NewOrphan) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.NewOrphan]()}
}

type AppUpdate struct {
	State int64
}

func AppUpdateFromPb(pb *interceptorpb.AppUpdate) *AppUpdate {
	if pb == nil {
		return nil
	}
	return &AppUpdate{
		State: pb.State,
	}
}

func (m *AppUpdate) Pb() *interceptorpb.AppUpdate {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.AppUpdate{}
	{
		pbMessage.State = m.State
	}

	return pbMessage
}

func (*AppUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.AppUpdate]()}
}
