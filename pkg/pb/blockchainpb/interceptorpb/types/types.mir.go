// Code generated by Mir codegen. DO NOT EDIT.

package interceptorpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	types1 "github.com/filecoin-project/mir/codegen/model/types"
	blockchainpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb"
	interceptorpb "github.com/filecoin-project/mir/pkg/pb/blockchainpb/interceptorpb"
	types2 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() interceptorpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb interceptorpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *interceptorpb.Event_TreeUpdate:
		return &Event_TreeUpdate{TreeUpdate: TreeUpdateFromPb(pb.TreeUpdate)}
	case *interceptorpb.Event_StateUpdate:
		return &Event_StateUpdate{StateUpdate: StateUpdateFromPb(pb.StateUpdate)}
	}
	return nil
}

type Event_TreeUpdate struct {
	TreeUpdate *TreeUpdate
}

func (*Event_TreeUpdate) isEvent_Type() {}

func (w *Event_TreeUpdate) Unwrap() *TreeUpdate {
	return w.TreeUpdate
}

func (w *Event_TreeUpdate) Pb() interceptorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.TreeUpdate == nil {
		return &interceptorpb.Event_TreeUpdate{}
	}
	return &interceptorpb.Event_TreeUpdate{TreeUpdate: (w.TreeUpdate).Pb()}
}

func (*Event_TreeUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event_TreeUpdate]()}
}

type Event_StateUpdate struct {
	StateUpdate *StateUpdate
}

func (*Event_StateUpdate) isEvent_Type() {}

func (w *Event_StateUpdate) Unwrap() *StateUpdate {
	return w.StateUpdate
}

func (w *Event_StateUpdate) Pb() interceptorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.StateUpdate == nil {
		return &interceptorpb.Event_StateUpdate{}
	}
	return &interceptorpb.Event_StateUpdate{StateUpdate: (w.StateUpdate).Pb()}
}

func (*Event_StateUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event_StateUpdate]()}
}

func EventFromPb(pb *interceptorpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *interceptorpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.Event]()}
}

type TreeUpdate struct {
	Blocks []*types.Block
	HeadId uint64
}

func TreeUpdateFromPb(pb *interceptorpb.TreeUpdate) *TreeUpdate {
	if pb == nil {
		return nil
	}
	return &TreeUpdate{
		Blocks: types1.ConvertSlice(pb.Blocks, func(t *blockchainpb.Block) *types.Block {
			return types.BlockFromPb(t)
		}),
		HeadId: pb.HeadId,
	}
}

func (m *TreeUpdate) Pb() *interceptorpb.TreeUpdate {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.TreeUpdate{}
	{
		pbMessage.Blocks = types1.ConvertSlice(m.Blocks, func(t *types.Block) *blockchainpb.Block {
			return (t).Pb()
		})
		pbMessage.HeadId = m.HeadId
	}

	return pbMessage
}

func (*TreeUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.TreeUpdate]()}
}

type StateUpdate struct {
	State *types2.State
}

func StateUpdateFromPb(pb *interceptorpb.StateUpdate) *StateUpdate {
	if pb == nil {
		return nil
	}
	return &StateUpdate{
		State: types2.StateFromPb(pb.State),
	}
}

func (m *StateUpdate) Pb() *interceptorpb.StateUpdate {
	if m == nil {
		return nil
	}
	pbMessage := &interceptorpb.StateUpdate{}
	{
		if m.State != nil {
			pbMessage.State = (m.State).Pb()
		}
	}

	return pbMessage
}

func (*StateUpdate) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*interceptorpb.StateUpdate]()}
}
