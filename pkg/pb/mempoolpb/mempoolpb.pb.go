// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mempoolpb/mempoolpb.proto

package mempoolpb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	contextstorepb "github.com/filecoin-project/mir/pkg/pb/contextstorepb"
	dslpb "github.com/filecoin-project/mir/pkg/pb/dslpb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Event_RequestBatch
	//	*Event_NewBatch
	//	*Event_RequestTransactions
	//	*Event_TransactionsResponse
	//	*Event_RequestTransactionIds
	//	*Event_TransactionIdsResponse
	//	*Event_RequestBatchId
	//	*Event_BatchIdResponse
	Type isEvent_Type `protobuf_oneof:"Type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetRequestBatch() *RequestBatch {
	if x, ok := x.GetType().(*Event_RequestBatch); ok {
		return x.RequestBatch
	}
	return nil
}

func (x *Event) GetNewBatch() *NewBatch {
	if x, ok := x.GetType().(*Event_NewBatch); ok {
		return x.NewBatch
	}
	return nil
}

func (x *Event) GetRequestTransactions() *RequestTransactions {
	if x, ok := x.GetType().(*Event_RequestTransactions); ok {
		return x.RequestTransactions
	}
	return nil
}

func (x *Event) GetTransactionsResponse() *TransactionsResponse {
	if x, ok := x.GetType().(*Event_TransactionsResponse); ok {
		return x.TransactionsResponse
	}
	return nil
}

func (x *Event) GetRequestTransactionIds() *RequestTransactionIDs {
	if x, ok := x.GetType().(*Event_RequestTransactionIds); ok {
		return x.RequestTransactionIds
	}
	return nil
}

func (x *Event) GetTransactionIdsResponse() *TransactionIDsResponse {
	if x, ok := x.GetType().(*Event_TransactionIdsResponse); ok {
		return x.TransactionIdsResponse
	}
	return nil
}

func (x *Event) GetRequestBatchId() *RequestBatchID {
	if x, ok := x.GetType().(*Event_RequestBatchId); ok {
		return x.RequestBatchId
	}
	return nil
}

func (x *Event) GetBatchIdResponse() *BatchIDResponse {
	if x, ok := x.GetType().(*Event_BatchIdResponse); ok {
		return x.BatchIdResponse
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_RequestBatch struct {
	RequestBatch *RequestBatch `protobuf:"bytes,1,opt,name=request_batch,json=requestBatch,proto3,oneof"`
}

type Event_NewBatch struct {
	NewBatch *NewBatch `protobuf:"bytes,2,opt,name=new_batch,json=newBatch,proto3,oneof"`
}

type Event_RequestTransactions struct {
	RequestTransactions *RequestTransactions `protobuf:"bytes,3,opt,name=request_transactions,json=requestTransactions,proto3,oneof"`
}

type Event_TransactionsResponse struct {
	TransactionsResponse *TransactionsResponse `protobuf:"bytes,4,opt,name=transactions_response,json=transactionsResponse,proto3,oneof"`
}

type Event_RequestTransactionIds struct {
	RequestTransactionIds *RequestTransactionIDs `protobuf:"bytes,5,opt,name=request_transaction_ids,json=requestTransactionIds,proto3,oneof"`
}

type Event_TransactionIdsResponse struct {
	TransactionIdsResponse *TransactionIDsResponse `protobuf:"bytes,6,opt,name=transaction_ids_response,json=transactionIdsResponse,proto3,oneof"`
}

type Event_RequestBatchId struct {
	RequestBatchId *RequestBatchID `protobuf:"bytes,7,opt,name=request_batch_id,json=requestBatchId,proto3,oneof"`
}

type Event_BatchIdResponse struct {
	BatchIdResponse *BatchIDResponse `protobuf:"bytes,8,opt,name=batch_id_response,json=batchIdResponse,proto3,oneof"`
}

func (*Event_RequestBatch) isEvent_Type() {}

func (*Event_NewBatch) isEvent_Type() {}

func (*Event_RequestTransactions) isEvent_Type() {}

func (*Event_TransactionsResponse) isEvent_Type() {}

func (*Event_RequestTransactionIds) isEvent_Type() {}

func (*Event_TransactionIdsResponse) isEvent_Type() {}

func (*Event_RequestBatchId) isEvent_Type() {}

func (*Event_BatchIdResponse) isEvent_Type() {}

// RequestBatch is used by the availability layer to request a new batch of transactions from the mempool.
type RequestBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *RequestBatchOrigin `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestBatch) Reset() {
	*x = RequestBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatch) ProtoMessage() {}

func (x *RequestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatch.ProtoReflect.Descriptor instead.
func (*RequestBatch) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{1}
}

func (x *RequestBatch) GetOrigin() *RequestBatchOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// NewBatch is a response to a RequestBatch event.
type NewBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds  [][]byte             `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
	Txs    []*requestpb.Request `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	Origin *RequestBatchOrigin  `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *NewBatch) Reset() {
	*x = NewBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBatch) ProtoMessage() {}

func (x *NewBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBatch.ProtoReflect.Descriptor instead.
func (*NewBatch) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{2}
}

func (x *NewBatch) GetTxIds() [][]byte {
	if x != nil {
		return x.TxIds
	}
	return nil
}

func (x *NewBatch) GetTxs() []*requestpb.Request {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *NewBatch) GetOrigin() *RequestBatchOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// RequestTransactions allows the availability layer to request transactions from the mempool by their IDs.
// It is possible that some of these transactions are not present in the mempool.
type RequestTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds  [][]byte                   `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
	Origin *RequestTransactionsOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestTransactions) Reset() {
	*x = RequestTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransactions) ProtoMessage() {}

func (x *RequestTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransactions.ProtoReflect.Descriptor instead.
func (*RequestTransactions) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{3}
}

func (x *RequestTransactions) GetTxIds() [][]byte {
	if x != nil {
		return x.TxIds
	}
	return nil
}

func (x *RequestTransactions) GetOrigin() *RequestTransactionsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// TransactionsResponse is a response to a RequestTransactions event.
type TransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Present []bool                     `protobuf:"varint,1,rep,packed,name=present,proto3" json:"present,omitempty"`
	Txs     []*requestpb.Request       `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	Origin  *RequestTransactionsOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *TransactionsResponse) Reset() {
	*x = TransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResponse) ProtoMessage() {}

func (x *TransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResponse.ProtoReflect.Descriptor instead.
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionsResponse) GetPresent() []bool {
	if x != nil {
		return x.Present
	}
	return nil
}

func (x *TransactionsResponse) GetTxs() []*requestpb.Request {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *TransactionsResponse) GetOrigin() *RequestTransactionsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// RequestTransactionIDs allows other modules to request the mempool module to compute IDs for the given transactions.
// It is possible that some of these transactions are not present in the mempool.
type RequestTransactionIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs    []*requestpb.Request         `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	Origin *RequestTransactionIDsOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestTransactionIDs) Reset() {
	*x = RequestTransactionIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransactionIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransactionIDs) ProtoMessage() {}

func (x *RequestTransactionIDs) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransactionIDs.ProtoReflect.Descriptor instead.
func (*RequestTransactionIDs) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{5}
}

func (x *RequestTransactionIDs) GetTxs() []*requestpb.Request {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *RequestTransactionIDs) GetOrigin() *RequestTransactionIDsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// TransactionIDsResponse is a response to a RequestTransactionIDs event.
type TransactionIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds  [][]byte                     `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
	Origin *RequestTransactionIDsOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *TransactionIDsResponse) Reset() {
	*x = TransactionIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionIDsResponse) ProtoMessage() {}

func (x *TransactionIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionIDsResponse.ProtoReflect.Descriptor instead.
func (*TransactionIDsResponse) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionIDsResponse) GetTxIds() [][]byte {
	if x != nil {
		return x.TxIds
	}
	return nil
}

func (x *TransactionIDsResponse) GetOrigin() *RequestTransactionIDsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// RequestBatchID allows other modules to request the mempool module to compute the ID of a batch.
// It is possible that some transactions in the batch are not present in the mempool.
type RequestBatchID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds  [][]byte              `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
	Origin *RequestBatchIDOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestBatchID) Reset() {
	*x = RequestBatchID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatchID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatchID) ProtoMessage() {}

func (x *RequestBatchID) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatchID.ProtoReflect.Descriptor instead.
func (*RequestBatchID) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{7}
}

func (x *RequestBatchID) GetTxIds() [][]byte {
	if x != nil {
		return x.TxIds
	}
	return nil
}

func (x *RequestBatchID) GetOrigin() *RequestBatchIDOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// BatchIDResponse is a response to a RequestBatchID event.
type BatchIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId []byte                `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Origin  *RequestBatchIDOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *BatchIDResponse) Reset() {
	*x = BatchIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIDResponse) ProtoMessage() {}

func (x *BatchIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIDResponse.ProtoReflect.Descriptor instead.
func (*BatchIDResponse) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{8}
}

func (x *BatchIDResponse) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *BatchIDResponse) GetOrigin() *RequestBatchIDOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type RequestBatchOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestBatchOrigin_ContextStore
	//	*RequestBatchOrigin_Dsl
	Type isRequestBatchOrigin_Type `protobuf_oneof:"Type"`
}

func (x *RequestBatchOrigin) Reset() {
	*x = RequestBatchOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatchOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatchOrigin) ProtoMessage() {}

func (x *RequestBatchOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatchOrigin.ProtoReflect.Descriptor instead.
func (*RequestBatchOrigin) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{9}
}

func (x *RequestBatchOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestBatchOrigin) GetType() isRequestBatchOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestBatchOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestBatchOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestBatchOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestBatchOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestBatchOrigin_Type interface {
	isRequestBatchOrigin_Type()
}

type RequestBatchOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestBatchOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestBatchOrigin_ContextStore) isRequestBatchOrigin_Type() {}

func (*RequestBatchOrigin_Dsl) isRequestBatchOrigin_Type() {}

type RequestTransactionsOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestTransactionsOrigin_ContextStore
	//	*RequestTransactionsOrigin_Dsl
	Type isRequestTransactionsOrigin_Type `protobuf_oneof:"Type"`
}

func (x *RequestTransactionsOrigin) Reset() {
	*x = RequestTransactionsOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransactionsOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransactionsOrigin) ProtoMessage() {}

func (x *RequestTransactionsOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransactionsOrigin.ProtoReflect.Descriptor instead.
func (*RequestTransactionsOrigin) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{10}
}

func (x *RequestTransactionsOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestTransactionsOrigin) GetType() isRequestTransactionsOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestTransactionsOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestTransactionsOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestTransactionsOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestTransactionsOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestTransactionsOrigin_Type interface {
	isRequestTransactionsOrigin_Type()
}

type RequestTransactionsOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestTransactionsOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestTransactionsOrigin_ContextStore) isRequestTransactionsOrigin_Type() {}

func (*RequestTransactionsOrigin_Dsl) isRequestTransactionsOrigin_Type() {}

type RequestTransactionIDsOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestTransactionIDsOrigin_ContextStore
	//	*RequestTransactionIDsOrigin_Dsl
	Type isRequestTransactionIDsOrigin_Type `protobuf_oneof:"Type"`
}

func (x *RequestTransactionIDsOrigin) Reset() {
	*x = RequestTransactionIDsOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransactionIDsOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransactionIDsOrigin) ProtoMessage() {}

func (x *RequestTransactionIDsOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransactionIDsOrigin.ProtoReflect.Descriptor instead.
func (*RequestTransactionIDsOrigin) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{11}
}

func (x *RequestTransactionIDsOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestTransactionIDsOrigin) GetType() isRequestTransactionIDsOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestTransactionIDsOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestTransactionIDsOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestTransactionIDsOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestTransactionIDsOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestTransactionIDsOrigin_Type interface {
	isRequestTransactionIDsOrigin_Type()
}

type RequestTransactionIDsOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestTransactionIDsOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestTransactionIDsOrigin_ContextStore) isRequestTransactionIDsOrigin_Type() {}

func (*RequestTransactionIDsOrigin_Dsl) isRequestTransactionIDsOrigin_Type() {}

type RequestBatchIDOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestBatchIDOrigin_ContextStore
	//	*RequestBatchIDOrigin_Dsl
	Type isRequestBatchIDOrigin_Type `protobuf_oneof:"Type"`
}

func (x *RequestBatchIDOrigin) Reset() {
	*x = RequestBatchIDOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempoolpb_mempoolpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatchIDOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatchIDOrigin) ProtoMessage() {}

func (x *RequestBatchIDOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_mempoolpb_mempoolpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatchIDOrigin.ProtoReflect.Descriptor instead.
func (*RequestBatchIDOrigin) Descriptor() ([]byte, []int) {
	return file_mempoolpb_mempoolpb_proto_rawDescGZIP(), []int{12}
}

func (x *RequestBatchIDOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestBatchIDOrigin) GetType() isRequestBatchIDOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestBatchIDOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestBatchIDOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestBatchIDOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestBatchIDOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestBatchIDOrigin_Type interface {
	isRequestBatchIDOrigin_Type()
}

type RequestBatchIDOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestBatchIDOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestBatchIDOrigin_ContextStore) isRequestBatchIDOrigin_Type() {}

func (*RequestBatchIDOrigin_Dsl) isRequestBatchIDOrigin_Type() {}

var File_mempoolpb_mempoolpb_proto protoreflect.FileDescriptor

var file_mempoolpb_mempoolpb_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x1a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x73, 0x6c,
	0x70, 0x62, 0x2f, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6d, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x5d,
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x04,
	0x90, 0xa6, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xa6,
	0x1d, 0x01, 0x22, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a,
	0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x78, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12,
	0x3b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04,
	0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6,
	0x1d, 0x01, 0x22, 0x76, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73,
	0x12, 0x42, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03,
	0x74, 0x78, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x89, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x44, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x7b, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x6c, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04,
	0x98, 0xa6, 0x1d, 0x01, 0x22, 0x71, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c,
	0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6,
	0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64,
	0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04,
	0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6,
	0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64,
	0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04,
	0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f,
	0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mempoolpb_mempoolpb_proto_rawDescOnce sync.Once
	file_mempoolpb_mempoolpb_proto_rawDescData = file_mempoolpb_mempoolpb_proto_rawDesc
)

func file_mempoolpb_mempoolpb_proto_rawDescGZIP() []byte {
	file_mempoolpb_mempoolpb_proto_rawDescOnce.Do(func() {
		file_mempoolpb_mempoolpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_mempoolpb_mempoolpb_proto_rawDescData)
	})
	return file_mempoolpb_mempoolpb_proto_rawDescData
}

var file_mempoolpb_mempoolpb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mempoolpb_mempoolpb_proto_goTypes = []interface{}{
	(*Event)(nil),                       // 0: mempoolpb.Event
	(*RequestBatch)(nil),                // 1: mempoolpb.RequestBatch
	(*NewBatch)(nil),                    // 2: mempoolpb.NewBatch
	(*RequestTransactions)(nil),         // 3: mempoolpb.RequestTransactions
	(*TransactionsResponse)(nil),        // 4: mempoolpb.TransactionsResponse
	(*RequestTransactionIDs)(nil),       // 5: mempoolpb.RequestTransactionIDs
	(*TransactionIDsResponse)(nil),      // 6: mempoolpb.TransactionIDsResponse
	(*RequestBatchID)(nil),              // 7: mempoolpb.RequestBatchID
	(*BatchIDResponse)(nil),             // 8: mempoolpb.BatchIDResponse
	(*RequestBatchOrigin)(nil),          // 9: mempoolpb.RequestBatchOrigin
	(*RequestTransactionsOrigin)(nil),   // 10: mempoolpb.RequestTransactionsOrigin
	(*RequestTransactionIDsOrigin)(nil), // 11: mempoolpb.RequestTransactionIDsOrigin
	(*RequestBatchIDOrigin)(nil),        // 12: mempoolpb.RequestBatchIDOrigin
	(*requestpb.Request)(nil),           // 13: requestpb.Request
	(*contextstorepb.Origin)(nil),       // 14: contextstorepb.Origin
	(*dslpb.Origin)(nil),                // 15: dslpb.Origin
}
var file_mempoolpb_mempoolpb_proto_depIdxs = []int32{
	1,  // 0: mempoolpb.Event.request_batch:type_name -> mempoolpb.RequestBatch
	2,  // 1: mempoolpb.Event.new_batch:type_name -> mempoolpb.NewBatch
	3,  // 2: mempoolpb.Event.request_transactions:type_name -> mempoolpb.RequestTransactions
	4,  // 3: mempoolpb.Event.transactions_response:type_name -> mempoolpb.TransactionsResponse
	5,  // 4: mempoolpb.Event.request_transaction_ids:type_name -> mempoolpb.RequestTransactionIDs
	6,  // 5: mempoolpb.Event.transaction_ids_response:type_name -> mempoolpb.TransactionIDsResponse
	7,  // 6: mempoolpb.Event.request_batch_id:type_name -> mempoolpb.RequestBatchID
	8,  // 7: mempoolpb.Event.batch_id_response:type_name -> mempoolpb.BatchIDResponse
	9,  // 8: mempoolpb.RequestBatch.origin:type_name -> mempoolpb.RequestBatchOrigin
	13, // 9: mempoolpb.NewBatch.txs:type_name -> requestpb.Request
	9,  // 10: mempoolpb.NewBatch.origin:type_name -> mempoolpb.RequestBatchOrigin
	10, // 11: mempoolpb.RequestTransactions.origin:type_name -> mempoolpb.RequestTransactionsOrigin
	13, // 12: mempoolpb.TransactionsResponse.txs:type_name -> requestpb.Request
	10, // 13: mempoolpb.TransactionsResponse.origin:type_name -> mempoolpb.RequestTransactionsOrigin
	13, // 14: mempoolpb.RequestTransactionIDs.txs:type_name -> requestpb.Request
	11, // 15: mempoolpb.RequestTransactionIDs.origin:type_name -> mempoolpb.RequestTransactionIDsOrigin
	11, // 16: mempoolpb.TransactionIDsResponse.origin:type_name -> mempoolpb.RequestTransactionIDsOrigin
	12, // 17: mempoolpb.RequestBatchID.origin:type_name -> mempoolpb.RequestBatchIDOrigin
	12, // 18: mempoolpb.BatchIDResponse.origin:type_name -> mempoolpb.RequestBatchIDOrigin
	14, // 19: mempoolpb.RequestBatchOrigin.context_store:type_name -> contextstorepb.Origin
	15, // 20: mempoolpb.RequestBatchOrigin.dsl:type_name -> dslpb.Origin
	14, // 21: mempoolpb.RequestTransactionsOrigin.context_store:type_name -> contextstorepb.Origin
	15, // 22: mempoolpb.RequestTransactionsOrigin.dsl:type_name -> dslpb.Origin
	14, // 23: mempoolpb.RequestTransactionIDsOrigin.context_store:type_name -> contextstorepb.Origin
	15, // 24: mempoolpb.RequestTransactionIDsOrigin.dsl:type_name -> dslpb.Origin
	14, // 25: mempoolpb.RequestBatchIDOrigin.context_store:type_name -> contextstorepb.Origin
	15, // 26: mempoolpb.RequestBatchIDOrigin.dsl:type_name -> dslpb.Origin
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_mempoolpb_mempoolpb_proto_init() }
func file_mempoolpb_mempoolpb_proto_init() {
	if File_mempoolpb_mempoolpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mempoolpb_mempoolpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransactionIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatchID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatchOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransactionsOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransactionIDsOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempoolpb_mempoolpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatchIDOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mempoolpb_mempoolpb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_RequestBatch)(nil),
		(*Event_NewBatch)(nil),
		(*Event_RequestTransactions)(nil),
		(*Event_TransactionsResponse)(nil),
		(*Event_RequestTransactionIds)(nil),
		(*Event_TransactionIdsResponse)(nil),
		(*Event_RequestBatchId)(nil),
		(*Event_BatchIdResponse)(nil),
	}
	file_mempoolpb_mempoolpb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*RequestBatchOrigin_ContextStore)(nil),
		(*RequestBatchOrigin_Dsl)(nil),
	}
	file_mempoolpb_mempoolpb_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RequestTransactionsOrigin_ContextStore)(nil),
		(*RequestTransactionsOrigin_Dsl)(nil),
	}
	file_mempoolpb_mempoolpb_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RequestTransactionIDsOrigin_ContextStore)(nil),
		(*RequestTransactionIDsOrigin_Dsl)(nil),
	}
	file_mempoolpb_mempoolpb_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RequestBatchIDOrigin_ContextStore)(nil),
		(*RequestBatchIDOrigin_Dsl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mempoolpb_mempoolpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mempoolpb_mempoolpb_proto_goTypes,
		DependencyIndexes: file_mempoolpb_mempoolpb_proto_depIdxs,
		MessageInfos:      file_mempoolpb_mempoolpb_proto_msgTypes,
	}.Build()
	File_mempoolpb_mempoolpb_proto = out.File
	file_mempoolpb_mempoolpb_proto_rawDesc = nil
	file_mempoolpb_mempoolpb_proto_goTypes = nil
	file_mempoolpb_mempoolpb_proto_depIdxs = nil
}
