// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: accountabilitypb/accountabilitypb.proto

package accountabilitypb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	isspb "github.com/filecoin-project/mir/pkg/pb/isspb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	_ "github.com/filecoin-project/mir/pkg/pb/net"
	trantorpb "github.com/filecoin-project/mir/pkg/pb/trantorpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId           string             `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ConflictingMsg_1 *SignedPredecision `protobuf:"bytes,2,opt,name=conflicting_msg_1,json=conflictingMsg1,proto3" json:"conflicting_msg_1,omitempty"`
	ConflictingMsg_2 *SignedPredecision `protobuf:"bytes,3,opt,name=conflicting_msg_2,json=conflictingMsg2,proto3" json:"conflicting_msg_2,omitempty"`
}

func (x *PoM) Reset() {
	*x = PoM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoM) ProtoMessage() {}

func (x *PoM) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoM.ProtoReflect.Descriptor instead.
func (*PoM) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{0}
}

func (x *PoM) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PoM) GetConflictingMsg_1() *SignedPredecision {
	if x != nil {
		return x.ConflictingMsg_1
	}
	return nil
}

func (x *PoM) GetConflictingMsg_2() *SignedPredecision {
	if x != nil {
		return x.ConflictingMsg_2
	}
	return nil
}

type LightCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LightCertificate) Reset() {
	*x = LightCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightCertificate) ProtoMessage() {}

func (x *LightCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightCertificate.ProtoReflect.Descriptor instead.
func (*LightCertificate) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{1}
}

func (x *LightCertificate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PoMs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poms []*PoM `protobuf:"bytes,1,rep,name=poms,proto3" json:"poms,omitempty"`
}

func (x *PoMs) Reset() {
	*x = PoMs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoMs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoMs) ProtoMessage() {}

func (x *PoMs) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoMs.ProtoReflect.Descriptor instead.
func (*PoMs) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{2}
}

func (x *PoMs) GetPoms() []*PoM {
	if x != nil {
		return x.Poms
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Message_SignedPredecision
	//	*Message_Certificate
	//	*Message_Poms
	//	*Message_LightCertificate
	//	*Message_RequestSbMessage
	//	*Message_ProvideSbMessage
	Type isMessage_Type `protobuf_oneof:"type"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{3}
}

func (m *Message) GetType() isMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Message) GetSignedPredecision() *SignedPredecision {
	if x, ok := x.GetType().(*Message_SignedPredecision); ok {
		return x.SignedPredecision
	}
	return nil
}

func (x *Message) GetCertificate() *FullCertificate {
	if x, ok := x.GetType().(*Message_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *Message) GetPoms() *PoMs {
	if x, ok := x.GetType().(*Message_Poms); ok {
		return x.Poms
	}
	return nil
}

func (x *Message) GetLightCertificate() *LightCertificate {
	if x, ok := x.GetType().(*Message_LightCertificate); ok {
		return x.LightCertificate
	}
	return nil
}

func (x *Message) GetRequestSbMessage() *RequestSBMessage {
	if x, ok := x.GetType().(*Message_RequestSbMessage); ok {
		return x.RequestSbMessage
	}
	return nil
}

func (x *Message) GetProvideSbMessage() *ProvideSBMessage {
	if x, ok := x.GetType().(*Message_ProvideSbMessage); ok {
		return x.ProvideSbMessage
	}
	return nil
}

type isMessage_Type interface {
	isMessage_Type()
}

type Message_SignedPredecision struct {
	SignedPredecision *SignedPredecision `protobuf:"bytes,1,opt,name=signed_predecision,json=signedPredecision,proto3,oneof"`
}

type Message_Certificate struct {
	Certificate *FullCertificate `protobuf:"bytes,2,opt,name=certificate,proto3,oneof"`
}

type Message_Poms struct {
	Poms *PoMs `protobuf:"bytes,3,opt,name=poms,proto3,oneof"`
}

type Message_LightCertificate struct {
	LightCertificate *LightCertificate `protobuf:"bytes,4,opt,name=light_certificate,json=lightCertificate,proto3,oneof"`
}

type Message_RequestSbMessage struct {
	RequestSbMessage *RequestSBMessage `protobuf:"bytes,5,opt,name=request_sb_message,json=requestSbMessage,proto3,oneof"`
}

type Message_ProvideSbMessage struct {
	ProvideSbMessage *ProvideSBMessage `protobuf:"bytes,6,opt,name=provide_sb_message,json=provideSbMessage,proto3,oneof"`
}

func (*Message_SignedPredecision) isMessage_Type() {}

func (*Message_Certificate) isMessage_Type() {}

func (*Message_Poms) isMessage_Type() {}

func (*Message_LightCertificate) isMessage_Type() {}

func (*Message_RequestSbMessage) isMessage_Type() {}

func (*Message_ProvideSbMessage) isMessage_Type() {}

type SignedPredecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predecision []byte `protobuf:"bytes,1,opt,name=predecision,proto3" json:"predecision,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedPredecision) Reset() {
	*x = SignedPredecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedPredecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedPredecision) ProtoMessage() {}

func (x *SignedPredecision) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedPredecision.ProtoReflect.Descriptor instead.
func (*SignedPredecision) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{4}
}

func (x *SignedPredecision) GetPredecision() []byte {
	if x != nil {
		return x.Predecision
	}
	return nil
}

func (x *SignedPredecision) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type FullCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision   []byte            `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"`
	Signatures map[string][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FullCertificate) Reset() {
	*x = FullCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCertificate) ProtoMessage() {}

func (x *FullCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCertificate.ProtoReflect.Descriptor instead.
func (*FullCertificate) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{5}
}

func (x *FullCertificate) GetDecision() []byte {
	if x != nil {
		return x.Decision
	}
	return nil
}

func (x *FullCertificate) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type InstanceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Membership     *trantorpb.Membership `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
	RetentionIndex uint64                `protobuf:"varint,2,opt,name=retention_index,json=retentionIndex,proto3" json:"retention_index,omitempty"`
}

func (x *InstanceParams) Reset() {
	*x = InstanceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceParams) ProtoMessage() {}

func (x *InstanceParams) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceParams.ProtoReflect.Descriptor instead.
func (*InstanceParams) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{6}
}

func (x *InstanceParams) GetMembership() *trantorpb.Membership {
	if x != nil {
		return x.Membership
	}
	return nil
}

func (x *InstanceParams) GetRetentionIndex() uint64 {
	if x != nil {
		return x.RetentionIndex
	}
	return 0
}

type RequestSBMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predecision []byte `protobuf:"bytes,1,opt,name=predecision,proto3" json:"predecision,omitempty"`
}

func (x *RequestSBMessage) Reset() {
	*x = RequestSBMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSBMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSBMessage) ProtoMessage() {}

func (x *RequestSBMessage) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSBMessage.ProtoReflect.Descriptor instead.
func (*RequestSBMessage) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{7}
}

func (x *RequestSBMessage) GetPredecision() []byte {
	if x != nil {
		return x.Predecision
	}
	return nil
}

type ProvideSBMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SbDeliver *isspb.SBDeliver `protobuf:"bytes,1,opt,name=sb_deliver,json=sbDeliver,proto3" json:"sb_deliver,omitempty"`
}

func (x *ProvideSBMessage) Reset() {
	*x = ProvideSBMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideSBMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideSBMessage) ProtoMessage() {}

func (x *ProvideSBMessage) ProtoReflect() protoreflect.Message {
	mi := &file_accountabilitypb_accountabilitypb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideSBMessage.ProtoReflect.Descriptor instead.
func (*ProvideSBMessage) Descriptor() ([]byte, []int) {
	return file_accountabilitypb_accountabilitypb_proto_rawDescGZIP(), []int{8}
}

func (x *ProvideSBMessage) GetSbDeliver() *isspb.SBDeliver {
	if x != nil {
		return x.SbDeliver
	}
	return nil
}

var File_accountabilitypb_accountabilitypb_proto protoreflect.FileDescriptor

var file_accountabilitypb_accountabilitypb_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x70, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x1a, 0x19, 0x74, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2f, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x03, 0x50, 0x6f, 0x4d, 0x12, 0x4d, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x82, 0xa6, 0x1d, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x31, 0x12, 0x4f, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x32, 0x3a, 0x04,
	0x80, 0xa6, 0x1d, 0x01, 0x22, 0x2c, 0x0a, 0x10, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x04, 0xd0, 0xe4,
	0x1d, 0x01, 0x22, 0x37, 0x0a, 0x04, 0x50, 0x6f, 0x4d, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6f,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x4d, 0x52,
	0x04, 0x70, 0x6f, 0x6d, 0x73, 0x3a, 0x04, 0xd0, 0xe4, 0x1d, 0x01, 0x22, 0xe3, 0x03, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x4d, 0x73, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x6d, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x42, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x53, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x04, 0xc8,
	0xe4, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0xc8, 0xe4, 0x1d,
	0x01, 0x22, 0x5d, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x08, 0xd0, 0xe4, 0x1d, 0x01, 0x80, 0xa6, 0x1d, 0x01,
	0x22, 0xfc, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x87, 0x01, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x34, 0xaa, 0xa6, 0x1d, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x04, 0xd0, 0xe4, 0x1d, 0x01, 0x22,
	0xbc, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x6d, 0x0a, 0x0f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x44, 0x82, 0xa6, 0x1d, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x6f, 0x72, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x3a,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0xd0, 0xe4, 0x1d, 0x01, 0x22, 0x49, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x0a, 0x73, 0x62, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x09, 0x73, 0x62, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x3a,
	0x04, 0xd0, 0xe4, 0x1d, 0x01, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accountabilitypb_accountabilitypb_proto_rawDescOnce sync.Once
	file_accountabilitypb_accountabilitypb_proto_rawDescData = file_accountabilitypb_accountabilitypb_proto_rawDesc
)

func file_accountabilitypb_accountabilitypb_proto_rawDescGZIP() []byte {
	file_accountabilitypb_accountabilitypb_proto_rawDescOnce.Do(func() {
		file_accountabilitypb_accountabilitypb_proto_rawDescData = protoimpl.X.CompressGZIP(file_accountabilitypb_accountabilitypb_proto_rawDescData)
	})
	return file_accountabilitypb_accountabilitypb_proto_rawDescData
}

var file_accountabilitypb_accountabilitypb_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_accountabilitypb_accountabilitypb_proto_goTypes = []interface{}{
	(*PoM)(nil),                  // 0: accountabilitypb.PoM
	(*LightCertificate)(nil),     // 1: accountabilitypb.LightCertificate
	(*PoMs)(nil),                 // 2: accountabilitypb.PoMs
	(*Message)(nil),              // 3: accountabilitypb.Message
	(*SignedPredecision)(nil),    // 4: accountabilitypb.SignedPredecision
	(*FullCertificate)(nil),      // 5: accountabilitypb.FullCertificate
	(*InstanceParams)(nil),       // 6: accountabilitypb.InstanceParams
	(*RequestSBMessage)(nil),     // 7: accountabilitypb.RequestSBMessage
	(*ProvideSBMessage)(nil),     // 8: accountabilitypb.ProvideSBMessage
	nil,                          // 9: accountabilitypb.FullCertificate.SignaturesEntry
	(*trantorpb.Membership)(nil), // 10: trantorpb.Membership
	(*isspb.SBDeliver)(nil),      // 11: isspb.SBDeliver
}
var file_accountabilitypb_accountabilitypb_proto_depIdxs = []int32{
	4,  // 0: accountabilitypb.PoM.conflicting_msg_1:type_name -> accountabilitypb.SignedPredecision
	4,  // 1: accountabilitypb.PoM.conflicting_msg_2:type_name -> accountabilitypb.SignedPredecision
	0,  // 2: accountabilitypb.PoMs.poms:type_name -> accountabilitypb.PoM
	4,  // 3: accountabilitypb.Message.signed_predecision:type_name -> accountabilitypb.SignedPredecision
	5,  // 4: accountabilitypb.Message.certificate:type_name -> accountabilitypb.FullCertificate
	2,  // 5: accountabilitypb.Message.poms:type_name -> accountabilitypb.PoMs
	1,  // 6: accountabilitypb.Message.light_certificate:type_name -> accountabilitypb.LightCertificate
	7,  // 7: accountabilitypb.Message.request_sb_message:type_name -> accountabilitypb.RequestSBMessage
	8,  // 8: accountabilitypb.Message.provide_sb_message:type_name -> accountabilitypb.ProvideSBMessage
	9,  // 9: accountabilitypb.FullCertificate.signatures:type_name -> accountabilitypb.FullCertificate.SignaturesEntry
	10, // 10: accountabilitypb.InstanceParams.membership:type_name -> trantorpb.Membership
	11, // 11: accountabilitypb.ProvideSBMessage.sb_deliver:type_name -> isspb.SBDeliver
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_accountabilitypb_accountabilitypb_proto_init() }
func file_accountabilitypb_accountabilitypb_proto_init() {
	if File_accountabilitypb_accountabilitypb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accountabilitypb_accountabilitypb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoMs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedPredecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSBMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accountabilitypb_accountabilitypb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideSBMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_accountabilitypb_accountabilitypb_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Message_SignedPredecision)(nil),
		(*Message_Certificate)(nil),
		(*Message_Poms)(nil),
		(*Message_LightCertificate)(nil),
		(*Message_RequestSbMessage)(nil),
		(*Message_ProvideSbMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accountabilitypb_accountabilitypb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accountabilitypb_accountabilitypb_proto_goTypes,
		DependencyIndexes: file_accountabilitypb_accountabilitypb_proto_depIdxs,
		MessageInfos:      file_accountabilitypb_accountabilitypb_proto_msgTypes,
	}.Build()
	File_accountabilitypb_accountabilitypb_proto = out.File
	file_accountabilitypb_accountabilitypb_proto_rawDesc = nil
	file_accountabilitypb_accountabilitypb_proto_goTypes = nil
	file_accountabilitypb_accountabilitypb_proto_depIdxs = nil
}
