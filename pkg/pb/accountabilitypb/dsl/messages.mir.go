// Code generated by Mir codegen. DO NOT EDIT.

package accountabilitypbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	types "github.com/filecoin-project/mir/pkg/pb/accountabilitypb/types"
	dsl1 "github.com/filecoin-project/mir/pkg/pb/messagepb/dsl"
	types2 "github.com/filecoin-project/mir/pkg/pb/messagepb/types"
	types1 "github.com/filecoin-project/mir/pkg/types"
)

// Module-specific dsl functions for processing net messages.

func UponMessageReceived[W types.Message_TypeWrapper[M], M any](m dsl.Module, handler func(from types1.NodeID, msg *M) error) {
	dsl1.UponMessageReceived[*types2.Message_Accountability](m, func(from types1.NodeID, msg *types.Message) error {
		w, ok := msg.Type.(W)
		if !ok {
			return nil
		}

		return handler(from, w.Unwrap())
	})
}

func UponSignedPredecisionReceived(m dsl.Module, handler func(from types1.NodeID, predecision []uint8, signature []uint8) error) {
	UponMessageReceived[*types.Message_SignedPredecision](m, func(from types1.NodeID, msg *types.SignedPredecision) error {
		return handler(from, msg.Predecision, msg.Signature)
	})
}

func UponFullCertificateReceived(m dsl.Module, handler func(from types1.NodeID, certificate map[types1.NodeID]*types.SignedPredecision) error) {
	UponMessageReceived[*types.Message_Certificate](m, func(from types1.NodeID, msg *types.FullCertificate) error {
		return handler(from, msg.Certificate)
	})
}

func UponPoMsReceived(m dsl.Module, handler func(from types1.NodeID, poms []*types.PoM) error) {
	UponMessageReceived[*types.Message_Poms](m, func(from types1.NodeID, msg *types.PoMs) error {
		return handler(from, msg.Poms)
	})
}

func UponLightCertificateReceived(m dsl.Module, handler func(from types1.NodeID, data []uint8) error) {
	UponMessageReceived[*types.Message_LightCertificate](m, func(from types1.NodeID, msg *types.LightCertificate) error {
		return handler(from, msg.Data)
	})
}
