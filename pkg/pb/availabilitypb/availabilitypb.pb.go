// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: availabilitypb/availabilitypb.proto

package availabilitypb

import (
	mscpb "github.com/filecoin-project/mir/pkg/pb/availabilitypb/mscpb"
	contextstorepb "github.com/filecoin-project/mir/pkg/pb/contextstorepb"
	dslpb "github.com/filecoin-project/mir/pkg/pb/dslpb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Event_RequestCert
	//	*Event_NewCert
	//	*Event_VerifyCert
	//	*Event_CertVerified
	//	*Event_RequestTransactions
	//	*Event_ProvideTransactions
	//	*Event_ComputeCert
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetRequestCert() *RequestCert {
	if x, ok := x.GetType().(*Event_RequestCert); ok {
		return x.RequestCert
	}
	return nil
}

func (x *Event) GetNewCert() *NewCert {
	if x, ok := x.GetType().(*Event_NewCert); ok {
		return x.NewCert
	}
	return nil
}

func (x *Event) GetVerifyCert() *VerifyCert {
	if x, ok := x.GetType().(*Event_VerifyCert); ok {
		return x.VerifyCert
	}
	return nil
}

func (x *Event) GetCertVerified() *CertVerified {
	if x, ok := x.GetType().(*Event_CertVerified); ok {
		return x.CertVerified
	}
	return nil
}

func (x *Event) GetRequestTransactions() *RequestTransactions {
	if x, ok := x.GetType().(*Event_RequestTransactions); ok {
		return x.RequestTransactions
	}
	return nil
}

func (x *Event) GetProvideTransactions() *ProvideTransactions {
	if x, ok := x.GetType().(*Event_ProvideTransactions); ok {
		return x.ProvideTransactions
	}
	return nil
}

func (x *Event) GetComputeCert() *ComputeCert {
	if x, ok := x.GetType().(*Event_ComputeCert); ok {
		return x.ComputeCert
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_RequestCert struct {
	RequestCert *RequestCert `protobuf:"bytes,1,opt,name=request_cert,json=requestCert,proto3,oneof"`
}

type Event_NewCert struct {
	NewCert *NewCert `protobuf:"bytes,2,opt,name=new_cert,json=newCert,proto3,oneof"`
}

type Event_VerifyCert struct {
	VerifyCert *VerifyCert `protobuf:"bytes,3,opt,name=verify_cert,json=verifyCert,proto3,oneof"`
}

type Event_CertVerified struct {
	CertVerified *CertVerified `protobuf:"bytes,4,opt,name=cert_verified,json=certVerified,proto3,oneof"`
}

type Event_RequestTransactions struct {
	RequestTransactions *RequestTransactions `protobuf:"bytes,5,opt,name=request_transactions,json=requestTransactions,proto3,oneof"`
}

type Event_ProvideTransactions struct {
	ProvideTransactions *ProvideTransactions `protobuf:"bytes,6,opt,name=provide_transactions,json=provideTransactions,proto3,oneof"`
}

type Event_ComputeCert struct {
	ComputeCert *ComputeCert `protobuf:"bytes,7,opt,name=compute_cert,json=computeCert,proto3,oneof"`
}

func (*Event_RequestCert) isEvent_Type() {}

func (*Event_NewCert) isEvent_Type() {}

func (*Event_VerifyCert) isEvent_Type() {}

func (*Event_CertVerified) isEvent_Type() {}

func (*Event_RequestTransactions) isEvent_Type() {}

func (*Event_ProvideTransactions) isEvent_Type() {}

func (*Event_ComputeCert) isEvent_Type() {}

// RequestCert is used by the consensus layer to request an availability certificate for a batch of transactions
// from the availability layer.
type RequestCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *RequestCertOrigin `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestCert) Reset() {
	*x = RequestCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCert) ProtoMessage() {}

func (x *RequestCert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCert.ProtoReflect.Descriptor instead.
func (*RequestCert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{1}
}

func (x *RequestCert) GetOrigin() *RequestCertOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// NewCert is a response to a RequestCert event.
type NewCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert   *Cert              `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin *RequestCertOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *NewCert) Reset() {
	*x = NewCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCert) ProtoMessage() {}

func (x *NewCert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCert.ProtoReflect.Descriptor instead.
func (*NewCert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{2}
}

func (x *NewCert) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *NewCert) GetOrigin() *RequestCertOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// VerifyCert can be used to verify validity of an availability certificate.
type VerifyCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert   *Cert             `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin *VerifyCertOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyCert) Reset() {
	*x = VerifyCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCert) ProtoMessage() {}

func (x *VerifyCert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCert.ProtoReflect.Descriptor instead.
func (*VerifyCert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyCert) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *VerifyCert) GetOrigin() *VerifyCertOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// CertVerified is a response to a VerifyCert event.
type CertVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid  bool              `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Err    string            `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Origin *VerifyCertOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *CertVerified) Reset() {
	*x = CertVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertVerified) ProtoMessage() {}

func (x *CertVerified) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertVerified.ProtoReflect.Descriptor instead.
func (*CertVerified) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{4}
}

func (x *CertVerified) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CertVerified) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *CertVerified) GetOrigin() *VerifyCertOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// RequestTransactions allows reconstructing a batch of transactions by a corresponding availability certificate.
// It is possible that some of the transactions are not stored locally on the node. In this case, the availability
// layer will pull these transactions from other nodes.
type RequestTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert   *Cert                      `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin *RequestTransactionsOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestTransactions) Reset() {
	*x = RequestTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransactions) ProtoMessage() {}

func (x *RequestTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransactions.ProtoReflect.Descriptor instead.
func (*RequestTransactions) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{5}
}

func (x *RequestTransactions) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *RequestTransactions) GetOrigin() *RequestTransactionsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// ProvideTransactions is a response to a RequestTransactions event.
type ProvideTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs    []*requestpb.Request       `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	Origin *RequestTransactionsOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *ProvideTransactions) Reset() {
	*x = ProvideTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideTransactions) ProtoMessage() {}

func (x *ProvideTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideTransactions.ProtoReflect.Descriptor instead.
func (*ProvideTransactions) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{6}
}

func (x *ProvideTransactions) GetTxs() []*requestpb.Request {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *ProvideTransactions) GetOrigin() *RequestTransactionsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type RequestCertOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestCertOrigin_ContextStore
	//	*RequestCertOrigin_Dsl
	Type isRequestCertOrigin_Type `protobuf_oneof:"type"`
}

func (x *RequestCertOrigin) Reset() {
	*x = RequestCertOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCertOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCertOrigin) ProtoMessage() {}

func (x *RequestCertOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCertOrigin.ProtoReflect.Descriptor instead.
func (*RequestCertOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{7}
}

func (x *RequestCertOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestCertOrigin) GetType() isRequestCertOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestCertOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestCertOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestCertOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestCertOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestCertOrigin_Type interface {
	isRequestCertOrigin_Type()
}

type RequestCertOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestCertOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestCertOrigin_ContextStore) isRequestCertOrigin_Type() {}

func (*RequestCertOrigin_Dsl) isRequestCertOrigin_Type() {}

type RequestTransactionsOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestTransactionsOrigin_ContextStore
	//	*RequestTransactionsOrigin_Dsl
	Type isRequestTransactionsOrigin_Type `protobuf_oneof:"type"`
}

func (x *RequestTransactionsOrigin) Reset() {
	*x = RequestTransactionsOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransactionsOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransactionsOrigin) ProtoMessage() {}

func (x *RequestTransactionsOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransactionsOrigin.ProtoReflect.Descriptor instead.
func (*RequestTransactionsOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{8}
}

func (x *RequestTransactionsOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestTransactionsOrigin) GetType() isRequestTransactionsOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestTransactionsOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestTransactionsOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestTransactionsOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestTransactionsOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestTransactionsOrigin_Type interface {
	isRequestTransactionsOrigin_Type()
}

type RequestTransactionsOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestTransactionsOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestTransactionsOrigin_ContextStore) isRequestTransactionsOrigin_Type() {}

func (*RequestTransactionsOrigin_Dsl) isRequestTransactionsOrigin_Type() {}

type VerifyCertOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*VerifyCertOrigin_ContextStore
	//	*VerifyCertOrigin_Dsl
	Type isVerifyCertOrigin_Type `protobuf_oneof:"type"`
}

func (x *VerifyCertOrigin) Reset() {
	*x = VerifyCertOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCertOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCertOrigin) ProtoMessage() {}

func (x *VerifyCertOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCertOrigin.ProtoReflect.Descriptor instead.
func (*VerifyCertOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyCertOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *VerifyCertOrigin) GetType() isVerifyCertOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VerifyCertOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*VerifyCertOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *VerifyCertOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*VerifyCertOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isVerifyCertOrigin_Type interface {
	isVerifyCertOrigin_Type()
}

type VerifyCertOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type VerifyCertOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*VerifyCertOrigin_ContextStore) isVerifyCertOrigin_Type() {}

func (*VerifyCertOrigin_Dsl) isVerifyCertOrigin_Type() {}

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Cert_Mscs
	Type isCert_Type `protobuf_oneof:"type"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{10}
}

func (m *Cert) GetType() isCert_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Cert) GetMscs() *mscpb.Certs {
	if x, ok := x.GetType().(*Cert_Mscs); ok {
		return x.Mscs
	}
	return nil
}

type isCert_Type interface {
	isCert_Type()
}

type Cert_Mscs struct {
	Mscs *mscpb.Certs `protobuf:"bytes,1,opt,name=mscs,proto3,oneof"`
}

func (*Cert_Mscs) isCert_Type() {}

type ComputeCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ComputeCert) Reset() {
	*x = ComputeCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeCert) ProtoMessage() {}

func (x *ComputeCert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeCert.ProtoReflect.Descriptor instead.
func (*ComputeCert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{11}
}

var File_availabilitypb_availabilitypb_proto protoreflect.FileDescriptor

var file_availabilitypb_availabilitypb_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x70, 0x62, 0x1a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x73, 0x6c, 0x70,
	0x62, 0x2f, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x6d, 0x73,
	0x63, 0x70, 0x62, 0x2f, 0x6d, 0x73, 0x63, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x69, 0x72, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x65, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x58,
	0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x3a, 0x04, 0x90, 0xa6, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x54, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x7a,
	0x0a, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x7c, 0x0a, 0x0a, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x7c, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x12, 0x3e, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04,
	0x98, 0xa6, 0x1d, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6,
	0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82,
	0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d,
	0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70,
	0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a,
	0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a,
	0x04, 0x43, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x73, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x62, 0x2e, 0x6d, 0x73, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x73, 0x63, 0x73, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_availabilitypb_availabilitypb_proto_rawDescOnce sync.Once
	file_availabilitypb_availabilitypb_proto_rawDescData = file_availabilitypb_availabilitypb_proto_rawDesc
)

func file_availabilitypb_availabilitypb_proto_rawDescGZIP() []byte {
	file_availabilitypb_availabilitypb_proto_rawDescOnce.Do(func() {
		file_availabilitypb_availabilitypb_proto_rawDescData = protoimpl.X.CompressGZIP(file_availabilitypb_availabilitypb_proto_rawDescData)
	})
	return file_availabilitypb_availabilitypb_proto_rawDescData
}

var file_availabilitypb_availabilitypb_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_availabilitypb_availabilitypb_proto_goTypes = []interface{}{
	(*Event)(nil),                     // 0: availabilitypb.Event
	(*RequestCert)(nil),               // 1: availabilitypb.RequestCert
	(*NewCert)(nil),                   // 2: availabilitypb.NewCert
	(*VerifyCert)(nil),                // 3: availabilitypb.VerifyCert
	(*CertVerified)(nil),              // 4: availabilitypb.CertVerified
	(*RequestTransactions)(nil),       // 5: availabilitypb.RequestTransactions
	(*ProvideTransactions)(nil),       // 6: availabilitypb.ProvideTransactions
	(*RequestCertOrigin)(nil),         // 7: availabilitypb.RequestCertOrigin
	(*RequestTransactionsOrigin)(nil), // 8: availabilitypb.RequestTransactionsOrigin
	(*VerifyCertOrigin)(nil),          // 9: availabilitypb.VerifyCertOrigin
	(*Cert)(nil),                      // 10: availabilitypb.Cert
	(*ComputeCert)(nil),               // 11: availabilitypb.ComputeCert
	(*requestpb.Request)(nil),         // 12: requestpb.Request
	(*contextstorepb.Origin)(nil),     // 13: contextstorepb.Origin
	(*dslpb.Origin)(nil),              // 14: dslpb.Origin
	(*mscpb.Certs)(nil),               // 15: availabilitypb.mscpb.Certs
}
var file_availabilitypb_availabilitypb_proto_depIdxs = []int32{
	1,  // 0: availabilitypb.Event.request_cert:type_name -> availabilitypb.RequestCert
	2,  // 1: availabilitypb.Event.new_cert:type_name -> availabilitypb.NewCert
	3,  // 2: availabilitypb.Event.verify_cert:type_name -> availabilitypb.VerifyCert
	4,  // 3: availabilitypb.Event.cert_verified:type_name -> availabilitypb.CertVerified
	5,  // 4: availabilitypb.Event.request_transactions:type_name -> availabilitypb.RequestTransactions
	6,  // 5: availabilitypb.Event.provide_transactions:type_name -> availabilitypb.ProvideTransactions
	11, // 6: availabilitypb.Event.compute_cert:type_name -> availabilitypb.ComputeCert
	7,  // 7: availabilitypb.RequestCert.origin:type_name -> availabilitypb.RequestCertOrigin
	10, // 8: availabilitypb.NewCert.cert:type_name -> availabilitypb.Cert
	7,  // 9: availabilitypb.NewCert.origin:type_name -> availabilitypb.RequestCertOrigin
	10, // 10: availabilitypb.VerifyCert.cert:type_name -> availabilitypb.Cert
	9,  // 11: availabilitypb.VerifyCert.origin:type_name -> availabilitypb.VerifyCertOrigin
	9,  // 12: availabilitypb.CertVerified.origin:type_name -> availabilitypb.VerifyCertOrigin
	10, // 13: availabilitypb.RequestTransactions.cert:type_name -> availabilitypb.Cert
	8,  // 14: availabilitypb.RequestTransactions.origin:type_name -> availabilitypb.RequestTransactionsOrigin
	12, // 15: availabilitypb.ProvideTransactions.txs:type_name -> requestpb.Request
	8,  // 16: availabilitypb.ProvideTransactions.origin:type_name -> availabilitypb.RequestTransactionsOrigin
	13, // 17: availabilitypb.RequestCertOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 18: availabilitypb.RequestCertOrigin.dsl:type_name -> dslpb.Origin
	13, // 19: availabilitypb.RequestTransactionsOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 20: availabilitypb.RequestTransactionsOrigin.dsl:type_name -> dslpb.Origin
	13, // 21: availabilitypb.VerifyCertOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 22: availabilitypb.VerifyCertOrigin.dsl:type_name -> dslpb.Origin
	15, // 23: availabilitypb.Cert.mscs:type_name -> availabilitypb.mscpb.Certs
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_availabilitypb_availabilitypb_proto_init() }
func file_availabilitypb_availabilitypb_proto_init() {
	if File_availabilitypb_availabilitypb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_availabilitypb_availabilitypb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCertOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransactionsOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCertOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_RequestCert)(nil),
		(*Event_NewCert)(nil),
		(*Event_VerifyCert)(nil),
		(*Event_CertVerified)(nil),
		(*Event_RequestTransactions)(nil),
		(*Event_ProvideTransactions)(nil),
		(*Event_ComputeCert)(nil),
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RequestCertOrigin_ContextStore)(nil),
		(*RequestCertOrigin_Dsl)(nil),
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RequestTransactionsOrigin_ContextStore)(nil),
		(*RequestTransactionsOrigin_Dsl)(nil),
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*VerifyCertOrigin_ContextStore)(nil),
		(*VerifyCertOrigin_Dsl)(nil),
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Cert_Mscs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_availabilitypb_availabilitypb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_availabilitypb_availabilitypb_proto_goTypes,
		DependencyIndexes: file_availabilitypb_availabilitypb_proto_depIdxs,
		MessageInfos:      file_availabilitypb_availabilitypb_proto_msgTypes,
	}.Build()
	File_availabilitypb_availabilitypb_proto = out.File
	file_availabilitypb_availabilitypb_proto_rawDesc = nil
	file_availabilitypb_availabilitypb_proto_goTypes = nil
	file_availabilitypb_availabilitypb_proto_depIdxs = nil
}
