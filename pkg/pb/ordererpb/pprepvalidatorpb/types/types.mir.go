// Code generated by Mir codegen. DO NOT EDIT.

package pprepvalidatorpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	types1 "github.com/filecoin-project/mir/codegen/model/types"
	types2 "github.com/filecoin-project/mir/pkg/pb/contextstorepb/types"
	types3 "github.com/filecoin-project/mir/pkg/pb/dslpb/types"
	pprepvalidatorpb "github.com/filecoin-project/mir/pkg/pb/ordererpb/pprepvalidatorpb"
	types "github.com/filecoin-project/mir/pkg/pb/pbftpb/types"
	types4 "github.com/filecoin-project/mir/pkg/pb/trantorpb/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
	stdtypes "github.com/filecoin-project/mir/stdtypes"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() pprepvalidatorpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb pprepvalidatorpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *pprepvalidatorpb.Event_ValidatePreprepare:
		return &Event_ValidatePreprepare{ValidatePreprepare: ValidatePreprepareFromPb(pb.ValidatePreprepare)}
	case *pprepvalidatorpb.Event_PreprepareValidated:
		return &Event_PreprepareValidated{PreprepareValidated: PreprepareValidatedFromPb(pb.PreprepareValidated)}
	}
	return nil
}

type Event_ValidatePreprepare struct {
	ValidatePreprepare *ValidatePreprepare
}

func (*Event_ValidatePreprepare) isEvent_Type() {}

func (w *Event_ValidatePreprepare) Unwrap() *ValidatePreprepare {
	return w.ValidatePreprepare
}

func (w *Event_ValidatePreprepare) Pb() pprepvalidatorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.ValidatePreprepare == nil {
		return &pprepvalidatorpb.Event_ValidatePreprepare{}
	}
	return &pprepvalidatorpb.Event_ValidatePreprepare{ValidatePreprepare: (w.ValidatePreprepare).Pb()}
}

func (*Event_ValidatePreprepare) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.Event_ValidatePreprepare]()}
}

type Event_PreprepareValidated struct {
	PreprepareValidated *PreprepareValidated
}

func (*Event_PreprepareValidated) isEvent_Type() {}

func (w *Event_PreprepareValidated) Unwrap() *PreprepareValidated {
	return w.PreprepareValidated
}

func (w *Event_PreprepareValidated) Pb() pprepvalidatorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.PreprepareValidated == nil {
		return &pprepvalidatorpb.Event_PreprepareValidated{}
	}
	return &pprepvalidatorpb.Event_PreprepareValidated{PreprepareValidated: (w.PreprepareValidated).Pb()}
}

func (*Event_PreprepareValidated) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.Event_PreprepareValidated]()}
}

func EventFromPb(pb *pprepvalidatorpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *pprepvalidatorpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &pprepvalidatorpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.Event]()}
}

type ValidatePreprepare struct {
	Preprepare *types.Preprepare
	Origin     *ValidatePreprepareOrigin
}

func ValidatePreprepareFromPb(pb *pprepvalidatorpb.ValidatePreprepare) *ValidatePreprepare {
	if pb == nil {
		return nil
	}
	return &ValidatePreprepare{
		Preprepare: types.PreprepareFromPb(pb.Preprepare),
		Origin:     ValidatePreprepareOriginFromPb(pb.Origin),
	}
}

func (m *ValidatePreprepare) Pb() *pprepvalidatorpb.ValidatePreprepare {
	if m == nil {
		return nil
	}
	pbMessage := &pprepvalidatorpb.ValidatePreprepare{}
	{
		if m.Preprepare != nil {
			pbMessage.Preprepare = (m.Preprepare).Pb()
		}
		if m.Origin != nil {
			pbMessage.Origin = (m.Origin).Pb()
		}
	}

	return pbMessage
}

func (*ValidatePreprepare) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.ValidatePreprepare]()}
}

type PreprepareValidated struct {
	Error  error
	Origin *ValidatePreprepareOrigin
}

func PreprepareValidatedFromPb(pb *pprepvalidatorpb.PreprepareValidated) *PreprepareValidated {
	if pb == nil {
		return nil
	}
	return &PreprepareValidated{
		Error:  types1.StringToError(pb.Error),
		Origin: ValidatePreprepareOriginFromPb(pb.Origin),
	}
}

func (m *PreprepareValidated) Pb() *pprepvalidatorpb.PreprepareValidated {
	if m == nil {
		return nil
	}
	pbMessage := &pprepvalidatorpb.PreprepareValidated{}
	{
		pbMessage.Error = types1.ErrorToString(m.Error)
		if m.Origin != nil {
			pbMessage.Origin = (m.Origin).Pb()
		}
	}

	return pbMessage
}

func (*PreprepareValidated) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.PreprepareValidated]()}
}

type ValidatePreprepareOrigin struct {
	Module stdtypes.ModuleID
	Type   ValidatePreprepareOrigin_Type
}

type ValidatePreprepareOrigin_Type interface {
	mirreflect.GeneratedType
	isValidatePreprepareOrigin_Type()
	Pb() pprepvalidatorpb.ValidatePreprepareOrigin_Type
}

type ValidatePreprepareOrigin_TypeWrapper[T any] interface {
	ValidatePreprepareOrigin_Type
	Unwrap() *T
}

func ValidatePreprepareOrigin_TypeFromPb(pb pprepvalidatorpb.ValidatePreprepareOrigin_Type) ValidatePreprepareOrigin_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *pprepvalidatorpb.ValidatePreprepareOrigin_ContextStore:
		return &ValidatePreprepareOrigin_ContextStore{ContextStore: types2.OriginFromPb(pb.ContextStore)}
	case *pprepvalidatorpb.ValidatePreprepareOrigin_Dsl:
		return &ValidatePreprepareOrigin_Dsl{Dsl: types3.OriginFromPb(pb.Dsl)}
	}
	return nil
}

type ValidatePreprepareOrigin_ContextStore struct {
	ContextStore *types2.Origin
}

func (*ValidatePreprepareOrigin_ContextStore) isValidatePreprepareOrigin_Type() {}

func (w *ValidatePreprepareOrigin_ContextStore) Unwrap() *types2.Origin {
	return w.ContextStore
}

func (w *ValidatePreprepareOrigin_ContextStore) Pb() pprepvalidatorpb.ValidatePreprepareOrigin_Type {
	if w == nil {
		return nil
	}
	if w.ContextStore == nil {
		return &pprepvalidatorpb.ValidatePreprepareOrigin_ContextStore{}
	}
	return &pprepvalidatorpb.ValidatePreprepareOrigin_ContextStore{ContextStore: (w.ContextStore).Pb()}
}

func (*ValidatePreprepareOrigin_ContextStore) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.ValidatePreprepareOrigin_ContextStore]()}
}

type ValidatePreprepareOrigin_Dsl struct {
	Dsl *types3.Origin
}

func (*ValidatePreprepareOrigin_Dsl) isValidatePreprepareOrigin_Type() {}

func (w *ValidatePreprepareOrigin_Dsl) Unwrap() *types3.Origin {
	return w.Dsl
}

func (w *ValidatePreprepareOrigin_Dsl) Pb() pprepvalidatorpb.ValidatePreprepareOrigin_Type {
	if w == nil {
		return nil
	}
	if w.Dsl == nil {
		return &pprepvalidatorpb.ValidatePreprepareOrigin_Dsl{}
	}
	return &pprepvalidatorpb.ValidatePreprepareOrigin_Dsl{Dsl: (w.Dsl).Pb()}
}

func (*ValidatePreprepareOrigin_Dsl) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.ValidatePreprepareOrigin_Dsl]()}
}

func ValidatePreprepareOriginFromPb(pb *pprepvalidatorpb.ValidatePreprepareOrigin) *ValidatePreprepareOrigin {
	if pb == nil {
		return nil
	}
	return &ValidatePreprepareOrigin{
		Module: (stdtypes.ModuleID)(pb.Module),
		Type:   ValidatePreprepareOrigin_TypeFromPb(pb.Type),
	}
}

func (m *ValidatePreprepareOrigin) Pb() *pprepvalidatorpb.ValidatePreprepareOrigin {
	if m == nil {
		return nil
	}
	pbMessage := &pprepvalidatorpb.ValidatePreprepareOrigin{}
	{
		pbMessage.Module = (string)(m.Module)
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*ValidatePreprepareOrigin) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.ValidatePreprepareOrigin]()}
}

type PPrepValidatorChkp struct {
	Membership *types4.Membership
}

func PPrepValidatorChkpFromPb(pb *pprepvalidatorpb.PPrepValidatorChkp) *PPrepValidatorChkp {
	if pb == nil {
		return nil
	}
	return &PPrepValidatorChkp{
		Membership: types4.MembershipFromPb(pb.Membership),
	}
}

func (m *PPrepValidatorChkp) Pb() *pprepvalidatorpb.PPrepValidatorChkp {
	if m == nil {
		return nil
	}
	pbMessage := &pprepvalidatorpb.PPrepValidatorChkp{}
	{
		if m.Membership != nil {
			pbMessage.Membership = (m.Membership).Pb()
		}
	}

	return pbMessage
}

func (*PPrepValidatorChkp) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*pprepvalidatorpb.PPrepValidatorChkp]()}
}
