//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: isspb/isspb.proto

package isspb

import (
	availabilitypb "github.com/filecoin-project/mir/pkg/pb/availabilitypb"
	commonpb "github.com/filecoin-project/mir/pkg/pb/commonpb"
	isspbftpb "github.com/filecoin-project/mir/pkg/pb/isspbftpb"
	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ISSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSMessage_Sb
	//	*ISSMessage_Checkpoint
	//	*ISSMessage_StableCheckpoint
	//	*ISSMessage_RetransmitRequests
	Type isISSMessage_Type `protobuf_oneof:"type"`
}

func (x *ISSMessage) Reset() {
	*x = ISSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSMessage) ProtoMessage() {}

func (x *ISSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSMessage.ProtoReflect.Descriptor instead.
func (*ISSMessage) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{0}
}

func (m *ISSMessage) GetType() isISSMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSMessage) GetSb() *SBMessage {
	if x, ok := x.GetType().(*ISSMessage_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSMessage) GetCheckpoint() *Checkpoint {
	if x, ok := x.GetType().(*ISSMessage_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *ISSMessage) GetStableCheckpoint() *StableCheckpoint {
	if x, ok := x.GetType().(*ISSMessage_StableCheckpoint); ok {
		return x.StableCheckpoint
	}
	return nil
}

func (x *ISSMessage) GetRetransmitRequests() *RetransmitRequests {
	if x, ok := x.GetType().(*ISSMessage_RetransmitRequests); ok {
		return x.RetransmitRequests
	}
	return nil
}

type isISSMessage_Type interface {
	isISSMessage_Type()
}

type ISSMessage_Sb struct {
	Sb *SBMessage `protobuf:"bytes,1,opt,name=sb,proto3,oneof"`
}

type ISSMessage_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,2,opt,name=checkpoint,proto3,oneof"`
}

type ISSMessage_StableCheckpoint struct {
	StableCheckpoint *StableCheckpoint `protobuf:"bytes,3,opt,name=stable_checkpoint,json=stableCheckpoint,proto3,oneof"`
}

type ISSMessage_RetransmitRequests struct {
	RetransmitRequests *RetransmitRequests `protobuf:"bytes,4,opt,name=retransmit_requests,json=retransmitRequests,proto3,oneof"`
}

func (*ISSMessage_Sb) isISSMessage_Type() {}

func (*ISSMessage_Checkpoint) isISSMessage_Type() {}

func (*ISSMessage_StableCheckpoint) isISSMessage_Type() {}

func (*ISSMessage_RetransmitRequests) isISSMessage_Type() {}

type RetransmitRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*requestpb.Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *RetransmitRequests) Reset() {
	*x = RetransmitRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetransmitRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetransmitRequests) ProtoMessage() {}

func (x *RetransmitRequests) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetransmitRequests.ProtoReflect.Descriptor instead.
func (*RetransmitRequests) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{1}
}

func (x *RetransmitRequests) GetRequests() []*requestpb.Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SBMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64             `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Msg      *SBInstanceMessage `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SBMessage) Reset() {
	*x = SBMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBMessage) ProtoMessage() {}

func (x *SBMessage) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBMessage.ProtoReflect.Descriptor instead.
func (*SBMessage) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{2}
}

func (x *SBMessage) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBMessage) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBMessage) GetMsg() *SBInstanceMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch        uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Sn           uint64 `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	SnapshotHash []byte `protobuf:"bytes,3,opt,name=snapshotHash,proto3" json:"snapshotHash,omitempty"`
	Signature    []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{3}
}

func (x *Checkpoint) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Checkpoint) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *Checkpoint) GetSnapshotHash() []byte {
	if x != nil {
		return x.SnapshotHash
	}
	return nil
}

func (x *Checkpoint) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SBInstanceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceMessage_PbftPreprepare
	//	*SBInstanceMessage_PbftPrepare
	//	*SBInstanceMessage_PbftCommit
	//	*SBInstanceMessage_PbftSignedViewChange
	//	*SBInstanceMessage_PbftPreprepareRequest
	//	*SBInstanceMessage_PbftMissingPreprepare
	//	*SBInstanceMessage_PbftNewView
	//	*SBInstanceMessage_PbftDone
	//	*SBInstanceMessage_PbftCatchUpRequest
	//	*SBInstanceMessage_PbftCatchUpResponse
	Type isSBInstanceMessage_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceMessage) Reset() {
	*x = SBInstanceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceMessage) ProtoMessage() {}

func (x *SBInstanceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceMessage.ProtoReflect.Descriptor instead.
func (*SBInstanceMessage) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{4}
}

func (m *SBInstanceMessage) GetType() isSBInstanceMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftPreprepare() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftPreprepare); ok {
		return x.PbftPreprepare
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftPrepare() *isspbftpb.Prepare {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftPrepare); ok {
		return x.PbftPrepare
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftCommit() *isspbftpb.Commit {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftCommit); ok {
		return x.PbftCommit
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftSignedViewChange() *isspbftpb.SignedViewChange {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftSignedViewChange); ok {
		return x.PbftSignedViewChange
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftPreprepareRequest() *isspbftpb.PreprepareRequest {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftPreprepareRequest); ok {
		return x.PbftPreprepareRequest
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftMissingPreprepare() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftMissingPreprepare); ok {
		return x.PbftMissingPreprepare
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftNewView() *isspbftpb.NewView {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftNewView); ok {
		return x.PbftNewView
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftDone() *isspbftpb.Done {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftDone); ok {
		return x.PbftDone
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftCatchUpRequest() *isspbftpb.CatchUpRequest {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftCatchUpRequest); ok {
		return x.PbftCatchUpRequest
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftCatchUpResponse() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftCatchUpResponse); ok {
		return x.PbftCatchUpResponse
	}
	return nil
}

type isSBInstanceMessage_Type interface {
	isSBInstanceMessage_Type()
}

type SBInstanceMessage_PbftPreprepare struct {
	PbftPreprepare *isspbftpb.Preprepare `protobuf:"bytes,1,opt,name=pbft_preprepare,json=pbftPreprepare,proto3,oneof"`
}

type SBInstanceMessage_PbftPrepare struct {
	PbftPrepare *isspbftpb.Prepare `protobuf:"bytes,2,opt,name=pbft_prepare,json=pbftPrepare,proto3,oneof"`
}

type SBInstanceMessage_PbftCommit struct {
	PbftCommit *isspbftpb.Commit `protobuf:"bytes,3,opt,name=pbft_commit,json=pbftCommit,proto3,oneof"`
}

type SBInstanceMessage_PbftSignedViewChange struct {
	PbftSignedViewChange *isspbftpb.SignedViewChange `protobuf:"bytes,4,opt,name=pbft_signed_view_change,json=pbftSignedViewChange,proto3,oneof"`
}

type SBInstanceMessage_PbftPreprepareRequest struct {
	PbftPreprepareRequest *isspbftpb.PreprepareRequest `protobuf:"bytes,5,opt,name=pbft_preprepare_request,json=pbftPreprepareRequest,proto3,oneof"`
}

type SBInstanceMessage_PbftMissingPreprepare struct {
	PbftMissingPreprepare *isspbftpb.Preprepare `protobuf:"bytes,6,opt,name=pbft_missing_preprepare,json=pbftMissingPreprepare,proto3,oneof"`
}

type SBInstanceMessage_PbftNewView struct {
	PbftNewView *isspbftpb.NewView `protobuf:"bytes,7,opt,name=pbft_new_view,json=pbftNewView,proto3,oneof"`
}

type SBInstanceMessage_PbftDone struct {
	PbftDone *isspbftpb.Done `protobuf:"bytes,8,opt,name=pbft_done,json=pbftDone,proto3,oneof"`
}

type SBInstanceMessage_PbftCatchUpRequest struct {
	PbftCatchUpRequest *isspbftpb.CatchUpRequest `protobuf:"bytes,9,opt,name=pbft_catch_up_request,json=pbftCatchUpRequest,proto3,oneof"`
}

type SBInstanceMessage_PbftCatchUpResponse struct {
	PbftCatchUpResponse *isspbftpb.Preprepare `protobuf:"bytes,10,opt,name=pbft_catch_up_response,json=pbftCatchUpResponse,proto3,oneof"`
}

func (*SBInstanceMessage_PbftPreprepare) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftPrepare) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftCommit) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftSignedViewChange) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftPreprepareRequest) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftMissingPreprepare) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftNewView) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftDone) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftCatchUpRequest) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftCatchUpResponse) isSBInstanceMessage_Type() {}

type ISSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSEvent_PersistCheckpoint
	//	*ISSEvent_StableCheckpoint
	//	*ISSEvent_PersistStableCheckpoint
	//	*ISSEvent_Sb
	//	*ISSEvent_PushCheckpoint
	Type isISSEvent_Type `protobuf_oneof:"type"`
}

func (x *ISSEvent) Reset() {
	*x = ISSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSEvent) ProtoMessage() {}

func (x *ISSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSEvent.ProtoReflect.Descriptor instead.
func (*ISSEvent) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{5}
}

func (m *ISSEvent) GetType() isISSEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSEvent) GetPersistCheckpoint() *PersistCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_PersistCheckpoint); ok {
		return x.PersistCheckpoint
	}
	return nil
}

func (x *ISSEvent) GetStableCheckpoint() *StableCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_StableCheckpoint); ok {
		return x.StableCheckpoint
	}
	return nil
}

func (x *ISSEvent) GetPersistStableCheckpoint() *PersistStableCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_PersistStableCheckpoint); ok {
		return x.PersistStableCheckpoint
	}
	return nil
}

func (x *ISSEvent) GetSb() *SBEvent {
	if x, ok := x.GetType().(*ISSEvent_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSEvent) GetPushCheckpoint() *PushCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_PushCheckpoint); ok {
		return x.PushCheckpoint
	}
	return nil
}

type isISSEvent_Type interface {
	isISSEvent_Type()
}

type ISSEvent_PersistCheckpoint struct {
	PersistCheckpoint *PersistCheckpoint `protobuf:"bytes,1,opt,name=persist_checkpoint,json=persistCheckpoint,proto3,oneof"`
}

type ISSEvent_StableCheckpoint struct {
	StableCheckpoint *StableCheckpoint `protobuf:"bytes,2,opt,name=stable_checkpoint,json=stableCheckpoint,proto3,oneof"`
}

type ISSEvent_PersistStableCheckpoint struct {
	PersistStableCheckpoint *PersistStableCheckpoint `protobuf:"bytes,3,opt,name=persist_stable_checkpoint,json=persistStableCheckpoint,proto3,oneof"`
}

type ISSEvent_Sb struct {
	Sb *SBEvent `protobuf:"bytes,4,opt,name=sb,proto3,oneof"`
}

type ISSEvent_PushCheckpoint struct {
	PushCheckpoint *PushCheckpoint `protobuf:"bytes,5,opt,name=push_checkpoint,json=pushCheckpoint,proto3,oneof"`
}

func (*ISSEvent_PersistCheckpoint) isISSEvent_Type() {}

func (*ISSEvent_StableCheckpoint) isISSEvent_Type() {}

func (*ISSEvent_PersistStableCheckpoint) isISSEvent_Type() {}

func (*ISSEvent_Sb) isISSEvent_Type() {}

func (*ISSEvent_PushCheckpoint) isISSEvent_Type() {}

type ISSHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSHashOrigin_Sb
	//	*ISSHashOrigin_LogEntrySn
	//	*ISSHashOrigin_StateSnapshotEpoch
	//	*ISSHashOrigin_Requests
	Type isISSHashOrigin_Type `protobuf_oneof:"type"`
}

func (x *ISSHashOrigin) Reset() {
	*x = ISSHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSHashOrigin) ProtoMessage() {}

func (x *ISSHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSHashOrigin.ProtoReflect.Descriptor instead.
func (*ISSHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{6}
}

func (m *ISSHashOrigin) GetType() isISSHashOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSHashOrigin) GetSb() *SBHashOrigin {
	if x, ok := x.GetType().(*ISSHashOrigin_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSHashOrigin) GetLogEntrySn() uint64 {
	if x, ok := x.GetType().(*ISSHashOrigin_LogEntrySn); ok {
		return x.LogEntrySn
	}
	return 0
}

func (x *ISSHashOrigin) GetStateSnapshotEpoch() uint64 {
	if x, ok := x.GetType().(*ISSHashOrigin_StateSnapshotEpoch); ok {
		return x.StateSnapshotEpoch
	}
	return 0
}

func (x *ISSHashOrigin) GetRequests() *RequestHashOrigin {
	if x, ok := x.GetType().(*ISSHashOrigin_Requests); ok {
		return x.Requests
	}
	return nil
}

type isISSHashOrigin_Type interface {
	isISSHashOrigin_Type()
}

type ISSHashOrigin_Sb struct {
	Sb *SBHashOrigin `protobuf:"bytes,1,opt,name=sb,proto3,oneof"`
}

type ISSHashOrigin_LogEntrySn struct {
	LogEntrySn uint64 `protobuf:"varint,2,opt,name=log_entry_sn,json=logEntrySn,proto3,oneof"`
}

type ISSHashOrigin_StateSnapshotEpoch struct {
	StateSnapshotEpoch uint64 `protobuf:"varint,3,opt,name=state_snapshot_epoch,json=stateSnapshotEpoch,proto3,oneof"`
}

type ISSHashOrigin_Requests struct {
	Requests *RequestHashOrigin `protobuf:"bytes,4,opt,name=requests,proto3,oneof"`
}

func (*ISSHashOrigin_Sb) isISSHashOrigin_Type() {}

func (*ISSHashOrigin_LogEntrySn) isISSHashOrigin_Type() {}

func (*ISSHashOrigin_StateSnapshotEpoch) isISSHashOrigin_Type() {}

func (*ISSHashOrigin_Requests) isISSHashOrigin_Type() {}

type RequestHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*requestpb.Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *RequestHashOrigin) Reset() {
	*x = RequestHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHashOrigin) ProtoMessage() {}

func (x *RequestHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHashOrigin.ProtoReflect.Descriptor instead.
func (*RequestHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{7}
}

func (x *RequestHashOrigin) GetRequests() []*requestpb.Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ISSSignOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSSignOrigin_Sb
	//	*ISSSignOrigin_CheckpointEpoch
	Type isISSSignOrigin_Type `protobuf_oneof:"type"`
}

func (x *ISSSignOrigin) Reset() {
	*x = ISSSignOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSSignOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSSignOrigin) ProtoMessage() {}

func (x *ISSSignOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSSignOrigin.ProtoReflect.Descriptor instead.
func (*ISSSignOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{8}
}

func (m *ISSSignOrigin) GetType() isISSSignOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSSignOrigin) GetSb() *SBSignOrigin {
	if x, ok := x.GetType().(*ISSSignOrigin_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSSignOrigin) GetCheckpointEpoch() uint64 {
	if x, ok := x.GetType().(*ISSSignOrigin_CheckpointEpoch); ok {
		return x.CheckpointEpoch
	}
	return 0
}

type isISSSignOrigin_Type interface {
	isISSSignOrigin_Type()
}

type ISSSignOrigin_Sb struct {
	Sb *SBSignOrigin `protobuf:"bytes,1,opt,name=sb,proto3,oneof"`
}

type ISSSignOrigin_CheckpointEpoch struct {
	CheckpointEpoch uint64 `protobuf:"varint,2,opt,name=checkpoint_epoch,json=checkpointEpoch,proto3,oneof"`
}

func (*ISSSignOrigin_Sb) isISSSignOrigin_Type() {}

func (*ISSSignOrigin_CheckpointEpoch) isISSSignOrigin_Type() {}

type ISSSigVerOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSSigVerOrigin_Sb
	//	*ISSSigVerOrigin_CheckpointEpoch
	//	*ISSSigVerOrigin_StableCheckpoint
	Type isISSSigVerOrigin_Type `protobuf_oneof:"type"`
}

func (x *ISSSigVerOrigin) Reset() {
	*x = ISSSigVerOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSSigVerOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSSigVerOrigin) ProtoMessage() {}

func (x *ISSSigVerOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSSigVerOrigin.ProtoReflect.Descriptor instead.
func (*ISSSigVerOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{9}
}

func (m *ISSSigVerOrigin) GetType() isISSSigVerOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSSigVerOrigin) GetSb() *SBSigVerOrigin {
	if x, ok := x.GetType().(*ISSSigVerOrigin_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSSigVerOrigin) GetCheckpointEpoch() uint64 {
	if x, ok := x.GetType().(*ISSSigVerOrigin_CheckpointEpoch); ok {
		return x.CheckpointEpoch
	}
	return 0
}

func (x *ISSSigVerOrigin) GetStableCheckpoint() *StableCheckpoint {
	if x, ok := x.GetType().(*ISSSigVerOrigin_StableCheckpoint); ok {
		return x.StableCheckpoint
	}
	return nil
}

type isISSSigVerOrigin_Type interface {
	isISSSigVerOrigin_Type()
}

type ISSSigVerOrigin_Sb struct {
	Sb *SBSigVerOrigin `protobuf:"bytes,1,opt,name=sb,proto3,oneof"`
}

type ISSSigVerOrigin_CheckpointEpoch struct {
	CheckpointEpoch uint64 `protobuf:"varint,2,opt,name=checkpoint_epoch,json=checkpointEpoch,proto3,oneof"`
}

type ISSSigVerOrigin_StableCheckpoint struct {
	StableCheckpoint *StableCheckpoint `protobuf:"bytes,3,opt,name=stable_checkpoint,json=stableCheckpoint,proto3,oneof"`
}

func (*ISSSigVerOrigin_Sb) isISSSigVerOrigin_Type() {}

func (*ISSSigVerOrigin_CheckpointEpoch) isISSSigVerOrigin_Type() {}

func (*ISSSigVerOrigin_StableCheckpoint) isISSSigVerOrigin_Type() {}

type PersistCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn                uint64                  `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
	StateSnapshot     *commonpb.StateSnapshot `protobuf:"bytes,2,opt,name=state_snapshot,json=stateSnapshot,proto3" json:"state_snapshot,omitempty"`
	StateSnapshotHash []byte                  `protobuf:"bytes,3,opt,name=state_snapshot_hash,json=stateSnapshotHash,proto3" json:"state_snapshot_hash,omitempty"`
	Signature         []byte                  `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PersistCheckpoint) Reset() {
	*x = PersistCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistCheckpoint) ProtoMessage() {}

func (x *PersistCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistCheckpoint.ProtoReflect.Descriptor instead.
func (*PersistCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{10}
}

func (x *PersistCheckpoint) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *PersistCheckpoint) GetStateSnapshot() *commonpb.StateSnapshot {
	if x != nil {
		return x.StateSnapshot
	}
	return nil
}

func (x *PersistCheckpoint) GetStateSnapshotHash() []byte {
	if x != nil {
		return x.StateSnapshotHash
	}
	return nil
}

func (x *PersistCheckpoint) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type StableCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn       uint64                  `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Snapshot *commonpb.StateSnapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Cert     map[string][]byte       `protobuf:"bytes,4,rep,name=cert,proto3" json:"cert,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StableCheckpoint) Reset() {
	*x = StableCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCheckpoint) ProtoMessage() {}

func (x *StableCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCheckpoint.ProtoReflect.Descriptor instead.
func (*StableCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{11}
}

func (x *StableCheckpoint) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *StableCheckpoint) GetSnapshot() *commonpb.StateSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *StableCheckpoint) GetCert() map[string][]byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

// PersistStableCheckpoint needs to be a separate Event from StableCheckpoint, since both are ISSEvents,
// but, the protocol must differentiate between them. While the former will be applied on recovery from the WAL,
// the latter serves as a notification to the ISS protocol when a stable checkpoint has been persisted.
type PersistStableCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StableCheckpoint *StableCheckpoint `protobuf:"bytes,1,opt,name=stable_checkpoint,json=stableCheckpoint,proto3" json:"stable_checkpoint,omitempty"`
}

func (x *PersistStableCheckpoint) Reset() {
	*x = PersistStableCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistStableCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistStableCheckpoint) ProtoMessage() {}

func (x *PersistStableCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistStableCheckpoint.ProtoReflect.Descriptor instead.
func (*PersistStableCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{12}
}

func (x *PersistStableCheckpoint) GetStableCheckpoint() *StableCheckpoint {
	if x != nil {
		return x.StableCheckpoint
	}
	return nil
}

type PushCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushCheckpoint) Reset() {
	*x = PushCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushCheckpoint) ProtoMessage() {}

func (x *PushCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushCheckpoint.ProtoReflect.Descriptor instead.
func (*PushCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{13}
}

type SBEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64           `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Event    *SBInstanceEvent `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SBEvent) Reset() {
	*x = SBEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBEvent) ProtoMessage() {}

func (x *SBEvent) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBEvent.ProtoReflect.Descriptor instead.
func (*SBEvent) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{14}
}

func (x *SBEvent) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBEvent) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBEvent) GetEvent() *SBInstanceEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type SBInstanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceEvent_Init
	//	*SBInstanceEvent_Deliver
	//	*SBInstanceEvent_MessageReceived
	//	*SBInstanceEvent_PendingRequests
	//	*SBInstanceEvent_Tick
	//	*SBInstanceEvent_CertRequest
	//	*SBInstanceEvent_BatchReady
	//	*SBInstanceEvent_CertReady
	//	*SBInstanceEvent_HashRequest
	//	*SBInstanceEvent_HashResult
	//	*SBInstanceEvent_SignResult
	//	*SBInstanceEvent_NodeSigsVerified
	//	*SBInstanceEvent_PbftPersistPreprepare
	//	*SBInstanceEvent_PbftPersistPrepare
	//	*SBInstanceEvent_PbftPersistCommit
	//	*SBInstanceEvent_PbftPersistSignedViewChange
	//	*SBInstanceEvent_PbftPersistNewView
	//	*SBInstanceEvent_PbftProposeTimeout
	//	*SBInstanceEvent_PbftViewChangeSnTimeout
	//	*SBInstanceEvent_PbftViewChangeSegTimeout
	Type isSBInstanceEvent_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceEvent) Reset() {
	*x = SBInstanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceEvent) ProtoMessage() {}

func (x *SBInstanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceEvent.ProtoReflect.Descriptor instead.
func (*SBInstanceEvent) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{15}
}

func (m *SBInstanceEvent) GetType() isSBInstanceEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceEvent) GetInit() *SBInit {
	if x, ok := x.GetType().(*SBInstanceEvent_Init); ok {
		return x.Init
	}
	return nil
}

func (x *SBInstanceEvent) GetDeliver() *SBDeliver {
	if x, ok := x.GetType().(*SBInstanceEvent_Deliver); ok {
		return x.Deliver
	}
	return nil
}

func (x *SBInstanceEvent) GetMessageReceived() *SBMessageReceived {
	if x, ok := x.GetType().(*SBInstanceEvent_MessageReceived); ok {
		return x.MessageReceived
	}
	return nil
}

func (x *SBInstanceEvent) GetPendingRequests() *SBPendingRequests {
	if x, ok := x.GetType().(*SBInstanceEvent_PendingRequests); ok {
		return x.PendingRequests
	}
	return nil
}

func (x *SBInstanceEvent) GetTick() *SBTick {
	if x, ok := x.GetType().(*SBInstanceEvent_Tick); ok {
		return x.Tick
	}
	return nil
}

func (x *SBInstanceEvent) GetCertRequest() *SBCertRequest {
	if x, ok := x.GetType().(*SBInstanceEvent_CertRequest); ok {
		return x.CertRequest
	}
	return nil
}

func (x *SBInstanceEvent) GetBatchReady() *SBBatchReady {
	if x, ok := x.GetType().(*SBInstanceEvent_BatchReady); ok {
		return x.BatchReady
	}
	return nil
}

func (x *SBInstanceEvent) GetCertReady() *SBCertReady {
	if x, ok := x.GetType().(*SBInstanceEvent_CertReady); ok {
		return x.CertReady
	}
	return nil
}

func (x *SBInstanceEvent) GetHashRequest() *SBHashRequest {
	if x, ok := x.GetType().(*SBInstanceEvent_HashRequest); ok {
		return x.HashRequest
	}
	return nil
}

func (x *SBInstanceEvent) GetHashResult() *SBHashResult {
	if x, ok := x.GetType().(*SBInstanceEvent_HashResult); ok {
		return x.HashResult
	}
	return nil
}

func (x *SBInstanceEvent) GetSignResult() *SBSignResult {
	if x, ok := x.GetType().(*SBInstanceEvent_SignResult); ok {
		return x.SignResult
	}
	return nil
}

func (x *SBInstanceEvent) GetNodeSigsVerified() *SBNodeSigsVerified {
	if x, ok := x.GetType().(*SBInstanceEvent_NodeSigsVerified); ok {
		return x.NodeSigsVerified
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistPreprepare() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistPreprepare); ok {
		return x.PbftPersistPreprepare
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistPrepare() *isspbftpb.Prepare {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistPrepare); ok {
		return x.PbftPersistPrepare
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistCommit() *isspbftpb.Commit {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistCommit); ok {
		return x.PbftPersistCommit
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistSignedViewChange() *isspbftpb.SignedViewChange {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistSignedViewChange); ok {
		return x.PbftPersistSignedViewChange
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistNewView() *isspbftpb.NewView {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistNewView); ok {
		return x.PbftPersistNewView
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftProposeTimeout() uint64 {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftProposeTimeout); ok {
		return x.PbftProposeTimeout
	}
	return 0
}

func (x *SBInstanceEvent) GetPbftViewChangeSnTimeout() *isspbftpb.VCSNTimeout {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftViewChangeSnTimeout); ok {
		return x.PbftViewChangeSnTimeout
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftViewChangeSegTimeout() uint64 {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftViewChangeSegTimeout); ok {
		return x.PbftViewChangeSegTimeout
	}
	return 0
}

type isSBInstanceEvent_Type interface {
	isSBInstanceEvent_Type()
}

type SBInstanceEvent_Init struct {
	Init *SBInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type SBInstanceEvent_Deliver struct {
	Deliver *SBDeliver `protobuf:"bytes,2,opt,name=deliver,proto3,oneof"`
}

type SBInstanceEvent_MessageReceived struct {
	MessageReceived *SBMessageReceived `protobuf:"bytes,3,opt,name=message_received,json=messageReceived,proto3,oneof"`
}

type SBInstanceEvent_PendingRequests struct {
	PendingRequests *SBPendingRequests `protobuf:"bytes,4,opt,name=pending_requests,json=pendingRequests,proto3,oneof"`
}

type SBInstanceEvent_Tick struct {
	Tick *SBTick `protobuf:"bytes,5,opt,name=tick,proto3,oneof"`
}

type SBInstanceEvent_CertRequest struct {
	CertRequest *SBCertRequest `protobuf:"bytes,6,opt,name=cert_request,json=certRequest,proto3,oneof"`
}

type SBInstanceEvent_BatchReady struct {
	BatchReady *SBBatchReady `protobuf:"bytes,7,opt,name=batch_ready,json=batchReady,proto3,oneof"`
}

type SBInstanceEvent_CertReady struct {
	CertReady *SBCertReady `protobuf:"bytes,8,opt,name=cert_ready,json=certReady,proto3,oneof"`
}

type SBInstanceEvent_HashRequest struct {
	HashRequest *SBHashRequest `protobuf:"bytes,10,opt,name=hash_request,json=hashRequest,proto3,oneof"`
}

type SBInstanceEvent_HashResult struct {
	HashResult *SBHashResult `protobuf:"bytes,11,opt,name=hash_result,json=hashResult,proto3,oneof"`
}

type SBInstanceEvent_SignResult struct {
	SignResult *SBSignResult `protobuf:"bytes,12,opt,name=sign_result,json=signResult,proto3,oneof"`
}

type SBInstanceEvent_NodeSigsVerified struct {
	NodeSigsVerified *SBNodeSigsVerified `protobuf:"bytes,13,opt,name=node_sigs_verified,json=nodeSigsVerified,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistPreprepare struct {
	PbftPersistPreprepare *isspbftpb.Preprepare `protobuf:"bytes,100,opt,name=pbft_persist_preprepare,json=pbftPersistPreprepare,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistPrepare struct {
	PbftPersistPrepare *isspbftpb.Prepare `protobuf:"bytes,101,opt,name=pbft_persist_prepare,json=pbftPersistPrepare,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistCommit struct {
	PbftPersistCommit *isspbftpb.Commit `protobuf:"bytes,102,opt,name=pbft_persist_commit,json=pbftPersistCommit,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistSignedViewChange struct {
	PbftPersistSignedViewChange *isspbftpb.SignedViewChange `protobuf:"bytes,103,opt,name=pbft_persist_signed_view_change,json=pbftPersistSignedViewChange,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistNewView struct {
	PbftPersistNewView *isspbftpb.NewView `protobuf:"bytes,104,opt,name=pbft_persist_new_view,json=pbftPersistNewView,proto3,oneof"`
}

type SBInstanceEvent_PbftProposeTimeout struct {
	PbftProposeTimeout uint64 `protobuf:"varint,105,opt,name=pbft_propose_timeout,json=pbftProposeTimeout,proto3,oneof"`
}

type SBInstanceEvent_PbftViewChangeSnTimeout struct {
	PbftViewChangeSnTimeout *isspbftpb.VCSNTimeout `protobuf:"bytes,106,opt,name=pbft_view_change_sn_timeout,json=pbftViewChangeSnTimeout,proto3,oneof"`
}

type SBInstanceEvent_PbftViewChangeSegTimeout struct {
	PbftViewChangeSegTimeout uint64 `protobuf:"varint,107,opt,name=pbft_view_change_seg_timeout,json=pbftViewChangeSegTimeout,proto3,oneof"`
}

func (*SBInstanceEvent_Init) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_Deliver) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_MessageReceived) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PendingRequests) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_Tick) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_CertRequest) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_BatchReady) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_CertReady) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_HashRequest) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_HashResult) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_SignResult) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_NodeSigsVerified) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistPreprepare) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistPrepare) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistCommit) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistSignedViewChange) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistNewView) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftProposeTimeout) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftViewChangeSnTimeout) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftViewChangeSegTimeout) isSBInstanceEvent_Type() {}

type SBInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SBInit) Reset() {
	*x = SBInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInit) ProtoMessage() {}

func (x *SBInit) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInit.ProtoReflect.Descriptor instead.
func (*SBInit) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{16}
}

type SBCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SBCertRequest) Reset() {
	*x = SBCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBCertRequest) ProtoMessage() {}

func (x *SBCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBCertRequest.ProtoReflect.Descriptor instead.
func (*SBCertRequest) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{17}
}

type SBBatchReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch               *requestpb.Batch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	PendingRequestsLeft uint64           `protobuf:"varint,2,opt,name=pending_requests_left,json=pendingRequestsLeft,proto3" json:"pending_requests_left,omitempty"`
}

func (x *SBBatchReady) Reset() {
	*x = SBBatchReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBBatchReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBBatchReady) ProtoMessage() {}

func (x *SBBatchReady) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBBatchReady.ProtoReflect.Descriptor instead.
func (*SBBatchReady) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{18}
}

func (x *SBBatchReady) GetBatch() *requestpb.Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SBBatchReady) GetPendingRequestsLeft() uint64 {
	if x != nil {
		return x.PendingRequestsLeft
	}
	return 0
}

type SBCertReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert *availabilitypb.Cert `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *SBCertReady) Reset() {
	*x = SBCertReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBCertReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBCertReady) ProtoMessage() {}

func (x *SBCertReady) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBCertReady.ProtoReflect.Descriptor instead.
func (*SBCertReady) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{19}
}

func (x *SBCertReady) GetCert() *availabilitypb.Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

type SBDeliver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn       uint64 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
	CertData []byte `protobuf:"bytes,2,opt,name=cert_data,json=certData,proto3" json:"cert_data,omitempty"`
	Aborted  bool   `protobuf:"varint,3,opt,name=aborted,proto3" json:"aborted,omitempty"`
}

func (x *SBDeliver) Reset() {
	*x = SBDeliver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBDeliver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBDeliver) ProtoMessage() {}

func (x *SBDeliver) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBDeliver.ProtoReflect.Descriptor instead.
func (*SBDeliver) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{20}
}

func (x *SBDeliver) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *SBDeliver) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *SBDeliver) GetAborted() bool {
	if x != nil {
		return x.Aborted
	}
	return false
}

type SBMessageReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Msg  *SBInstanceMessage `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SBMessageReceived) Reset() {
	*x = SBMessageReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBMessageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBMessageReceived) ProtoMessage() {}

func (x *SBMessageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBMessageReceived.ProtoReflect.Descriptor instead.
func (*SBMessageReceived) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{21}
}

func (x *SBMessageReceived) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SBMessageReceived) GetMsg() *SBInstanceMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SBPendingRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequests uint64 `protobuf:"varint,1,opt,name=numRequests,proto3" json:"numRequests,omitempty"`
}

func (x *SBPendingRequests) Reset() {
	*x = SBPendingRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBPendingRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBPendingRequests) ProtoMessage() {}

func (x *SBPendingRequests) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBPendingRequests.ProtoReflect.Descriptor instead.
func (*SBPendingRequests) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{22}
}

func (x *SBPendingRequests) GetNumRequests() uint64 {
	if x != nil {
		return x.NumRequests
	}
	return 0
}

type SBTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SBTick) Reset() {
	*x = SBTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBTick) ProtoMessage() {}

func (x *SBTick) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBTick.ProtoReflect.Descriptor instead.
func (*SBTick) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{23}
}

type SBHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*commonpb.HashData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Origin *SBHashOrigin        `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBHashRequest) Reset() {
	*x = SBHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBHashRequest) ProtoMessage() {}

func (x *SBHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBHashRequest.ProtoReflect.Descriptor instead.
func (*SBHashRequest) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{24}
}

func (x *SBHashRequest) GetData() []*commonpb.HashData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SBHashRequest) GetOrigin() *SBHashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBHashResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digests [][]byte              `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	Origin  *SBInstanceHashOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBHashResult) Reset() {
	*x = SBHashResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBHashResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBHashResult) ProtoMessage() {}

func (x *SBHashResult) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBHashResult.ProtoReflect.Descriptor instead.
func (*SBHashResult) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{25}
}

func (x *SBHashResult) GetDigests() [][]byte {
	if x != nil {
		return x.Digests
	}
	return nil
}

func (x *SBHashResult) GetOrigin() *SBInstanceHashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64                `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64                `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Origin   *SBInstanceHashOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBHashOrigin) Reset() {
	*x = SBHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBHashOrigin) ProtoMessage() {}

func (x *SBHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBHashOrigin.ProtoReflect.Descriptor instead.
func (*SBHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{26}
}

func (x *SBHashOrigin) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBHashOrigin) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBHashOrigin) GetOrigin() *SBInstanceHashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBInstanceHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceHashOrigin_PbftPreprepare
	//	*SBInstanceHashOrigin_PbftMissingPreprepare
	//	*SBInstanceHashOrigin_PbftNewView
	//	*SBInstanceHashOrigin_PbftEmptyPreprepares
	//	*SBInstanceHashOrigin_PbftCatchUpResponse
	Type isSBInstanceHashOrigin_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceHashOrigin) Reset() {
	*x = SBInstanceHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceHashOrigin) ProtoMessage() {}

func (x *SBInstanceHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceHashOrigin.ProtoReflect.Descriptor instead.
func (*SBInstanceHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{27}
}

func (m *SBInstanceHashOrigin) GetType() isSBInstanceHashOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceHashOrigin) GetPbftPreprepare() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceHashOrigin_PbftPreprepare); ok {
		return x.PbftPreprepare
	}
	return nil
}

func (x *SBInstanceHashOrigin) GetPbftMissingPreprepare() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceHashOrigin_PbftMissingPreprepare); ok {
		return x.PbftMissingPreprepare
	}
	return nil
}

func (x *SBInstanceHashOrigin) GetPbftNewView() *isspbftpb.NewView {
	if x, ok := x.GetType().(*SBInstanceHashOrigin_PbftNewView); ok {
		return x.PbftNewView
	}
	return nil
}

func (x *SBInstanceHashOrigin) GetPbftEmptyPreprepares() uint64 {
	if x, ok := x.GetType().(*SBInstanceHashOrigin_PbftEmptyPreprepares); ok {
		return x.PbftEmptyPreprepares
	}
	return 0
}

func (x *SBInstanceHashOrigin) GetPbftCatchUpResponse() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceHashOrigin_PbftCatchUpResponse); ok {
		return x.PbftCatchUpResponse
	}
	return nil
}

type isSBInstanceHashOrigin_Type interface {
	isSBInstanceHashOrigin_Type()
}

type SBInstanceHashOrigin_PbftPreprepare struct {
	PbftPreprepare *isspbftpb.Preprepare `protobuf:"bytes,1,opt,name=pbft_preprepare,json=pbftPreprepare,proto3,oneof"`
}

type SBInstanceHashOrigin_PbftMissingPreprepare struct {
	PbftMissingPreprepare *isspbftpb.Preprepare `protobuf:"bytes,2,opt,name=pbft_missing_preprepare,json=pbftMissingPreprepare,proto3,oneof"`
}

type SBInstanceHashOrigin_PbftNewView struct {
	PbftNewView *isspbftpb.NewView `protobuf:"bytes,3,opt,name=pbft_new_view,json=pbftNewView,proto3,oneof"`
}

type SBInstanceHashOrigin_PbftEmptyPreprepares struct {
	PbftEmptyPreprepares uint64 `protobuf:"varint,4,opt,name=pbft_empty_preprepares,json=pbftEmptyPreprepares,proto3,oneof"`
}

type SBInstanceHashOrigin_PbftCatchUpResponse struct {
	PbftCatchUpResponse *isspbftpb.Preprepare `protobuf:"bytes,5,opt,name=pbft_catch_up_response,json=pbftCatchUpResponse,proto3,oneof"`
}

func (*SBInstanceHashOrigin_PbftPreprepare) isSBInstanceHashOrigin_Type() {}

func (*SBInstanceHashOrigin_PbftMissingPreprepare) isSBInstanceHashOrigin_Type() {}

func (*SBInstanceHashOrigin_PbftNewView) isSBInstanceHashOrigin_Type() {}

func (*SBInstanceHashOrigin_PbftEmptyPreprepares) isSBInstanceHashOrigin_Type() {}

func (*SBInstanceHashOrigin_PbftCatchUpResponse) isSBInstanceHashOrigin_Type() {}

type SBSignResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte                `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Origin    *SBInstanceSignOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBSignResult) Reset() {
	*x = SBSignResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBSignResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBSignResult) ProtoMessage() {}

func (x *SBSignResult) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBSignResult.ProtoReflect.Descriptor instead.
func (*SBSignResult) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{28}
}

func (x *SBSignResult) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SBSignResult) GetOrigin() *SBInstanceSignOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBSignOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64                `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64                `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Origin   *SBInstanceSignOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBSignOrigin) Reset() {
	*x = SBSignOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBSignOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBSignOrigin) ProtoMessage() {}

func (x *SBSignOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBSignOrigin.ProtoReflect.Descriptor instead.
func (*SBSignOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{29}
}

func (x *SBSignOrigin) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBSignOrigin) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBSignOrigin) GetOrigin() *SBInstanceSignOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBInstanceSignOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceSignOrigin_PbftViewChange
	Type isSBInstanceSignOrigin_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceSignOrigin) Reset() {
	*x = SBInstanceSignOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceSignOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceSignOrigin) ProtoMessage() {}

func (x *SBInstanceSignOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceSignOrigin.ProtoReflect.Descriptor instead.
func (*SBInstanceSignOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{30}
}

func (m *SBInstanceSignOrigin) GetType() isSBInstanceSignOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceSignOrigin) GetPbftViewChange() *isspbftpb.ViewChange {
	if x, ok := x.GetType().(*SBInstanceSignOrigin_PbftViewChange); ok {
		return x.PbftViewChange
	}
	return nil
}

type isSBInstanceSignOrigin_Type interface {
	isSBInstanceSignOrigin_Type()
}

type SBInstanceSignOrigin_PbftViewChange struct {
	PbftViewChange *isspbftpb.ViewChange `protobuf:"bytes,1,opt,name=pbft_view_change,json=pbftViewChange,proto3,oneof"`
}

func (*SBInstanceSignOrigin_PbftViewChange) isSBInstanceSignOrigin_Type() {}

type SBNodeSigsVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIds []string                `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	Valid   []bool                  `protobuf:"varint,2,rep,packed,name=valid,proto3" json:"valid,omitempty"`
	Errors  []string                `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	Origin  *SBInstanceSigVerOrigin `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	AllOk   bool                    `protobuf:"varint,5,opt,name=all_ok,json=allOk,proto3" json:"all_ok,omitempty"`
}

func (x *SBNodeSigsVerified) Reset() {
	*x = SBNodeSigsVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBNodeSigsVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBNodeSigsVerified) ProtoMessage() {}

func (x *SBNodeSigsVerified) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBNodeSigsVerified.ProtoReflect.Descriptor instead.
func (*SBNodeSigsVerified) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{31}
}

func (x *SBNodeSigsVerified) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *SBNodeSigsVerified) GetValid() []bool {
	if x != nil {
		return x.Valid
	}
	return nil
}

func (x *SBNodeSigsVerified) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SBNodeSigsVerified) GetOrigin() *SBInstanceSigVerOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *SBNodeSigsVerified) GetAllOk() bool {
	if x != nil {
		return x.AllOk
	}
	return false
}

type SBSigVerOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64                  `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Origin   *SBInstanceSigVerOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBSigVerOrigin) Reset() {
	*x = SBSigVerOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBSigVerOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBSigVerOrigin) ProtoMessage() {}

func (x *SBSigVerOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBSigVerOrigin.ProtoReflect.Descriptor instead.
func (*SBSigVerOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{32}
}

func (x *SBSigVerOrigin) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBSigVerOrigin) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBSigVerOrigin) GetOrigin() *SBInstanceSigVerOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBInstanceSigVerOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceSigVerOrigin_PbftSignedViewChange
	//	*SBInstanceSigVerOrigin_PbftNewView
	Type isSBInstanceSigVerOrigin_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceSigVerOrigin) Reset() {
	*x = SBInstanceSigVerOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceSigVerOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceSigVerOrigin) ProtoMessage() {}

func (x *SBInstanceSigVerOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceSigVerOrigin.ProtoReflect.Descriptor instead.
func (*SBInstanceSigVerOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{33}
}

func (m *SBInstanceSigVerOrigin) GetType() isSBInstanceSigVerOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceSigVerOrigin) GetPbftSignedViewChange() *isspbftpb.SignedViewChange {
	if x, ok := x.GetType().(*SBInstanceSigVerOrigin_PbftSignedViewChange); ok {
		return x.PbftSignedViewChange
	}
	return nil
}

func (x *SBInstanceSigVerOrigin) GetPbftNewView() *isspbftpb.NewView {
	if x, ok := x.GetType().(*SBInstanceSigVerOrigin_PbftNewView); ok {
		return x.PbftNewView
	}
	return nil
}

type isSBInstanceSigVerOrigin_Type interface {
	isSBInstanceSigVerOrigin_Type()
}

type SBInstanceSigVerOrigin_PbftSignedViewChange struct {
	PbftSignedViewChange *isspbftpb.SignedViewChange `protobuf:"bytes,1,opt,name=pbft_signed_view_change,json=pbftSignedViewChange,proto3,oneof"`
}

type SBInstanceSigVerOrigin_PbftNewView struct {
	PbftNewView *isspbftpb.NewView `protobuf:"bytes,2,opt,name=pbft_new_view,json=pbftNewView,proto3,oneof"`
}

func (*SBInstanceSigVerOrigin_PbftSignedViewChange) isSBInstanceSigVerOrigin_Type() {}

func (*SBInstanceSigVerOrigin_PbftNewView) isSBInstanceSigVerOrigin_Type() {}

var File_isspb_isspb_proto protoreflect.FileDescriptor

var file_isspb_isspb_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2f, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69, 0x73, 0x73, 0x70, 0x62, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2f, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83,
	0x02, 0x0a, 0x0a, 0x49, 0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x02, 0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x02, 0x73,
	0x62, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x09, 0x53, 0x42,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x74, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x11,
	0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x70, 0x62, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x62, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x14, 0x70, 0x62, 0x66, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x70, 0x62, 0x66, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x70, 0x62, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4f, 0x0a, 0x17, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x62, 0x66, 0x74,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62,
	0x66, 0x74, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x62, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x09, 0x70,
	0x62, 0x66, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x62, 0x66, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x70,
	0x62, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x62, 0x66, 0x74, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x70,
	0x62, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x62, 0x66, 0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe7, 0x02, 0x0a, 0x08, 0x49, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49,
	0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x5c, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x02, 0x73, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x73,
	0x62, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0d,
	0x49, 0x53, 0x53, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x02, 0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x02, 0x73, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x6b, 0x0a, 0x0d, 0x49, 0x53, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x25, 0x0a, 0x02, 0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x73, 0x62, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x0f, 0x49, 0x53, 0x53, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x73, 0x62, 0x12, 0x2b, 0x0a, 0x10, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x3e,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc7, 0x01, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73,
	0x6e, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x1a, 0x37, 0x0a,
	0x09, 0x43, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x69, 0x0a, 0x07, 0x53, 0x42, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x97, 0x0a, 0x0a, 0x0f, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x42, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x42, 0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x39,
	0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x42, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x67, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x17,
	0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x62, 0x66, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x46, 0x0a,
	0x14, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x62, 0x66, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x62, 0x66, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x63, 0x0a, 0x1f, 0x70, 0x62,
	0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x1b, 0x70, 0x62, 0x66, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x47, 0x0a, 0x15, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69,
	0x65, 0x77, 0x48, 0x00, 0x52, 0x12, 0x70, 0x62, 0x66, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x62, 0x66, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x12, 0x70, 0x62, 0x66, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x1b,
	0x70, 0x62, 0x66, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x43,
	0x53, 0x4e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x17, 0x70, 0x62, 0x66,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x18, 0x70, 0x62,
	0x66, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x08,
	0x0a, 0x06, 0x53, 0x42, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x42, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x42, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x53, 0x42, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x52,
	0x0a, 0x09, 0x53, 0x42, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x35, 0x0a, 0x11, 0x53, 0x42, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x08,
	0x0a, 0x06, 0x53, 0x42, 0x54, 0x69, 0x63, 0x6b, 0x22, 0x64, 0x0a, 0x0d, 0x53, 0x42, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x5d,
	0x0a, 0x0c, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x75, 0x0a,
	0x0c, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x14, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x40, 0x0a,
	0x0f, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x4f, 0x0a, 0x17, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x62, 0x66, 0x74, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66,
	0x74, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x62, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x62,
	0x66, 0x74, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x14, 0x70, 0x62,
	0x66, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x62, 0x66,
	0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0c, 0x53, 0x42, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x75, 0x0a, 0x0c, 0x53,
	0x42, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x22, 0x61, 0x0a, 0x14, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x62,
	0x66, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x62, 0x66, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x53, 0x42, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x67, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c,
	0x6c, 0x4f, 0x6b, 0x22, 0x79, 0x0a, 0x0e, 0x53, 0x42, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xb0,
	0x01, 0x0a, 0x16, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67,
	0x56, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x17, 0x70, 0x62, 0x66,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x62, 0x66, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0d, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74,
	0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x62,
	0x66, 0x74, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_isspb_isspb_proto_rawDescOnce sync.Once
	file_isspb_isspb_proto_rawDescData = file_isspb_isspb_proto_rawDesc
)

func file_isspb_isspb_proto_rawDescGZIP() []byte {
	file_isspb_isspb_proto_rawDescOnce.Do(func() {
		file_isspb_isspb_proto_rawDescData = protoimpl.X.CompressGZIP(file_isspb_isspb_proto_rawDescData)
	})
	return file_isspb_isspb_proto_rawDescData
}

var file_isspb_isspb_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_isspb_isspb_proto_goTypes = []interface{}{
	(*ISSMessage)(nil),                  // 0: isspb.ISSMessage
	(*RetransmitRequests)(nil),          // 1: isspb.RetransmitRequests
	(*SBMessage)(nil),                   // 2: isspb.SBMessage
	(*Checkpoint)(nil),                  // 3: isspb.Checkpoint
	(*SBInstanceMessage)(nil),           // 4: isspb.SBInstanceMessage
	(*ISSEvent)(nil),                    // 5: isspb.ISSEvent
	(*ISSHashOrigin)(nil),               // 6: isspb.ISSHashOrigin
	(*RequestHashOrigin)(nil),           // 7: isspb.RequestHashOrigin
	(*ISSSignOrigin)(nil),               // 8: isspb.ISSSignOrigin
	(*ISSSigVerOrigin)(nil),             // 9: isspb.ISSSigVerOrigin
	(*PersistCheckpoint)(nil),           // 10: isspb.PersistCheckpoint
	(*StableCheckpoint)(nil),            // 11: isspb.StableCheckpoint
	(*PersistStableCheckpoint)(nil),     // 12: isspb.PersistStableCheckpoint
	(*PushCheckpoint)(nil),              // 13: isspb.PushCheckpoint
	(*SBEvent)(nil),                     // 14: isspb.SBEvent
	(*SBInstanceEvent)(nil),             // 15: isspb.SBInstanceEvent
	(*SBInit)(nil),                      // 16: isspb.SBInit
	(*SBCertRequest)(nil),               // 17: isspb.SBCertRequest
	(*SBBatchReady)(nil),                // 18: isspb.SBBatchReady
	(*SBCertReady)(nil),                 // 19: isspb.SBCertReady
	(*SBDeliver)(nil),                   // 20: isspb.SBDeliver
	(*SBMessageReceived)(nil),           // 21: isspb.SBMessageReceived
	(*SBPendingRequests)(nil),           // 22: isspb.SBPendingRequests
	(*SBTick)(nil),                      // 23: isspb.SBTick
	(*SBHashRequest)(nil),               // 24: isspb.SBHashRequest
	(*SBHashResult)(nil),                // 25: isspb.SBHashResult
	(*SBHashOrigin)(nil),                // 26: isspb.SBHashOrigin
	(*SBInstanceHashOrigin)(nil),        // 27: isspb.SBInstanceHashOrigin
	(*SBSignResult)(nil),                // 28: isspb.SBSignResult
	(*SBSignOrigin)(nil),                // 29: isspb.SBSignOrigin
	(*SBInstanceSignOrigin)(nil),        // 30: isspb.SBInstanceSignOrigin
	(*SBNodeSigsVerified)(nil),          // 31: isspb.SBNodeSigsVerified
	(*SBSigVerOrigin)(nil),              // 32: isspb.SBSigVerOrigin
	(*SBInstanceSigVerOrigin)(nil),      // 33: isspb.SBInstanceSigVerOrigin
	nil,                                 // 34: isspb.StableCheckpoint.CertEntry
	(*requestpb.Request)(nil),           // 35: requestpb.Request
	(*isspbftpb.Preprepare)(nil),        // 36: isspbftpb.Preprepare
	(*isspbftpb.Prepare)(nil),           // 37: isspbftpb.Prepare
	(*isspbftpb.Commit)(nil),            // 38: isspbftpb.Commit
	(*isspbftpb.SignedViewChange)(nil),  // 39: isspbftpb.SignedViewChange
	(*isspbftpb.PreprepareRequest)(nil), // 40: isspbftpb.PreprepareRequest
	(*isspbftpb.NewView)(nil),           // 41: isspbftpb.NewView
	(*isspbftpb.Done)(nil),              // 42: isspbftpb.Done
	(*isspbftpb.CatchUpRequest)(nil),    // 43: isspbftpb.CatchUpRequest
	(*commonpb.StateSnapshot)(nil),      // 44: commonpb.StateSnapshot
	(*isspbftpb.VCSNTimeout)(nil),       // 45: isspbftpb.VCSNTimeout
	(*requestpb.Batch)(nil),             // 46: requestpb.Batch
	(*availabilitypb.Cert)(nil),         // 47: availabilitypb.Cert
	(*commonpb.HashData)(nil),           // 48: commonpb.HashData
	(*isspbftpb.ViewChange)(nil),        // 49: isspbftpb.ViewChange
}
var file_isspb_isspb_proto_depIdxs = []int32{
	2,  // 0: isspb.ISSMessage.sb:type_name -> isspb.SBMessage
	3,  // 1: isspb.ISSMessage.checkpoint:type_name -> isspb.Checkpoint
	11, // 2: isspb.ISSMessage.stable_checkpoint:type_name -> isspb.StableCheckpoint
	1,  // 3: isspb.ISSMessage.retransmit_requests:type_name -> isspb.RetransmitRequests
	35, // 4: isspb.RetransmitRequests.requests:type_name -> requestpb.Request
	4,  // 5: isspb.SBMessage.msg:type_name -> isspb.SBInstanceMessage
	36, // 6: isspb.SBInstanceMessage.pbft_preprepare:type_name -> isspbftpb.Preprepare
	37, // 7: isspb.SBInstanceMessage.pbft_prepare:type_name -> isspbftpb.Prepare
	38, // 8: isspb.SBInstanceMessage.pbft_commit:type_name -> isspbftpb.Commit
	39, // 9: isspb.SBInstanceMessage.pbft_signed_view_change:type_name -> isspbftpb.SignedViewChange
	40, // 10: isspb.SBInstanceMessage.pbft_preprepare_request:type_name -> isspbftpb.PreprepareRequest
	36, // 11: isspb.SBInstanceMessage.pbft_missing_preprepare:type_name -> isspbftpb.Preprepare
	41, // 12: isspb.SBInstanceMessage.pbft_new_view:type_name -> isspbftpb.NewView
	42, // 13: isspb.SBInstanceMessage.pbft_done:type_name -> isspbftpb.Done
	43, // 14: isspb.SBInstanceMessage.pbft_catch_up_request:type_name -> isspbftpb.CatchUpRequest
	36, // 15: isspb.SBInstanceMessage.pbft_catch_up_response:type_name -> isspbftpb.Preprepare
	10, // 16: isspb.ISSEvent.persist_checkpoint:type_name -> isspb.PersistCheckpoint
	11, // 17: isspb.ISSEvent.stable_checkpoint:type_name -> isspb.StableCheckpoint
	12, // 18: isspb.ISSEvent.persist_stable_checkpoint:type_name -> isspb.PersistStableCheckpoint
	14, // 19: isspb.ISSEvent.sb:type_name -> isspb.SBEvent
	13, // 20: isspb.ISSEvent.push_checkpoint:type_name -> isspb.PushCheckpoint
	26, // 21: isspb.ISSHashOrigin.sb:type_name -> isspb.SBHashOrigin
	7,  // 22: isspb.ISSHashOrigin.requests:type_name -> isspb.RequestHashOrigin
	35, // 23: isspb.RequestHashOrigin.requests:type_name -> requestpb.Request
	29, // 24: isspb.ISSSignOrigin.sb:type_name -> isspb.SBSignOrigin
	32, // 25: isspb.ISSSigVerOrigin.sb:type_name -> isspb.SBSigVerOrigin
	11, // 26: isspb.ISSSigVerOrigin.stable_checkpoint:type_name -> isspb.StableCheckpoint
	44, // 27: isspb.PersistCheckpoint.state_snapshot:type_name -> commonpb.StateSnapshot
	44, // 28: isspb.StableCheckpoint.snapshot:type_name -> commonpb.StateSnapshot
	34, // 29: isspb.StableCheckpoint.cert:type_name -> isspb.StableCheckpoint.CertEntry
	11, // 30: isspb.PersistStableCheckpoint.stable_checkpoint:type_name -> isspb.StableCheckpoint
	15, // 31: isspb.SBEvent.event:type_name -> isspb.SBInstanceEvent
	16, // 32: isspb.SBInstanceEvent.init:type_name -> isspb.SBInit
	20, // 33: isspb.SBInstanceEvent.deliver:type_name -> isspb.SBDeliver
	21, // 34: isspb.SBInstanceEvent.message_received:type_name -> isspb.SBMessageReceived
	22, // 35: isspb.SBInstanceEvent.pending_requests:type_name -> isspb.SBPendingRequests
	23, // 36: isspb.SBInstanceEvent.tick:type_name -> isspb.SBTick
	17, // 37: isspb.SBInstanceEvent.cert_request:type_name -> isspb.SBCertRequest
	18, // 38: isspb.SBInstanceEvent.batch_ready:type_name -> isspb.SBBatchReady
	19, // 39: isspb.SBInstanceEvent.cert_ready:type_name -> isspb.SBCertReady
	24, // 40: isspb.SBInstanceEvent.hash_request:type_name -> isspb.SBHashRequest
	25, // 41: isspb.SBInstanceEvent.hash_result:type_name -> isspb.SBHashResult
	28, // 42: isspb.SBInstanceEvent.sign_result:type_name -> isspb.SBSignResult
	31, // 43: isspb.SBInstanceEvent.node_sigs_verified:type_name -> isspb.SBNodeSigsVerified
	36, // 44: isspb.SBInstanceEvent.pbft_persist_preprepare:type_name -> isspbftpb.Preprepare
	37, // 45: isspb.SBInstanceEvent.pbft_persist_prepare:type_name -> isspbftpb.Prepare
	38, // 46: isspb.SBInstanceEvent.pbft_persist_commit:type_name -> isspbftpb.Commit
	39, // 47: isspb.SBInstanceEvent.pbft_persist_signed_view_change:type_name -> isspbftpb.SignedViewChange
	41, // 48: isspb.SBInstanceEvent.pbft_persist_new_view:type_name -> isspbftpb.NewView
	45, // 49: isspb.SBInstanceEvent.pbft_view_change_sn_timeout:type_name -> isspbftpb.VCSNTimeout
	46, // 50: isspb.SBBatchReady.batch:type_name -> requestpb.Batch
	47, // 51: isspb.SBCertReady.cert:type_name -> availabilitypb.Cert
	4,  // 52: isspb.SBMessageReceived.msg:type_name -> isspb.SBInstanceMessage
	48, // 53: isspb.SBHashRequest.data:type_name -> commonpb.HashData
	26, // 54: isspb.SBHashRequest.origin:type_name -> isspb.SBHashOrigin
	27, // 55: isspb.SBHashResult.origin:type_name -> isspb.SBInstanceHashOrigin
	27, // 56: isspb.SBHashOrigin.origin:type_name -> isspb.SBInstanceHashOrigin
	36, // 57: isspb.SBInstanceHashOrigin.pbft_preprepare:type_name -> isspbftpb.Preprepare
	36, // 58: isspb.SBInstanceHashOrigin.pbft_missing_preprepare:type_name -> isspbftpb.Preprepare
	41, // 59: isspb.SBInstanceHashOrigin.pbft_new_view:type_name -> isspbftpb.NewView
	36, // 60: isspb.SBInstanceHashOrigin.pbft_catch_up_response:type_name -> isspbftpb.Preprepare
	30, // 61: isspb.SBSignResult.origin:type_name -> isspb.SBInstanceSignOrigin
	30, // 62: isspb.SBSignOrigin.origin:type_name -> isspb.SBInstanceSignOrigin
	49, // 63: isspb.SBInstanceSignOrigin.pbft_view_change:type_name -> isspbftpb.ViewChange
	33, // 64: isspb.SBNodeSigsVerified.origin:type_name -> isspb.SBInstanceSigVerOrigin
	33, // 65: isspb.SBSigVerOrigin.origin:type_name -> isspb.SBInstanceSigVerOrigin
	39, // 66: isspb.SBInstanceSigVerOrigin.pbft_signed_view_change:type_name -> isspbftpb.SignedViewChange
	41, // 67: isspb.SBInstanceSigVerOrigin.pbft_new_view:type_name -> isspbftpb.NewView
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_isspb_isspb_proto_init() }
func file_isspb_isspb_proto_init() {
	if File_isspb_isspb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_isspb_isspb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetransmitRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSSignOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSSigVerOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StableCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistStableCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBBatchReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBCertReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBDeliver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBMessageReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBPendingRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBHashResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBSignResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBSignOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceSignOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBNodeSigsVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBSigVerOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceSigVerOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_isspb_isspb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ISSMessage_Sb)(nil),
		(*ISSMessage_Checkpoint)(nil),
		(*ISSMessage_StableCheckpoint)(nil),
		(*ISSMessage_RetransmitRequests)(nil),
	}
	file_isspb_isspb_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SBInstanceMessage_PbftPreprepare)(nil),
		(*SBInstanceMessage_PbftPrepare)(nil),
		(*SBInstanceMessage_PbftCommit)(nil),
		(*SBInstanceMessage_PbftSignedViewChange)(nil),
		(*SBInstanceMessage_PbftPreprepareRequest)(nil),
		(*SBInstanceMessage_PbftMissingPreprepare)(nil),
		(*SBInstanceMessage_PbftNewView)(nil),
		(*SBInstanceMessage_PbftDone)(nil),
		(*SBInstanceMessage_PbftCatchUpRequest)(nil),
		(*SBInstanceMessage_PbftCatchUpResponse)(nil),
	}
	file_isspb_isspb_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ISSEvent_PersistCheckpoint)(nil),
		(*ISSEvent_StableCheckpoint)(nil),
		(*ISSEvent_PersistStableCheckpoint)(nil),
		(*ISSEvent_Sb)(nil),
		(*ISSEvent_PushCheckpoint)(nil),
	}
	file_isspb_isspb_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ISSHashOrigin_Sb)(nil),
		(*ISSHashOrigin_LogEntrySn)(nil),
		(*ISSHashOrigin_StateSnapshotEpoch)(nil),
		(*ISSHashOrigin_Requests)(nil),
	}
	file_isspb_isspb_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ISSSignOrigin_Sb)(nil),
		(*ISSSignOrigin_CheckpointEpoch)(nil),
	}
	file_isspb_isspb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ISSSigVerOrigin_Sb)(nil),
		(*ISSSigVerOrigin_CheckpointEpoch)(nil),
		(*ISSSigVerOrigin_StableCheckpoint)(nil),
	}
	file_isspb_isspb_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SBInstanceEvent_Init)(nil),
		(*SBInstanceEvent_Deliver)(nil),
		(*SBInstanceEvent_MessageReceived)(nil),
		(*SBInstanceEvent_PendingRequests)(nil),
		(*SBInstanceEvent_Tick)(nil),
		(*SBInstanceEvent_CertRequest)(nil),
		(*SBInstanceEvent_BatchReady)(nil),
		(*SBInstanceEvent_CertReady)(nil),
		(*SBInstanceEvent_HashRequest)(nil),
		(*SBInstanceEvent_HashResult)(nil),
		(*SBInstanceEvent_SignResult)(nil),
		(*SBInstanceEvent_NodeSigsVerified)(nil),
		(*SBInstanceEvent_PbftPersistPreprepare)(nil),
		(*SBInstanceEvent_PbftPersistPrepare)(nil),
		(*SBInstanceEvent_PbftPersistCommit)(nil),
		(*SBInstanceEvent_PbftPersistSignedViewChange)(nil),
		(*SBInstanceEvent_PbftPersistNewView)(nil),
		(*SBInstanceEvent_PbftProposeTimeout)(nil),
		(*SBInstanceEvent_PbftViewChangeSnTimeout)(nil),
		(*SBInstanceEvent_PbftViewChangeSegTimeout)(nil),
	}
	file_isspb_isspb_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*SBInstanceHashOrigin_PbftPreprepare)(nil),
		(*SBInstanceHashOrigin_PbftMissingPreprepare)(nil),
		(*SBInstanceHashOrigin_PbftNewView)(nil),
		(*SBInstanceHashOrigin_PbftEmptyPreprepares)(nil),
		(*SBInstanceHashOrigin_PbftCatchUpResponse)(nil),
	}
	file_isspb_isspb_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SBInstanceSignOrigin_PbftViewChange)(nil),
	}
	file_isspb_isspb_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*SBInstanceSigVerOrigin_PbftSignedViewChange)(nil),
		(*SBInstanceSigVerOrigin_PbftNewView)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_isspb_isspb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_isspb_isspb_proto_goTypes,
		DependencyIndexes: file_isspb_isspb_proto_depIdxs,
		MessageInfos:      file_isspb_isspb_proto_msgTypes,
	}.Build()
	File_isspb_isspb_proto = out.File
	file_isspb_isspb_proto_rawDesc = nil
	file_isspb_isspb_proto_goTypes = nil
	file_isspb_isspb_proto_depIdxs = nil
}
