// Code generated by Mir codegen. DO NOT EDIT.

package chkpvalidatorpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	types "github.com/filecoin-project/mir/pkg/pb/checkpointpb/chkpvalidatorpb/types"
	types2 "github.com/filecoin-project/mir/pkg/pb/checkpointpb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/eventpb/types"
	types4 "github.com/filecoin-project/mir/pkg/pb/trantorpb/types"
	types3 "github.com/filecoin-project/mir/pkg/trantor/types"
)

// Module-specific dsl functions for processing events.

func UponEvent[W types.Event_TypeWrapper[Ev], Ev any](m dsl.Module, handler func(ev *Ev) error) {
	dsl.UponMirEvent[*types1.Event_ChkpValidator](m, func(ev *types.Event) error {
		w, ok := ev.Type.(W)
		if !ok {
			return nil
		}

		return handler(w.Unwrap())
	})
}

func UponValidateCheckpoint(m dsl.Module, handler func(checkpoint *types2.StableCheckpoint, epochNr types3.EpochNr, memberships []*types4.Membership, origin *types.ValidateChkpOrigin) error) {
	UponEvent[*types.Event_ValidateCheckpoint](m, func(ev *types.ValidateCheckpoint) error {
		return handler(ev.Checkpoint, ev.EpochNr, ev.Memberships, ev.Origin)
	})
}

func UponCheckpointValidated[C any](m dsl.Module, handler func(error error, context *C) error) {
	UponEvent[*types.Event_CheckpointValidated](m, func(ev *types.CheckpointValidated) error {
		originWrapper, ok := ev.Origin.Type.(*types.ValidateChkpOrigin_Dsl)
		if !ok {
			return nil
		}

		contextRaw := m.DslHandle().RecoverAndCleanupContext(dsl.ContextID(originWrapper.Dsl.ContextID))
		context, ok := contextRaw.(*C)
		if !ok {
			return nil
		}

		return handler(ev.Error, context)
	})
}
