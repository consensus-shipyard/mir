// Code generated by Mir codegen. DO NOT EDIT.

package chkpvalidatorpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	events "github.com/filecoin-project/mir/pkg/pb/checkpointpb/chkpvalidatorpb/events"
	types3 "github.com/filecoin-project/mir/pkg/pb/checkpointpb/chkpvalidatorpb/types"
	types "github.com/filecoin-project/mir/pkg/pb/checkpointpb/types"
	types2 "github.com/filecoin-project/mir/pkg/pb/trantorpb/types"
	types1 "github.com/filecoin-project/mir/pkg/trantor/types"
	stdtypes "github.com/filecoin-project/mir/stdtypes"
)

// Module-specific dsl functions for emitting events.

func ValidateCheckpoint[C any](m dsl.Module, destModule stdtypes.ModuleID, checkpoint *types.StableCheckpoint, epochNr types1.EpochNr, memberships []*types2.Membership, context *C) {
	contextID := m.DslHandle().StoreContext(context)

	origin := &types3.ValidateChkpOrigin{
		Module: m.ModuleID(),
		Type:   &types3.ValidateChkpOrigin_Dsl{Dsl: dsl.MirOrigin(contextID)},
	}

	dsl.EmitMirEvent(m, events.ValidateCheckpoint(destModule, checkpoint, epochNr, memberships, origin))
}

func CheckpointValidated(m dsl.Module, destModule stdtypes.ModuleID, error error, origin *types3.ValidateChkpOrigin) {
	dsl.EmitMirEvent(m, events.CheckpointValidated(destModule, error, origin))
}
