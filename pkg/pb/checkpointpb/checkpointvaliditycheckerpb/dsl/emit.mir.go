// Code generated by Mir codegen. DO NOT EDIT.

package checkpointvaliditycheckerpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	events "github.com/filecoin-project/mir/pkg/pb/checkpointpb/checkpointvaliditycheckerpb/events"
	types4 "github.com/filecoin-project/mir/pkg/pb/checkpointpb/checkpointvaliditycheckerpb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/checkpointpb/types"
	types3 "github.com/filecoin-project/mir/pkg/pb/trantorpb/types"
	types2 "github.com/filecoin-project/mir/pkg/trantor/types"
	types "github.com/filecoin-project/mir/pkg/types"
)

// Module-specific dsl functions for emitting events.

func ValidateCheckpoint[C any](m dsl.Module, destModule types.ModuleID, checkpoint *types1.StableCheckpoint, epochNr types2.EpochNr, memberships []*types3.Membership, context *C) {
	contextID := m.DslHandle().StoreContext(context)

	origin := &types4.ValidateChkpOrigin{
		Module: m.ModuleID(),
		Type:   &types4.ValidateChkpOrigin_Dsl{Dsl: dsl.MirOrigin(contextID)},
	}

	dsl.EmitMirEvent(m, events.ValidateCheckpoint(destModule, checkpoint, epochNr, memberships, origin))
}

func CheckpointValidated(m dsl.Module, destModule types.ModuleID, error error, origin *types4.ValidateChkpOrigin) {
	dsl.EmitMirEvent(m, events.CheckpointValidated(destModule, error, origin))
}
