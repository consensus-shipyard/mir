// Code generated by Mir codegen. DO NOT EDIT.

package pingpongpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	dsl1 "github.com/filecoin-project/mir/pkg/pb/messagepb/dsl"
	types1 "github.com/filecoin-project/mir/pkg/pb/messagepb/types"
	types "github.com/filecoin-project/mir/pkg/pb/pingpongpb/types"
	stdtypes "github.com/filecoin-project/mir/stdtypes"
)

// Module-specific dsl functions for processing net messages.

func UponMessageReceived[W types.Message_TypeWrapper[M], M any](m dsl.Module, handler func(from stdtypes.NodeID, msg *M) error) {
	dsl1.UponMessageReceived[*types1.Message_Pingpong](m, func(from stdtypes.NodeID, msg *types.Message) error {
		w, ok := msg.Type.(W)
		if !ok {
			return nil
		}

		return handler(from, w.Unwrap())
	})
}

func UponPingReceived(m dsl.Module, handler func(from stdtypes.NodeID, seqNr uint64) error) {
	UponMessageReceived[*types.Message_Ping](m, func(from stdtypes.NodeID, msg *types.Ping) error {
		return handler(from, msg.SeqNr)
	})
}

func UponPongReceived(m dsl.Module, handler func(from stdtypes.NodeID, seqNr uint64) error) {
	UponMessageReceived[*types.Message_Pong](m, func(from stdtypes.NodeID, msg *types.Pong) error {
		return handler(from, msg.SeqNr)
	})
}
