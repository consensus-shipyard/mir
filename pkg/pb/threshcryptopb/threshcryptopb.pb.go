// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: threshcryptopb/threshcryptopb.proto

package threshcryptopb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	contextstorepb "github.com/filecoin-project/mir/pkg/pb/contextstorepb"
	dslpb "github.com/filecoin-project/mir/pkg/pb/dslpb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Event_SignShare
	//	*Event_SignShareResult
	//	*Event_VerifyShare
	//	*Event_VerifyShareResult
	//	*Event_VerifyFull
	//	*Event_VerifyFullResult
	//	*Event_Recover
	//	*Event_RecoverResult
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetSignShare() *SignShare {
	if x, ok := x.GetType().(*Event_SignShare); ok {
		return x.SignShare
	}
	return nil
}

func (x *Event) GetSignShareResult() *SignShareResult {
	if x, ok := x.GetType().(*Event_SignShareResult); ok {
		return x.SignShareResult
	}
	return nil
}

func (x *Event) GetVerifyShare() *VerifyShare {
	if x, ok := x.GetType().(*Event_VerifyShare); ok {
		return x.VerifyShare
	}
	return nil
}

func (x *Event) GetVerifyShareResult() *VerifyShareResult {
	if x, ok := x.GetType().(*Event_VerifyShareResult); ok {
		return x.VerifyShareResult
	}
	return nil
}

func (x *Event) GetVerifyFull() *VerifyFull {
	if x, ok := x.GetType().(*Event_VerifyFull); ok {
		return x.VerifyFull
	}
	return nil
}

func (x *Event) GetVerifyFullResult() *VerifyFullResult {
	if x, ok := x.GetType().(*Event_VerifyFullResult); ok {
		return x.VerifyFullResult
	}
	return nil
}

func (x *Event) GetRecover() *Recover {
	if x, ok := x.GetType().(*Event_Recover); ok {
		return x.Recover
	}
	return nil
}

func (x *Event) GetRecoverResult() *RecoverResult {
	if x, ok := x.GetType().(*Event_RecoverResult); ok {
		return x.RecoverResult
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_SignShare struct {
	SignShare *SignShare `protobuf:"bytes,1,opt,name=sign_share,json=signShare,proto3,oneof"`
}

type Event_SignShareResult struct {
	SignShareResult *SignShareResult `protobuf:"bytes,2,opt,name=sign_share_result,json=signShareResult,proto3,oneof"`
}

type Event_VerifyShare struct {
	VerifyShare *VerifyShare `protobuf:"bytes,3,opt,name=verify_share,json=verifyShare,proto3,oneof"`
}

type Event_VerifyShareResult struct {
	VerifyShareResult *VerifyShareResult `protobuf:"bytes,4,opt,name=verify_share_result,json=verifyShareResult,proto3,oneof"`
}

type Event_VerifyFull struct {
	VerifyFull *VerifyFull `protobuf:"bytes,5,opt,name=verify_full,json=verifyFull,proto3,oneof"`
}

type Event_VerifyFullResult struct {
	VerifyFullResult *VerifyFullResult `protobuf:"bytes,6,opt,name=verify_full_result,json=verifyFullResult,proto3,oneof"`
}

type Event_Recover struct {
	Recover *Recover `protobuf:"bytes,7,opt,name=recover,proto3,oneof"`
}

type Event_RecoverResult struct {
	RecoverResult *RecoverResult `protobuf:"bytes,8,opt,name=recover_result,json=recoverResult,proto3,oneof"`
}

func (*Event_SignShare) isEvent_Type() {}

func (*Event_SignShareResult) isEvent_Type() {}

func (*Event_VerifyShare) isEvent_Type() {}

func (*Event_VerifyShareResult) isEvent_Type() {}

func (*Event_VerifyFull) isEvent_Type() {}

func (*Event_VerifyFullResult) isEvent_Type() {}

func (*Event_Recover) isEvent_Type() {}

func (*Event_RecoverResult) isEvent_Type() {}

type SignShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   [][]byte         `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Origin *SignShareOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SignShare) Reset() {
	*x = SignShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignShare) ProtoMessage() {}

func (x *SignShare) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignShare.ProtoReflect.Descriptor instead.
func (*SignShare) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{1}
}

func (x *SignShare) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignShare) GetOrigin() *SignShareOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SignShareResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureShare []byte           `protobuf:"bytes,1,opt,name=signature_share,json=signatureShare,proto3" json:"signature_share,omitempty"`
	Origin         *SignShareOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SignShareResult) Reset() {
	*x = SignShareResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignShareResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignShareResult) ProtoMessage() {}

func (x *SignShareResult) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignShareResult.ProtoReflect.Descriptor instead.
func (*SignShareResult) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{2}
}

func (x *SignShareResult) GetSignatureShare() []byte {
	if x != nil {
		return x.SignatureShare
	}
	return nil
}

func (x *SignShareResult) GetOrigin() *SignShareOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SignShareOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*SignShareOrigin_ContextStore
	//	*SignShareOrigin_Dsl
	Type isSignShareOrigin_Type `protobuf_oneof:"type"`
}

func (x *SignShareOrigin) Reset() {
	*x = SignShareOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignShareOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignShareOrigin) ProtoMessage() {}

func (x *SignShareOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignShareOrigin.ProtoReflect.Descriptor instead.
func (*SignShareOrigin) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{3}
}

func (x *SignShareOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *SignShareOrigin) GetType() isSignShareOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SignShareOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*SignShareOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *SignShareOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*SignShareOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isSignShareOrigin_Type interface {
	isSignShareOrigin_Type()
}

type SignShareOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type SignShareOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*SignShareOrigin_ContextStore) isSignShareOrigin_Type() {}

func (*SignShareOrigin_Dsl) isSignShareOrigin_Type() {}

type VerifyShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           [][]byte           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	SignatureShare []byte             `protobuf:"bytes,2,opt,name=signature_share,json=signatureShare,proto3" json:"signature_share,omitempty"`
	NodeId         string             `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Origin         *VerifyShareOrigin `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyShare) Reset() {
	*x = VerifyShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyShare) ProtoMessage() {}

func (x *VerifyShare) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyShare.ProtoReflect.Descriptor instead.
func (*VerifyShare) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyShare) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VerifyShare) GetSignatureShare() []byte {
	if x != nil {
		return x.SignatureShare
	}
	return nil
}

func (x *VerifyShare) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *VerifyShare) GetOrigin() *VerifyShareOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type VerifyShareResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error  string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Origin *VerifyShareOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyShareResult) Reset() {
	*x = VerifyShareResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyShareResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyShareResult) ProtoMessage() {}

func (x *VerifyShareResult) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyShareResult.ProtoReflect.Descriptor instead.
func (*VerifyShareResult) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyShareResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *VerifyShareResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VerifyShareResult) GetOrigin() *VerifyShareOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type VerifyShareOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*VerifyShareOrigin_ContextStore
	//	*VerifyShareOrigin_Dsl
	Type isVerifyShareOrigin_Type `protobuf_oneof:"type"`
}

func (x *VerifyShareOrigin) Reset() {
	*x = VerifyShareOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyShareOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyShareOrigin) ProtoMessage() {}

func (x *VerifyShareOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyShareOrigin.ProtoReflect.Descriptor instead.
func (*VerifyShareOrigin) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyShareOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *VerifyShareOrigin) GetType() isVerifyShareOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VerifyShareOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*VerifyShareOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *VerifyShareOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*VerifyShareOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isVerifyShareOrigin_Type interface {
	isVerifyShareOrigin_Type()
}

type VerifyShareOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type VerifyShareOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*VerifyShareOrigin_ContextStore) isVerifyShareOrigin_Type() {}

func (*VerifyShareOrigin_Dsl) isVerifyShareOrigin_Type() {}

type VerifyFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          [][]byte          `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	FullSignature []byte            `protobuf:"bytes,2,opt,name=full_signature,json=fullSignature,proto3" json:"full_signature,omitempty"`
	Origin        *VerifyFullOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyFull) Reset() {
	*x = VerifyFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFull) ProtoMessage() {}

func (x *VerifyFull) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFull.ProtoReflect.Descriptor instead.
func (*VerifyFull) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyFull) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VerifyFull) GetFullSignature() []byte {
	if x != nil {
		return x.FullSignature
	}
	return nil
}

func (x *VerifyFull) GetOrigin() *VerifyFullOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type VerifyFullResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error  string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Origin *VerifyFullOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyFullResult) Reset() {
	*x = VerifyFullResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyFullResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFullResult) ProtoMessage() {}

func (x *VerifyFullResult) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFullResult.ProtoReflect.Descriptor instead.
func (*VerifyFullResult) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyFullResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *VerifyFullResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VerifyFullResult) GetOrigin() *VerifyFullOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type VerifyFullOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*VerifyFullOrigin_ContextStore
	//	*VerifyFullOrigin_Dsl
	Type isVerifyFullOrigin_Type `protobuf_oneof:"type"`
}

func (x *VerifyFullOrigin) Reset() {
	*x = VerifyFullOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyFullOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFullOrigin) ProtoMessage() {}

func (x *VerifyFullOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFullOrigin.ProtoReflect.Descriptor instead.
func (*VerifyFullOrigin) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyFullOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *VerifyFullOrigin) GetType() isVerifyFullOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VerifyFullOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*VerifyFullOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *VerifyFullOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*VerifyFullOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isVerifyFullOrigin_Type interface {
	isVerifyFullOrigin_Type()
}

type VerifyFullOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type VerifyFullOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*VerifyFullOrigin_ContextStore) isVerifyFullOrigin_Type() {}

func (*VerifyFullOrigin_Dsl) isVerifyFullOrigin_Type() {}

type Recover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data            [][]byte       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	SignatureShares [][]byte       `protobuf:"bytes,2,rep,name=signature_shares,json=signatureShares,proto3" json:"signature_shares,omitempty"`
	Origin          *RecoverOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *Recover) Reset() {
	*x = Recover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recover) ProtoMessage() {}

func (x *Recover) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recover.ProtoReflect.Descriptor instead.
func (*Recover) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{10}
}

func (x *Recover) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Recover) GetSignatureShares() [][]byte {
	if x != nil {
		return x.SignatureShares
	}
	return nil
}

func (x *Recover) GetOrigin() *RecoverOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type RecoverResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullSignature []byte         `protobuf:"bytes,1,opt,name=full_signature,json=fullSignature,proto3" json:"full_signature,omitempty"`
	Ok            bool           `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Error         string         `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Origin        *RecoverOrigin `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RecoverResult) Reset() {
	*x = RecoverResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverResult) ProtoMessage() {}

func (x *RecoverResult) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverResult.ProtoReflect.Descriptor instead.
func (*RecoverResult) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{11}
}

func (x *RecoverResult) GetFullSignature() []byte {
	if x != nil {
		return x.FullSignature
	}
	return nil
}

func (x *RecoverResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RecoverResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RecoverResult) GetOrigin() *RecoverOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type RecoverOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RecoverOrigin_ContextStore
	//	*RecoverOrigin_Dsl
	Type isRecoverOrigin_Type `protobuf_oneof:"type"`
}

func (x *RecoverOrigin) Reset() {
	*x = RecoverOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverOrigin) ProtoMessage() {}

func (x *RecoverOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_threshcryptopb_threshcryptopb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverOrigin.ProtoReflect.Descriptor instead.
func (*RecoverOrigin) Descriptor() ([]byte, []int) {
	return file_threshcryptopb_threshcryptopb_proto_rawDescGZIP(), []int{12}
}

func (x *RecoverOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RecoverOrigin) GetType() isRecoverOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RecoverOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RecoverOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RecoverOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RecoverOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRecoverOrigin_Type interface {
	isRecoverOrigin_Type()
}

type RecoverOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RecoverOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RecoverOrigin_ContextStore) isRecoverOrigin_Type() {}

func (*RecoverOrigin_Dsl) isRecoverOrigin_Type() {}

var File_threshcryptopb_threshcryptopb_proto protoreflect.FileDescriptor

var file_threshcryptopb_threshcryptopb_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62,
	0x2f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x70, 0x62, 0x1a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x73, 0x6c, 0x70,
	0x62, 0x2f, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d,
	0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x04, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x40, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x04, 0x90, 0xa6, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x64, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d,
	0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22,
	0x7f, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6,
	0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0x82, 0xa6, 0x1d, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64,
	0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x75, 0x6c,
	0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6,
	0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0x7e, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0, 0xa6,
	0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0xd2, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42,
	0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98,
	0xa6, 0x1d, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66,
	0x75, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a,
	0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x62, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_threshcryptopb_threshcryptopb_proto_rawDescOnce sync.Once
	file_threshcryptopb_threshcryptopb_proto_rawDescData = file_threshcryptopb_threshcryptopb_proto_rawDesc
)

func file_threshcryptopb_threshcryptopb_proto_rawDescGZIP() []byte {
	file_threshcryptopb_threshcryptopb_proto_rawDescOnce.Do(func() {
		file_threshcryptopb_threshcryptopb_proto_rawDescData = protoimpl.X.CompressGZIP(file_threshcryptopb_threshcryptopb_proto_rawDescData)
	})
	return file_threshcryptopb_threshcryptopb_proto_rawDescData
}

var file_threshcryptopb_threshcryptopb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_threshcryptopb_threshcryptopb_proto_goTypes = []interface{}{
	(*Event)(nil),                 // 0: threshcryptopb.Event
	(*SignShare)(nil),             // 1: threshcryptopb.SignShare
	(*SignShareResult)(nil),       // 2: threshcryptopb.SignShareResult
	(*SignShareOrigin)(nil),       // 3: threshcryptopb.SignShareOrigin
	(*VerifyShare)(nil),           // 4: threshcryptopb.VerifyShare
	(*VerifyShareResult)(nil),     // 5: threshcryptopb.VerifyShareResult
	(*VerifyShareOrigin)(nil),     // 6: threshcryptopb.VerifyShareOrigin
	(*VerifyFull)(nil),            // 7: threshcryptopb.VerifyFull
	(*VerifyFullResult)(nil),      // 8: threshcryptopb.VerifyFullResult
	(*VerifyFullOrigin)(nil),      // 9: threshcryptopb.VerifyFullOrigin
	(*Recover)(nil),               // 10: threshcryptopb.Recover
	(*RecoverResult)(nil),         // 11: threshcryptopb.RecoverResult
	(*RecoverOrigin)(nil),         // 12: threshcryptopb.RecoverOrigin
	(*contextstorepb.Origin)(nil), // 13: contextstorepb.Origin
	(*dslpb.Origin)(nil),          // 14: dslpb.Origin
}
var file_threshcryptopb_threshcryptopb_proto_depIdxs = []int32{
	1,  // 0: threshcryptopb.Event.sign_share:type_name -> threshcryptopb.SignShare
	2,  // 1: threshcryptopb.Event.sign_share_result:type_name -> threshcryptopb.SignShareResult
	4,  // 2: threshcryptopb.Event.verify_share:type_name -> threshcryptopb.VerifyShare
	5,  // 3: threshcryptopb.Event.verify_share_result:type_name -> threshcryptopb.VerifyShareResult
	7,  // 4: threshcryptopb.Event.verify_full:type_name -> threshcryptopb.VerifyFull
	8,  // 5: threshcryptopb.Event.verify_full_result:type_name -> threshcryptopb.VerifyFullResult
	10, // 6: threshcryptopb.Event.recover:type_name -> threshcryptopb.Recover
	11, // 7: threshcryptopb.Event.recover_result:type_name -> threshcryptopb.RecoverResult
	3,  // 8: threshcryptopb.SignShare.origin:type_name -> threshcryptopb.SignShareOrigin
	3,  // 9: threshcryptopb.SignShareResult.origin:type_name -> threshcryptopb.SignShareOrigin
	13, // 10: threshcryptopb.SignShareOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 11: threshcryptopb.SignShareOrigin.dsl:type_name -> dslpb.Origin
	6,  // 12: threshcryptopb.VerifyShare.origin:type_name -> threshcryptopb.VerifyShareOrigin
	6,  // 13: threshcryptopb.VerifyShareResult.origin:type_name -> threshcryptopb.VerifyShareOrigin
	13, // 14: threshcryptopb.VerifyShareOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 15: threshcryptopb.VerifyShareOrigin.dsl:type_name -> dslpb.Origin
	9,  // 16: threshcryptopb.VerifyFull.origin:type_name -> threshcryptopb.VerifyFullOrigin
	9,  // 17: threshcryptopb.VerifyFullResult.origin:type_name -> threshcryptopb.VerifyFullOrigin
	13, // 18: threshcryptopb.VerifyFullOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 19: threshcryptopb.VerifyFullOrigin.dsl:type_name -> dslpb.Origin
	12, // 20: threshcryptopb.Recover.origin:type_name -> threshcryptopb.RecoverOrigin
	12, // 21: threshcryptopb.RecoverResult.origin:type_name -> threshcryptopb.RecoverOrigin
	13, // 22: threshcryptopb.RecoverOrigin.context_store:type_name -> contextstorepb.Origin
	14, // 23: threshcryptopb.RecoverOrigin.dsl:type_name -> dslpb.Origin
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_threshcryptopb_threshcryptopb_proto_init() }
func file_threshcryptopb_threshcryptopb_proto_init() {
	if File_threshcryptopb_threshcryptopb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_threshcryptopb_threshcryptopb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignShareResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignShareOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyShareResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyShareOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyFullResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyFullOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_threshcryptopb_threshcryptopb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_threshcryptopb_threshcryptopb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_SignShare)(nil),
		(*Event_SignShareResult)(nil),
		(*Event_VerifyShare)(nil),
		(*Event_VerifyShareResult)(nil),
		(*Event_VerifyFull)(nil),
		(*Event_VerifyFullResult)(nil),
		(*Event_Recover)(nil),
		(*Event_RecoverResult)(nil),
	}
	file_threshcryptopb_threshcryptopb_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SignShareOrigin_ContextStore)(nil),
		(*SignShareOrigin_Dsl)(nil),
	}
	file_threshcryptopb_threshcryptopb_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*VerifyShareOrigin_ContextStore)(nil),
		(*VerifyShareOrigin_Dsl)(nil),
	}
	file_threshcryptopb_threshcryptopb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*VerifyFullOrigin_ContextStore)(nil),
		(*VerifyFullOrigin_Dsl)(nil),
	}
	file_threshcryptopb_threshcryptopb_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RecoverOrigin_ContextStore)(nil),
		(*RecoverOrigin_Dsl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_threshcryptopb_threshcryptopb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_threshcryptopb_threshcryptopb_proto_goTypes,
		DependencyIndexes: file_threshcryptopb_threshcryptopb_proto_depIdxs,
		MessageInfos:      file_threshcryptopb_threshcryptopb_proto_msgTypes,
	}.Build()
	File_threshcryptopb_threshcryptopb_proto = out.File
	file_threshcryptopb_threshcryptopb_proto_rawDesc = nil
	file_threshcryptopb_threshcryptopb_proto_goTypes = nil
	file_threshcryptopb_threshcryptopb_proto_depIdxs = nil
}
