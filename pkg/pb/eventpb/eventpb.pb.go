//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: eventpb/eventpb.proto

package eventpb

import (
	availabilitypb "github.com/filecoin-project/mir/pkg/pb/availabilitypb"
	batchdbpb "github.com/filecoin-project/mir/pkg/pb/availabilitypb/batchdbpb"
	batchfetcherpb "github.com/filecoin-project/mir/pkg/pb/batchfetcherpb"
	bcbpb "github.com/filecoin-project/mir/pkg/pb/bcbpb"
	checkpointpb "github.com/filecoin-project/mir/pkg/pb/checkpointpb"
	commonpb "github.com/filecoin-project/mir/pkg/pb/commonpb"
	contextstorepb "github.com/filecoin-project/mir/pkg/pb/contextstorepb"
	dslpb "github.com/filecoin-project/mir/pkg/pb/dslpb"
	factorypb "github.com/filecoin-project/mir/pkg/pb/factorypb"
	hasherpb "github.com/filecoin-project/mir/pkg/pb/hasherpb"
	isspb "github.com/filecoin-project/mir/pkg/pb/isspb"
	mempoolpb "github.com/filecoin-project/mir/pkg/pb/mempoolpb"
	messagepb "github.com/filecoin-project/mir/pkg/pb/messagepb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	ordererpb "github.com/filecoin-project/mir/pkg/pb/ordererpb"
	pingpongpb "github.com/filecoin-project/mir/pkg/pb/pingpongpb"
	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
	threshcryptopb "github.com/filecoin-project/mir/pkg/pb/threshcryptopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event represents a state event to be injected into the state machine
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO, normalize naming, for instance Complete/Completed
	//
	// Types that are assignable to Type:
	//	*Event_Init
	//	*Event_Timer
	//	*Event_Hasher
	//	*Event_Bcb
	//	*Event_Mempool
	//	*Event_Availability
	//	*Event_BatchDb
	//	*Event_BatchFetcher
	//	*Event_ThreshCrypto
	//	*Event_PingPong
	//	*Event_Checkpoint
	//	*Event_Factory
	//	*Event_Iss
	//	*Event_Orderer
	//	*Event_NewRequests
	//	*Event_SignRequest
	//	*Event_SignResult
	//	*Event_VerifyNodeSigs
	//	*Event_NodeSigsVerified
	//	*Event_SendMessage
	//	*Event_MessageReceived
	//	*Event_DeliverCert
	//	*Event_VerifyRequestSig
	//	*Event_RequestSigVerified
	//	*Event_StoreVerifiedRequest
	//	*Event_AppSnapshotRequest
	//	*Event_AppSnapshot
	//	*Event_AppRestoreState
	//	*Event_NewEpoch
	//	*Event_NewConfig
	//	*Event_TestingString
	//	*Event_TestingUint
	Type isEvent_Type `protobuf_oneof:"type"`
	// A list of follow-up events to process after this event has been processed.
	// This field is used if events need to be processed in a particular order.
	// For example, a message sending event must only be processed
	// after the corresponding entry has been persisted in the write-ahead log (WAL).
	// In this case, the WAL append event would be this event
	// and the next field would contain the message sending event.
	// (This is a hypothetical example, the WAL functionality is not implemented at a moment.)
	Next       []*Event `protobuf:"bytes,100,rep,name=next,proto3" json:"next,omitempty"`
	DestModule string   `protobuf:"bytes,200,opt,name=dest_module,json=destModule,proto3" json:"dest_module,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetInit() *Init {
	if x, ok := x.GetType().(*Event_Init); ok {
		return x.Init
	}
	return nil
}

func (x *Event) GetTimer() *TimerEvent {
	if x, ok := x.GetType().(*Event_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Event) GetHasher() *hasherpb.Event {
	if x, ok := x.GetType().(*Event_Hasher); ok {
		return x.Hasher
	}
	return nil
}

func (x *Event) GetBcb() *bcbpb.Event {
	if x, ok := x.GetType().(*Event_Bcb); ok {
		return x.Bcb
	}
	return nil
}

func (x *Event) GetMempool() *mempoolpb.Event {
	if x, ok := x.GetType().(*Event_Mempool); ok {
		return x.Mempool
	}
	return nil
}

func (x *Event) GetAvailability() *availabilitypb.Event {
	if x, ok := x.GetType().(*Event_Availability); ok {
		return x.Availability
	}
	return nil
}

func (x *Event) GetBatchDb() *batchdbpb.Event {
	if x, ok := x.GetType().(*Event_BatchDb); ok {
		return x.BatchDb
	}
	return nil
}

func (x *Event) GetBatchFetcher() *batchfetcherpb.Event {
	if x, ok := x.GetType().(*Event_BatchFetcher); ok {
		return x.BatchFetcher
	}
	return nil
}

func (x *Event) GetThreshCrypto() *threshcryptopb.Event {
	if x, ok := x.GetType().(*Event_ThreshCrypto); ok {
		return x.ThreshCrypto
	}
	return nil
}

func (x *Event) GetPingPong() *pingpongpb.Event {
	if x, ok := x.GetType().(*Event_PingPong); ok {
		return x.PingPong
	}
	return nil
}

func (x *Event) GetCheckpoint() *checkpointpb.Event {
	if x, ok := x.GetType().(*Event_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *Event) GetFactory() *factorypb.Event {
	if x, ok := x.GetType().(*Event_Factory); ok {
		return x.Factory
	}
	return nil
}

func (x *Event) GetIss() *isspb.Event {
	if x, ok := x.GetType().(*Event_Iss); ok {
		return x.Iss
	}
	return nil
}

func (x *Event) GetOrderer() *ordererpb.Event {
	if x, ok := x.GetType().(*Event_Orderer); ok {
		return x.Orderer
	}
	return nil
}

func (x *Event) GetNewRequests() *NewRequests {
	if x, ok := x.GetType().(*Event_NewRequests); ok {
		return x.NewRequests
	}
	return nil
}

func (x *Event) GetSignRequest() *SignRequest {
	if x, ok := x.GetType().(*Event_SignRequest); ok {
		return x.SignRequest
	}
	return nil
}

func (x *Event) GetSignResult() *SignResult {
	if x, ok := x.GetType().(*Event_SignResult); ok {
		return x.SignResult
	}
	return nil
}

func (x *Event) GetVerifyNodeSigs() *VerifyNodeSigs {
	if x, ok := x.GetType().(*Event_VerifyNodeSigs); ok {
		return x.VerifyNodeSigs
	}
	return nil
}

func (x *Event) GetNodeSigsVerified() *NodeSigsVerified {
	if x, ok := x.GetType().(*Event_NodeSigsVerified); ok {
		return x.NodeSigsVerified
	}
	return nil
}

func (x *Event) GetSendMessage() *SendMessage {
	if x, ok := x.GetType().(*Event_SendMessage); ok {
		return x.SendMessage
	}
	return nil
}

func (x *Event) GetMessageReceived() *MessageReceived {
	if x, ok := x.GetType().(*Event_MessageReceived); ok {
		return x.MessageReceived
	}
	return nil
}

func (x *Event) GetDeliverCert() *DeliverCert {
	if x, ok := x.GetType().(*Event_DeliverCert); ok {
		return x.DeliverCert
	}
	return nil
}

func (x *Event) GetVerifyRequestSig() *VerifyRequestSig {
	if x, ok := x.GetType().(*Event_VerifyRequestSig); ok {
		return x.VerifyRequestSig
	}
	return nil
}

func (x *Event) GetRequestSigVerified() *RequestSigVerified {
	if x, ok := x.GetType().(*Event_RequestSigVerified); ok {
		return x.RequestSigVerified
	}
	return nil
}

func (x *Event) GetStoreVerifiedRequest() *StoreVerifiedRequest {
	if x, ok := x.GetType().(*Event_StoreVerifiedRequest); ok {
		return x.StoreVerifiedRequest
	}
	return nil
}

func (x *Event) GetAppSnapshotRequest() *AppSnapshotRequest {
	if x, ok := x.GetType().(*Event_AppSnapshotRequest); ok {
		return x.AppSnapshotRequest
	}
	return nil
}

func (x *Event) GetAppSnapshot() *AppSnapshot {
	if x, ok := x.GetType().(*Event_AppSnapshot); ok {
		return x.AppSnapshot
	}
	return nil
}

func (x *Event) GetAppRestoreState() *AppRestoreState {
	if x, ok := x.GetType().(*Event_AppRestoreState); ok {
		return x.AppRestoreState
	}
	return nil
}

func (x *Event) GetNewEpoch() *NewEpoch {
	if x, ok := x.GetType().(*Event_NewEpoch); ok {
		return x.NewEpoch
	}
	return nil
}

func (x *Event) GetNewConfig() *NewConfig {
	if x, ok := x.GetType().(*Event_NewConfig); ok {
		return x.NewConfig
	}
	return nil
}

func (x *Event) GetTestingString() *wrapperspb.StringValue {
	if x, ok := x.GetType().(*Event_TestingString); ok {
		return x.TestingString
	}
	return nil
}

func (x *Event) GetTestingUint() *wrapperspb.UInt64Value {
	if x, ok := x.GetType().(*Event_TestingUint); ok {
		return x.TestingUint
	}
	return nil
}

func (x *Event) GetNext() []*Event {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *Event) GetDestModule() string {
	if x != nil {
		return x.DestModule
	}
	return ""
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Init struct {
	Init *Init `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type Event_Timer struct {
	Timer *TimerEvent `protobuf:"bytes,2,opt,name=timer,proto3,oneof"` // Timer events must be defined in this file, see below.
}

type Event_Hasher struct {
	Hasher *hasherpb.Event `protobuf:"bytes,8,opt,name=hasher,proto3,oneof"`
}

type Event_Bcb struct {
	Bcb *bcbpb.Event `protobuf:"bytes,28,opt,name=bcb,proto3,oneof"`
}

type Event_Mempool struct {
	Mempool *mempoolpb.Event `protobuf:"bytes,29,opt,name=mempool,proto3,oneof"`
}

type Event_Availability struct {
	Availability *availabilitypb.Event `protobuf:"bytes,30,opt,name=availability,proto3,oneof"`
}

type Event_BatchDb struct {
	BatchDb *batchdbpb.Event `protobuf:"bytes,34,opt,name=batch_db,json=batchDb,proto3,oneof"`
}

type Event_BatchFetcher struct {
	BatchFetcher *batchfetcherpb.Event `protobuf:"bytes,35,opt,name=batch_fetcher,json=batchFetcher,proto3,oneof"`
}

type Event_ThreshCrypto struct {
	ThreshCrypto *threshcryptopb.Event `protobuf:"bytes,36,opt,name=thresh_crypto,json=threshCrypto,proto3,oneof"`
}

type Event_PingPong struct {
	PingPong *pingpongpb.Event `protobuf:"bytes,37,opt,name=ping_pong,json=pingPong,proto3,oneof"`
}

type Event_Checkpoint struct {
	Checkpoint *checkpointpb.Event `protobuf:"bytes,38,opt,name=checkpoint,proto3,oneof"`
}

type Event_Factory struct {
	Factory *factorypb.Event `protobuf:"bytes,33,opt,name=factory,proto3,oneof"`
}

type Event_Iss struct {
	Iss *isspb.Event `protobuf:"bytes,18,opt,name=iss,proto3,oneof"`
}

type Event_Orderer struct {
	Orderer *ordererpb.Event `protobuf:"bytes,39,opt,name=orderer,proto3,oneof"`
}

type Event_NewRequests struct {
	NewRequests *NewRequests `protobuf:"bytes,7,opt,name=new_requests,json=newRequests,proto3,oneof"`
}

type Event_SignRequest struct {
	SignRequest *SignRequest `protobuf:"bytes,10,opt,name=sign_request,json=signRequest,proto3,oneof"`
}

type Event_SignResult struct {
	SignResult *SignResult `protobuf:"bytes,11,opt,name=sign_result,json=signResult,proto3,oneof"`
}

type Event_VerifyNodeSigs struct {
	VerifyNodeSigs *VerifyNodeSigs `protobuf:"bytes,12,opt,name=verify_node_sigs,json=verifyNodeSigs,proto3,oneof"`
}

type Event_NodeSigsVerified struct {
	NodeSigsVerified *NodeSigsVerified `protobuf:"bytes,13,opt,name=node_sigs_verified,json=nodeSigsVerified,proto3,oneof"`
}

type Event_SendMessage struct {
	SendMessage *SendMessage `protobuf:"bytes,15,opt,name=send_message,json=sendMessage,proto3,oneof"`
}

type Event_MessageReceived struct {
	MessageReceived *MessageReceived `protobuf:"bytes,16,opt,name=message_received,json=messageReceived,proto3,oneof"`
}

type Event_DeliverCert struct {
	DeliverCert *DeliverCert `protobuf:"bytes,17,opt,name=deliver_cert,json=deliverCert,proto3,oneof"`
}

type Event_VerifyRequestSig struct {
	VerifyRequestSig *VerifyRequestSig `protobuf:"bytes,19,opt,name=verify_request_sig,json=verifyRequestSig,proto3,oneof"`
}

type Event_RequestSigVerified struct {
	RequestSigVerified *RequestSigVerified `protobuf:"bytes,20,opt,name=request_sig_verified,json=requestSigVerified,proto3,oneof"`
}

type Event_StoreVerifiedRequest struct {
	StoreVerifiedRequest *StoreVerifiedRequest `protobuf:"bytes,21,opt,name=store_verified_request,json=storeVerifiedRequest,proto3,oneof"`
}

type Event_AppSnapshotRequest struct {
	AppSnapshotRequest *AppSnapshotRequest `protobuf:"bytes,22,opt,name=app_snapshot_request,json=appSnapshotRequest,proto3,oneof"`
}

type Event_AppSnapshot struct {
	AppSnapshot *AppSnapshot `protobuf:"bytes,23,opt,name=app_snapshot,json=appSnapshot,proto3,oneof"`
}

type Event_AppRestoreState struct {
	AppRestoreState *AppRestoreState `protobuf:"bytes,24,opt,name=app_restore_state,json=appRestoreState,proto3,oneof"`
}

type Event_NewEpoch struct {
	NewEpoch *NewEpoch `protobuf:"bytes,31,opt,name=new_epoch,json=newEpoch,proto3,oneof"`
}

type Event_NewConfig struct {
	NewConfig *NewConfig `protobuf:"bytes,32,opt,name=new_config,json=newConfig,proto3,oneof"`
}

type Event_TestingString struct {
	// for unit-tests
	TestingString *wrapperspb.StringValue `protobuf:"bytes,301,opt,name=testingString,proto3,oneof"`
}

type Event_TestingUint struct {
	TestingUint *wrapperspb.UInt64Value `protobuf:"bytes,302,opt,name=testingUint,proto3,oneof"`
}

func (*Event_Init) isEvent_Type() {}

func (*Event_Timer) isEvent_Type() {}

func (*Event_Hasher) isEvent_Type() {}

func (*Event_Bcb) isEvent_Type() {}

func (*Event_Mempool) isEvent_Type() {}

func (*Event_Availability) isEvent_Type() {}

func (*Event_BatchDb) isEvent_Type() {}

func (*Event_BatchFetcher) isEvent_Type() {}

func (*Event_ThreshCrypto) isEvent_Type() {}

func (*Event_PingPong) isEvent_Type() {}

func (*Event_Checkpoint) isEvent_Type() {}

func (*Event_Factory) isEvent_Type() {}

func (*Event_Iss) isEvent_Type() {}

func (*Event_Orderer) isEvent_Type() {}

func (*Event_NewRequests) isEvent_Type() {}

func (*Event_SignRequest) isEvent_Type() {}

func (*Event_SignResult) isEvent_Type() {}

func (*Event_VerifyNodeSigs) isEvent_Type() {}

func (*Event_NodeSigsVerified) isEvent_Type() {}

func (*Event_SendMessage) isEvent_Type() {}

func (*Event_MessageReceived) isEvent_Type() {}

func (*Event_DeliverCert) isEvent_Type() {}

func (*Event_VerifyRequestSig) isEvent_Type() {}

func (*Event_RequestSigVerified) isEvent_Type() {}

func (*Event_StoreVerifiedRequest) isEvent_Type() {}

func (*Event_AppSnapshotRequest) isEvent_Type() {}

func (*Event_AppSnapshot) isEvent_Type() {}

func (*Event_AppRestoreState) isEvent_Type() {}

func (*Event_NewEpoch) isEvent_Type() {}

func (*Event_NewConfig) isEvent_Type() {}

func (*Event_TestingString) isEvent_Type() {}

func (*Event_TestingUint) isEvent_Type() {}

type Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Init) Reset() {
	*x = Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Init) ProtoMessage() {}

func (x *Init) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Init.ProtoReflect.Descriptor instead.
func (*Init) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{1}
}

type NewRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*requestpb.Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *NewRequests) Reset() {
	*x = NewRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRequests) ProtoMessage() {}

func (x *NewRequests) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRequests.ProtoReflect.Descriptor instead.
func (*NewRequests) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{2}
}

func (x *NewRequests) GetRequests() []*requestpb.Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   [][]byte    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Origin *SignOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{3}
}

func (x *SignRequest) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignRequest) GetOrigin() *SignOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SignResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte      `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Origin    *SignOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SignResult) Reset() {
	*x = SignResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResult) ProtoMessage() {}

func (x *SignResult) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResult.ProtoReflect.Descriptor instead.
func (*SignResult) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{4}
}

func (x *SignResult) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignResult) GetOrigin() *SignOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SignOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*SignOrigin_ContextStore
	//	*SignOrigin_Dsl
	//	*SignOrigin_Checkpoint
	//	*SignOrigin_Sb
	Type isSignOrigin_Type `protobuf_oneof:"type"`
}

func (x *SignOrigin) Reset() {
	*x = SignOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOrigin) ProtoMessage() {}

func (x *SignOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOrigin.ProtoReflect.Descriptor instead.
func (*SignOrigin) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{5}
}

func (x *SignOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *SignOrigin) GetType() isSignOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SignOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*SignOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *SignOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*SignOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

func (x *SignOrigin) GetCheckpoint() *checkpointpb.SignOrigin {
	if x, ok := x.GetType().(*SignOrigin_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *SignOrigin) GetSb() *ordererpb.SignOrigin {
	if x, ok := x.GetType().(*SignOrigin_Sb); ok {
		return x.Sb
	}
	return nil
}

type isSignOrigin_Type interface {
	isSignOrigin_Type()
}

type SignOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type SignOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,4,opt,name=dsl,proto3,oneof"`
}

type SignOrigin_Checkpoint struct {
	Checkpoint *checkpointpb.SignOrigin `protobuf:"bytes,5,opt,name=checkpoint,proto3,oneof"`
}

type SignOrigin_Sb struct {
	Sb *ordererpb.SignOrigin `protobuf:"bytes,6,opt,name=sb,proto3,oneof"`
}

func (*SignOrigin_ContextStore) isSignOrigin_Type() {}

func (*SignOrigin_Dsl) isSignOrigin_Type() {}

func (*SignOrigin_Checkpoint) isSignOrigin_Type() {}

func (*SignOrigin_Sb) isSignOrigin_Type() {}

type SigVerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SigVerData) Reset() {
	*x = SigVerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigVerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigVerData) ProtoMessage() {}

func (x *SigVerData) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigVerData.ProtoReflect.Descriptor instead.
func (*SigVerData) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{6}
}

func (x *SigVerData) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyNodeSigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*SigVerData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Signatures [][]byte      `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Origin     *SigVerOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	NodeIds    []string      `protobuf:"bytes,4,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
}

func (x *VerifyNodeSigs) Reset() {
	*x = VerifyNodeSigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyNodeSigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyNodeSigs) ProtoMessage() {}

func (x *VerifyNodeSigs) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyNodeSigs.ProtoReflect.Descriptor instead.
func (*VerifyNodeSigs) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyNodeSigs) GetData() []*SigVerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VerifyNodeSigs) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *VerifyNodeSigs) GetOrigin() *SigVerOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *VerifyNodeSigs) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

type NodeSigsVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin  *SigVerOrigin `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	NodeIds []string      `protobuf:"bytes,2,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	Valid   []bool        `protobuf:"varint,3,rep,packed,name=valid,proto3" json:"valid,omitempty"`
	Errors  []string      `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	AllOk   bool          `protobuf:"varint,5,opt,name=all_ok,json=allOk,proto3" json:"all_ok,omitempty"`
}

func (x *NodeSigsVerified) Reset() {
	*x = NodeSigsVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSigsVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSigsVerified) ProtoMessage() {}

func (x *NodeSigsVerified) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSigsVerified.ProtoReflect.Descriptor instead.
func (*NodeSigsVerified) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{8}
}

func (x *NodeSigsVerified) GetOrigin() *SigVerOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *NodeSigsVerified) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *NodeSigsVerified) GetValid() []bool {
	if x != nil {
		return x.Valid
	}
	return nil
}

func (x *NodeSigsVerified) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *NodeSigsVerified) GetAllOk() bool {
	if x != nil {
		return x.AllOk
	}
	return false
}

type SigVerOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*SigVerOrigin_ContextStore
	//	*SigVerOrigin_Dsl
	//	*SigVerOrigin_Checkpoint
	//	*SigVerOrigin_Sb
	Type isSigVerOrigin_Type `protobuf_oneof:"type"`
}

func (x *SigVerOrigin) Reset() {
	*x = SigVerOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigVerOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigVerOrigin) ProtoMessage() {}

func (x *SigVerOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigVerOrigin.ProtoReflect.Descriptor instead.
func (*SigVerOrigin) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{9}
}

func (x *SigVerOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *SigVerOrigin) GetType() isSigVerOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SigVerOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*SigVerOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *SigVerOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*SigVerOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

func (x *SigVerOrigin) GetCheckpoint() *checkpointpb.SigVerOrigin {
	if x, ok := x.GetType().(*SigVerOrigin_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *SigVerOrigin) GetSb() *ordererpb.SigVerOrigin {
	if x, ok := x.GetType().(*SigVerOrigin_Sb); ok {
		return x.Sb
	}
	return nil
}

type isSigVerOrigin_Type interface {
	isSigVerOrigin_Type()
}

type SigVerOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type SigVerOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,4,opt,name=dsl,proto3,oneof"`
}

type SigVerOrigin_Checkpoint struct {
	Checkpoint *checkpointpb.SigVerOrigin `protobuf:"bytes,5,opt,name=checkpoint,proto3,oneof"`
}

type SigVerOrigin_Sb struct {
	Sb *ordererpb.SigVerOrigin `protobuf:"bytes,6,opt,name=sb,proto3,oneof"`
}

func (*SigVerOrigin_ContextStore) isSigVerOrigin_Type() {}

func (*SigVerOrigin_Dsl) isSigVerOrigin_Type() {}

func (*SigVerOrigin_Checkpoint) isSigVerOrigin_Type() {}

func (*SigVerOrigin_Sb) isSigVerOrigin_Type() {}

type SendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg          *messagepb.Message `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Destinations []string           `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *SendMessage) Reset() {
	*x = SendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessage) ProtoMessage() {}

func (x *SendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessage.ProtoReflect.Descriptor instead.
func (*SendMessage) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{10}
}

func (x *SendMessage) GetMsg() *messagepb.Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SendMessage) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type MessageReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Msg  *messagepb.Message `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *MessageReceived) Reset() {
	*x = MessageReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReceived) ProtoMessage() {}

func (x *MessageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReceived.ProtoReflect.Descriptor instead.
func (*MessageReceived) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{11}
}

func (x *MessageReceived) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *MessageReceived) GetMsg() *messagepb.Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

type DeliverCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   uint64               `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Cert *availabilitypb.Cert `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *DeliverCert) Reset() {
	*x = DeliverCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverCert) ProtoMessage() {}

func (x *DeliverCert) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverCert.ProtoReflect.Descriptor instead.
func (*DeliverCert) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{12}
}

func (x *DeliverCert) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *DeliverCert) GetCert() *availabilitypb.Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

type VerifyRequestSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *requestpb.Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Signature []byte             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VerifyRequestSig) Reset() {
	*x = VerifyRequestSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRequestSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequestSig) ProtoMessage() {}

func (x *VerifyRequestSig) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequestSig.ProtoReflect.Descriptor instead.
func (*VerifyRequestSig) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{13}
}

func (x *VerifyRequestSig) GetRequest() *requestpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *VerifyRequestSig) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RequestSigVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *requestpb.Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Valid   bool               `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Error   string             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RequestSigVerified) Reset() {
	*x = RequestSigVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSigVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSigVerified) ProtoMessage() {}

func (x *RequestSigVerified) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSigVerified.ProtoReflect.Descriptor instead.
func (*RequestSigVerified) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{14}
}

func (x *RequestSigVerified) GetRequest() *requestpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RequestSigVerified) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *RequestSigVerified) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StoreVerifiedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request       *requestpb.Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Data          []byte             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Authenticator []byte             `protobuf:"bytes,3,opt,name=authenticator,proto3" json:"authenticator,omitempty"`
}

func (x *StoreVerifiedRequest) Reset() {
	*x = StoreVerifiedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreVerifiedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreVerifiedRequest) ProtoMessage() {}

func (x *StoreVerifiedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreVerifiedRequest.ProtoReflect.Descriptor instead.
func (*StoreVerifiedRequest) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{15}
}

func (x *StoreVerifiedRequest) GetRequest() *requestpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StoreVerifiedRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StoreVerifiedRequest) GetAuthenticator() []byte {
	if x != nil {
		return x.Authenticator
	}
	return nil
}

type AppSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyTo string `protobuf:"bytes,1,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
}

func (x *AppSnapshotRequest) Reset() {
	*x = AppSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSnapshotRequest) ProtoMessage() {}

func (x *AppSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSnapshotRequest.ProtoReflect.Descriptor instead.
func (*AppSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{16}
}

func (x *AppSnapshotRequest) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

type AppSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppData []byte `protobuf:"bytes,1,opt,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
}

func (x *AppSnapshot) Reset() {
	*x = AppSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSnapshot) ProtoMessage() {}

func (x *AppSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSnapshot.ProtoReflect.Descriptor instead.
func (*AppSnapshot) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{17}
}

func (x *AppSnapshot) GetAppData() []byte {
	if x != nil {
		return x.AppData
	}
	return nil
}

type AppRestoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoint *checkpointpb.StableCheckpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *AppRestoreState) Reset() {
	*x = AppRestoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRestoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRestoreState) ProtoMessage() {}

func (x *AppRestoreState) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRestoreState.ProtoReflect.Descriptor instead.
func (*AppRestoreState) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{18}
}

func (x *AppRestoreState) GetCheckpoint() *checkpointpb.StableCheckpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

type NewEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNr uint64 `protobuf:"varint,1,opt,name=epoch_nr,json=epochNr,proto3" json:"epoch_nr,omitempty"`
}

func (x *NewEpoch) Reset() {
	*x = NewEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpoch) ProtoMessage() {}

func (x *NewEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpoch.ProtoReflect.Descriptor instead.
func (*NewEpoch) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{19}
}

func (x *NewEpoch) GetEpochNr() uint64 {
	if x != nil {
		return x.EpochNr
	}
	return 0
}

type NewConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNr    uint64               `protobuf:"varint,1,opt,name=epoch_nr,json=epochNr,proto3" json:"epoch_nr,omitempty"`
	Membership *commonpb.Membership `protobuf:"bytes,2,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (x *NewConfig) Reset() {
	*x = NewConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConfig) ProtoMessage() {}

func (x *NewConfig) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConfig.ProtoReflect.Descriptor instead.
func (*NewConfig) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{20}
}

func (x *NewConfig) GetEpochNr() uint64 {
	if x != nil {
		return x.EpochNr
	}
	return 0
}

func (x *NewConfig) GetMembership() *commonpb.Membership {
	if x != nil {
		return x.Membership
	}
	return nil
}

type TimerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*TimerEvent_Delay
	//	*TimerEvent_Repeat
	//	*TimerEvent_GarbageCollect
	Type isTimerEvent_Type `protobuf_oneof:"Type"`
}

func (x *TimerEvent) Reset() {
	*x = TimerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerEvent) ProtoMessage() {}

func (x *TimerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerEvent.ProtoReflect.Descriptor instead.
func (*TimerEvent) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{21}
}

func (m *TimerEvent) GetType() isTimerEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TimerEvent) GetDelay() *TimerDelay {
	if x, ok := x.GetType().(*TimerEvent_Delay); ok {
		return x.Delay
	}
	return nil
}

func (x *TimerEvent) GetRepeat() *TimerRepeat {
	if x, ok := x.GetType().(*TimerEvent_Repeat); ok {
		return x.Repeat
	}
	return nil
}

func (x *TimerEvent) GetGarbageCollect() *TimerGarbageCollect {
	if x, ok := x.GetType().(*TimerEvent_GarbageCollect); ok {
		return x.GarbageCollect
	}
	return nil
}

type isTimerEvent_Type interface {
	isTimerEvent_Type()
}

type TimerEvent_Delay struct {
	Delay *TimerDelay `protobuf:"bytes,1,opt,name=delay,proto3,oneof"`
}

type TimerEvent_Repeat struct {
	Repeat *TimerRepeat `protobuf:"bytes,2,opt,name=repeat,proto3,oneof"`
}

type TimerEvent_GarbageCollect struct {
	GarbageCollect *TimerGarbageCollect `protobuf:"bytes,3,opt,name=garbage_collect,json=garbageCollect,proto3,oneof"`
}

func (*TimerEvent_Delay) isTimerEvent_Type() {}

func (*TimerEvent_Repeat) isTimerEvent_Type() {}

func (*TimerEvent_GarbageCollect) isTimerEvent_Type() {}

type TimerDelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: The field name must not be `events`, since it conflicts with a package name in the generated code.
	//       This is a bug in the Mir code generator that should be fixed.
	EventsToDelay []*Event `protobuf:"bytes,1,rep,name=events_to_delay,json=eventsToDelay,proto3" json:"events_to_delay,omitempty"`
	Delay         uint64   `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *TimerDelay) Reset() {
	*x = TimerDelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerDelay) ProtoMessage() {}

func (x *TimerDelay) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerDelay.ProtoReflect.Descriptor instead.
func (*TimerDelay) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{22}
}

func (x *TimerDelay) GetEventsToDelay() []*Event {
	if x != nil {
		return x.EventsToDelay
	}
	return nil
}

func (x *TimerDelay) GetDelay() uint64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type TimerRepeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventsToRepeat []*Event `protobuf:"bytes,1,rep,name=events_to_repeat,json=eventsToRepeat,proto3" json:"events_to_repeat,omitempty"`
	Delay          uint64   `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	RetentionIndex uint64   `protobuf:"varint,3,opt,name=retention_index,json=retentionIndex,proto3" json:"retention_index,omitempty"`
}

func (x *TimerRepeat) Reset() {
	*x = TimerRepeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerRepeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerRepeat) ProtoMessage() {}

func (x *TimerRepeat) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerRepeat.ProtoReflect.Descriptor instead.
func (*TimerRepeat) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{23}
}

func (x *TimerRepeat) GetEventsToRepeat() []*Event {
	if x != nil {
		return x.EventsToRepeat
	}
	return nil
}

func (x *TimerRepeat) GetDelay() uint64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TimerRepeat) GetRetentionIndex() uint64 {
	if x != nil {
		return x.RetentionIndex
	}
	return 0
}

type TimerGarbageCollect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetentionIndex uint64 `protobuf:"varint,1,opt,name=retention_index,json=retentionIndex,proto3" json:"retention_index,omitempty"`
}

func (x *TimerGarbageCollect) Reset() {
	*x = TimerGarbageCollect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerGarbageCollect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerGarbageCollect) ProtoMessage() {}

func (x *TimerGarbageCollect) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerGarbageCollect.ProtoReflect.Descriptor instead.
func (*TimerGarbageCollect) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{24}
}

func (x *TimerGarbageCollect) GetRetentionIndex() uint64 {
	if x != nil {
		return x.RetentionIndex
	}
	return 0
}

var File_eventpb_eventpb_proto protoreflect.FileDescriptor

var file_eventpb_eventpb_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2f, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x62, 0x63, 0x62, 0x70, 0x62, 0x2f, 0x62, 0x63, 0x62, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x73, 0x6c, 0x70,
	0x62, 0x2f, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x64, 0x62,
	0x70, 0x62, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x62, 0x61, 0x74, 0x63, 0x68, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x70, 0x62, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6e, 0x67, 0x70, 0x62, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x70, 0x62, 0x2f,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6d, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x0f, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x62, 0x63, 0x62, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x62, 0x63, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x62, 0x63, 0x62, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x62, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x62, 0x12,
	0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x43, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x67, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12, 0x49, 0x0a,
	0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4f, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x46, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0d, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xad, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e,
	0x74, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x64, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x04, 0x90, 0xa6, 0x1d, 0x01, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12,
	0x58, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x01, 0x42,
	0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x0c, 0x0a,
	0x04, 0x49, 0x6e, 0x69, 0x74, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x43, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0x5a, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x63, 0x0a, 0x0a,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x04, 0xa0,
	0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x04, 0x98, 0xa6, 0x1d,
	0x01, 0x22, 0xb1, 0x02, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64,
	0x73, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x02, 0x73, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x02, 0x73, 0x62, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0xe5, 0x01,
	0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x73,
	0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x42, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4f,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x34, 0x82, 0xa6, 0x1d, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x3a,
	0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x04, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x4f, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x34, 0x82, 0xa6, 0x1d, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0x82, 0xa6, 0x1d, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6c, 0x6c,
	0x5f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x4f, 0x6b,
	0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67,
	0x56, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x73, 0x62, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x02,
	0x73, 0x62, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x58, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x82, 0xa6,
	0x1d, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x82, 0xa6, 0x1d, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0x82, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x43, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x33, 0x82, 0xa6,
	0x1d, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x4e,
	0x72, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x3a,
	0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x5e, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7e, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82,
	0xa6, 0x1d, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d,
	0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x3a, 0x04,
	0x98, 0xa6, 0x1d, 0x01, 0x22, 0x28, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x62, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x35, 0x82, 0xa6, 0x1d, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x72, 0x52, 0x07, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x4e, 0x72, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x09,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x08, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x35, 0x82, 0xa6, 0x1d,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x4e, 0x72, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x47, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x3a, 0x04, 0x90, 0xa6,
	0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xa6, 0x1d, 0x01,
	0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x36, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0x82, 0xa6, 0x1d, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22,
	0x86, 0x02, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12,
	0x38, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x50, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0x82, 0xa6, 0x1d, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x65, 0x0a, 0x0f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x3c, 0x82, 0xa6, 0x1d, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x65, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3c, 0x82, 0xa6, 0x1d, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x42, 0x30, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventpb_eventpb_proto_rawDescOnce sync.Once
	file_eventpb_eventpb_proto_rawDescData = file_eventpb_eventpb_proto_rawDesc
)

func file_eventpb_eventpb_proto_rawDescGZIP() []byte {
	file_eventpb_eventpb_proto_rawDescOnce.Do(func() {
		file_eventpb_eventpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventpb_eventpb_proto_rawDescData)
	})
	return file_eventpb_eventpb_proto_rawDescData
}

var file_eventpb_eventpb_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_eventpb_eventpb_proto_goTypes = []interface{}{
	(*Event)(nil),                         // 0: eventpb.Event
	(*Init)(nil),                          // 1: eventpb.Init
	(*NewRequests)(nil),                   // 2: eventpb.NewRequests
	(*SignRequest)(nil),                   // 3: eventpb.SignRequest
	(*SignResult)(nil),                    // 4: eventpb.SignResult
	(*SignOrigin)(nil),                    // 5: eventpb.SignOrigin
	(*SigVerData)(nil),                    // 6: eventpb.SigVerData
	(*VerifyNodeSigs)(nil),                // 7: eventpb.VerifyNodeSigs
	(*NodeSigsVerified)(nil),              // 8: eventpb.NodeSigsVerified
	(*SigVerOrigin)(nil),                  // 9: eventpb.SigVerOrigin
	(*SendMessage)(nil),                   // 10: eventpb.SendMessage
	(*MessageReceived)(nil),               // 11: eventpb.MessageReceived
	(*DeliverCert)(nil),                   // 12: eventpb.DeliverCert
	(*VerifyRequestSig)(nil),              // 13: eventpb.VerifyRequestSig
	(*RequestSigVerified)(nil),            // 14: eventpb.RequestSigVerified
	(*StoreVerifiedRequest)(nil),          // 15: eventpb.StoreVerifiedRequest
	(*AppSnapshotRequest)(nil),            // 16: eventpb.AppSnapshotRequest
	(*AppSnapshot)(nil),                   // 17: eventpb.AppSnapshot
	(*AppRestoreState)(nil),               // 18: eventpb.AppRestoreState
	(*NewEpoch)(nil),                      // 19: eventpb.NewEpoch
	(*NewConfig)(nil),                     // 20: eventpb.NewConfig
	(*TimerEvent)(nil),                    // 21: eventpb.TimerEvent
	(*TimerDelay)(nil),                    // 22: eventpb.TimerDelay
	(*TimerRepeat)(nil),                   // 23: eventpb.TimerRepeat
	(*TimerGarbageCollect)(nil),           // 24: eventpb.TimerGarbageCollect
	(*hasherpb.Event)(nil),                // 25: hasherpb.Event
	(*bcbpb.Event)(nil),                   // 26: bcbpb.Event
	(*mempoolpb.Event)(nil),               // 27: mempoolpb.Event
	(*availabilitypb.Event)(nil),          // 28: availabilitypb.Event
	(*batchdbpb.Event)(nil),               // 29: batchdbpb.Event
	(*batchfetcherpb.Event)(nil),          // 30: batchfetcherpb.Event
	(*threshcryptopb.Event)(nil),          // 31: threshcryptopb.Event
	(*pingpongpb.Event)(nil),              // 32: pingpongpb.Event
	(*checkpointpb.Event)(nil),            // 33: checkpointpb.Event
	(*factorypb.Event)(nil),               // 34: factorypb.Event
	(*isspb.Event)(nil),                   // 35: isspb.Event
	(*ordererpb.Event)(nil),               // 36: ordererpb.Event
	(*wrapperspb.StringValue)(nil),        // 37: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil),        // 38: google.protobuf.UInt64Value
	(*requestpb.Request)(nil),             // 39: requestpb.Request
	(*contextstorepb.Origin)(nil),         // 40: contextstorepb.Origin
	(*dslpb.Origin)(nil),                  // 41: dslpb.Origin
	(*checkpointpb.SignOrigin)(nil),       // 42: checkpointpb.SignOrigin
	(*ordererpb.SignOrigin)(nil),          // 43: ordererpb.SignOrigin
	(*checkpointpb.SigVerOrigin)(nil),     // 44: checkpointpb.SigVerOrigin
	(*ordererpb.SigVerOrigin)(nil),        // 45: ordererpb.SigVerOrigin
	(*messagepb.Message)(nil),             // 46: messagepb.Message
	(*availabilitypb.Cert)(nil),           // 47: availabilitypb.Cert
	(*checkpointpb.StableCheckpoint)(nil), // 48: checkpointpb.StableCheckpoint
	(*commonpb.Membership)(nil),           // 49: commonpb.Membership
}
var file_eventpb_eventpb_proto_depIdxs = []int32{
	1,  // 0: eventpb.Event.init:type_name -> eventpb.Init
	21, // 1: eventpb.Event.timer:type_name -> eventpb.TimerEvent
	25, // 2: eventpb.Event.hasher:type_name -> hasherpb.Event
	26, // 3: eventpb.Event.bcb:type_name -> bcbpb.Event
	27, // 4: eventpb.Event.mempool:type_name -> mempoolpb.Event
	28, // 5: eventpb.Event.availability:type_name -> availabilitypb.Event
	29, // 6: eventpb.Event.batch_db:type_name -> batchdbpb.Event
	30, // 7: eventpb.Event.batch_fetcher:type_name -> batchfetcherpb.Event
	31, // 8: eventpb.Event.thresh_crypto:type_name -> threshcryptopb.Event
	32, // 9: eventpb.Event.ping_pong:type_name -> pingpongpb.Event
	33, // 10: eventpb.Event.checkpoint:type_name -> checkpointpb.Event
	34, // 11: eventpb.Event.factory:type_name -> factorypb.Event
	35, // 12: eventpb.Event.iss:type_name -> isspb.Event
	36, // 13: eventpb.Event.orderer:type_name -> ordererpb.Event
	2,  // 14: eventpb.Event.new_requests:type_name -> eventpb.NewRequests
	3,  // 15: eventpb.Event.sign_request:type_name -> eventpb.SignRequest
	4,  // 16: eventpb.Event.sign_result:type_name -> eventpb.SignResult
	7,  // 17: eventpb.Event.verify_node_sigs:type_name -> eventpb.VerifyNodeSigs
	8,  // 18: eventpb.Event.node_sigs_verified:type_name -> eventpb.NodeSigsVerified
	10, // 19: eventpb.Event.send_message:type_name -> eventpb.SendMessage
	11, // 20: eventpb.Event.message_received:type_name -> eventpb.MessageReceived
	12, // 21: eventpb.Event.deliver_cert:type_name -> eventpb.DeliverCert
	13, // 22: eventpb.Event.verify_request_sig:type_name -> eventpb.VerifyRequestSig
	14, // 23: eventpb.Event.request_sig_verified:type_name -> eventpb.RequestSigVerified
	15, // 24: eventpb.Event.store_verified_request:type_name -> eventpb.StoreVerifiedRequest
	16, // 25: eventpb.Event.app_snapshot_request:type_name -> eventpb.AppSnapshotRequest
	17, // 26: eventpb.Event.app_snapshot:type_name -> eventpb.AppSnapshot
	18, // 27: eventpb.Event.app_restore_state:type_name -> eventpb.AppRestoreState
	19, // 28: eventpb.Event.new_epoch:type_name -> eventpb.NewEpoch
	20, // 29: eventpb.Event.new_config:type_name -> eventpb.NewConfig
	37, // 30: eventpb.Event.testingString:type_name -> google.protobuf.StringValue
	38, // 31: eventpb.Event.testingUint:type_name -> google.protobuf.UInt64Value
	0,  // 32: eventpb.Event.next:type_name -> eventpb.Event
	39, // 33: eventpb.NewRequests.requests:type_name -> requestpb.Request
	5,  // 34: eventpb.SignRequest.origin:type_name -> eventpb.SignOrigin
	5,  // 35: eventpb.SignResult.origin:type_name -> eventpb.SignOrigin
	40, // 36: eventpb.SignOrigin.context_store:type_name -> contextstorepb.Origin
	41, // 37: eventpb.SignOrigin.dsl:type_name -> dslpb.Origin
	42, // 38: eventpb.SignOrigin.checkpoint:type_name -> checkpointpb.SignOrigin
	43, // 39: eventpb.SignOrigin.sb:type_name -> ordererpb.SignOrigin
	6,  // 40: eventpb.VerifyNodeSigs.data:type_name -> eventpb.SigVerData
	9,  // 41: eventpb.VerifyNodeSigs.origin:type_name -> eventpb.SigVerOrigin
	9,  // 42: eventpb.NodeSigsVerified.origin:type_name -> eventpb.SigVerOrigin
	40, // 43: eventpb.SigVerOrigin.context_store:type_name -> contextstorepb.Origin
	41, // 44: eventpb.SigVerOrigin.dsl:type_name -> dslpb.Origin
	44, // 45: eventpb.SigVerOrigin.checkpoint:type_name -> checkpointpb.SigVerOrigin
	45, // 46: eventpb.SigVerOrigin.sb:type_name -> ordererpb.SigVerOrigin
	46, // 47: eventpb.SendMessage.msg:type_name -> messagepb.Message
	46, // 48: eventpb.MessageReceived.msg:type_name -> messagepb.Message
	47, // 49: eventpb.DeliverCert.cert:type_name -> availabilitypb.Cert
	39, // 50: eventpb.VerifyRequestSig.request:type_name -> requestpb.Request
	39, // 51: eventpb.RequestSigVerified.request:type_name -> requestpb.Request
	39, // 52: eventpb.StoreVerifiedRequest.request:type_name -> requestpb.Request
	48, // 53: eventpb.AppRestoreState.checkpoint:type_name -> checkpointpb.StableCheckpoint
	49, // 54: eventpb.NewConfig.membership:type_name -> commonpb.Membership
	22, // 55: eventpb.TimerEvent.delay:type_name -> eventpb.TimerDelay
	23, // 56: eventpb.TimerEvent.repeat:type_name -> eventpb.TimerRepeat
	24, // 57: eventpb.TimerEvent.garbage_collect:type_name -> eventpb.TimerGarbageCollect
	0,  // 58: eventpb.TimerDelay.events_to_delay:type_name -> eventpb.Event
	0,  // 59: eventpb.TimerRepeat.events_to_repeat:type_name -> eventpb.Event
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_eventpb_eventpb_proto_init() }
func file_eventpb_eventpb_proto_init() {
	if File_eventpb_eventpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventpb_eventpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigVerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyNodeSigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSigsVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigVerOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequestSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSigVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreVerifiedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRestoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerDelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerRepeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerGarbageCollect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eventpb_eventpb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_Init)(nil),
		(*Event_Timer)(nil),
		(*Event_Hasher)(nil),
		(*Event_Bcb)(nil),
		(*Event_Mempool)(nil),
		(*Event_Availability)(nil),
		(*Event_BatchDb)(nil),
		(*Event_BatchFetcher)(nil),
		(*Event_ThreshCrypto)(nil),
		(*Event_PingPong)(nil),
		(*Event_Checkpoint)(nil),
		(*Event_Factory)(nil),
		(*Event_Iss)(nil),
		(*Event_Orderer)(nil),
		(*Event_NewRequests)(nil),
		(*Event_SignRequest)(nil),
		(*Event_SignResult)(nil),
		(*Event_VerifyNodeSigs)(nil),
		(*Event_NodeSigsVerified)(nil),
		(*Event_SendMessage)(nil),
		(*Event_MessageReceived)(nil),
		(*Event_DeliverCert)(nil),
		(*Event_VerifyRequestSig)(nil),
		(*Event_RequestSigVerified)(nil),
		(*Event_StoreVerifiedRequest)(nil),
		(*Event_AppSnapshotRequest)(nil),
		(*Event_AppSnapshot)(nil),
		(*Event_AppRestoreState)(nil),
		(*Event_NewEpoch)(nil),
		(*Event_NewConfig)(nil),
		(*Event_TestingString)(nil),
		(*Event_TestingUint)(nil),
	}
	file_eventpb_eventpb_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SignOrigin_ContextStore)(nil),
		(*SignOrigin_Dsl)(nil),
		(*SignOrigin_Checkpoint)(nil),
		(*SignOrigin_Sb)(nil),
	}
	file_eventpb_eventpb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SigVerOrigin_ContextStore)(nil),
		(*SigVerOrigin_Dsl)(nil),
		(*SigVerOrigin_Checkpoint)(nil),
		(*SigVerOrigin_Sb)(nil),
	}
	file_eventpb_eventpb_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*TimerEvent_Delay)(nil),
		(*TimerEvent_Repeat)(nil),
		(*TimerEvent_GarbageCollect)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventpb_eventpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eventpb_eventpb_proto_goTypes,
		DependencyIndexes: file_eventpb_eventpb_proto_depIdxs,
		MessageInfos:      file_eventpb_eventpb_proto_msgTypes,
	}.Build()
	File_eventpb_eventpb_proto = out.File
	file_eventpb_eventpb_proto_rawDesc = nil
	file_eventpb_eventpb_proto_goTypes = nil
	file_eventpb_eventpb_proto_depIdxs = nil
}
