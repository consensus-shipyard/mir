package events

import (
	"github.com/filecoin-project/mir/pkg/pb/availabilitypb"
	"github.com/filecoin-project/mir/pkg/pb/eventpb"
	"github.com/filecoin-project/mir/pkg/pb/trantorpb"
	trantorpbtypes "github.com/filecoin-project/mir/pkg/pb/trantorpb/types"
	t "github.com/filecoin-project/mir/pkg/types"
)

// These 2 functions convert between the two types of request events: (i) the newer type used by the newest DSL codegen featured
// contained in trantorpb/types and used by the availability module, and (ii) the old type
// generated by the lecagy make generate contained in trantorpb and used by the modules written prior to the newest codegen.
// TODO remove once all modules use newest DSL codegen

func RequestConvertToLegacyDsl(txs []*trantorpbtypes.Transaction) []*trantorpb.Transaction {
	_txs := make([]*trantorpb.Transaction, len(txs))
	for i, tx := range txs {
		_txs[i] = tx.Pb()
	}
	return _txs
}

func RequestConvertFromLegacyDsl(txs []*trantorpb.Transaction) []*trantorpbtypes.Transaction {
	_txs := make([]*trantorpbtypes.Transaction, len(txs))
	for i, tx := range txs {
		_txs[i] = trantorpbtypes.TransactionFromPb(tx)
	}
	return _txs
}

// ComputeCert is also needed for iss to call the ComputeCert event, because ISS does not use the DSL module.
func ComputeCert(destModule t.ModuleID) *eventpb.Event {
	return &eventpb.Event{
		DestModule: destModule.Pb(),
		Type: &eventpb.Event_Availability{
			Availability: &availabilitypb.Event{
				Type: &availabilitypb.Event_ComputeCert{
					ComputeCert: &availabilitypb.ComputeCert{},
				},
			},
		},
	}
}
